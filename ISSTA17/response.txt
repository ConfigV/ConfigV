We thank the reviewers for their time and positive feedback.

@reviewerA: "What are the core contributions to an ICFP audience?"

We agree with the reviewer that the translation from automata to FRP
is mainly a technical result. However, let us try to convince you that
this translation is just one of several crucial building blocks needed
for our major contribution: the first synthesis approach for
FRP. Specifically,

1. we introduce TSL, the first temporal logic for the specification of
   data transformations over time,

2. we formulate the technical constructions needed to translate TSL to
   LTL, and automata to FRP, and

3. we show that our approach works on examples that are significantly
   out of reach for existing reactive synthesis methods.

Overall, our paper establishes the first connection between the
research areas of FRP and reactive synthesis, and shows that this
connection provides significant value to both sides.

We also agree with the reviewer that, in synthesis, scalability is
always a serious concern. The translation of the automaton to an FRP
program is, however, very much not the bottleneck. The two aspects
that are critical to scalability are the following:

1. The synthesis of the automaton from the LTL formula. This is a
   double-exponentially hard problem, which, as we know from the
   reactive synthesis community, cannot be applied to arbitrarily
   large LTL formulas. We do not consider this as a serious issue for
   two reasons: a) there are effective methods developed in the
   reactive synthesis community which we leverage, such as bounded and
   symbolic synthesis techniques, and b) we are in much better shape
   than the reactive synthesis community, because we only synthesize
   the control structure (which tends to be reasonably small), while
   they also synthesize the data transformation (which tends to be
   arbitrarily large).

2. The under-approximation, which is necessary because the TSL
   synthesis problem is undecidable. We have not found this to be a
   problem in our experiments. If needed, the under-approximation can
   be improved manually.

@reviewerC: "Why should TSL be prefered over LTL?"

TSL is fundamentally more expressive than LTL. While LTL only allows
reasoning about Boolean data streams, TSL describes streams of
abstract data types. TSL is also a much more appropriate logic to
describe FRP programs, which typically handle complex data. The power
of TSL is also reflected in that its synthesis problem is in general
undecidable. We show that, by separating control and data, we can use
LTL synthesis algorithms to synthesize programs from TSL
specifications, which has proven effective on substantial FRP
programs.

@reviewerC: "I would have expected infinite state transition systems."

Yes and no. Our method separates control and data. While the control
part is (as usual) finite, the data part can be infinite. In that
sense, the reviewer is correct in observing that our reasoning is
finite by using uninterpreted functions, which provide a finite
abstraction.

@reviewerB:

We thank you for your encouraging words, and we like your suggestions
on how to restructure the paper to improve it further.
