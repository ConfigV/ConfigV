# the sample we learn from

[client]
socket          = /db/data/mysql.sock
port            = 3306
[mysqld]
socket          = /db/data/mysql.sock
port            = 3306


# constraints we generate
#   We assume that anything to the left of the '=' (or lacking '=') is a keyword
#   and everything to the right is a value.
#   We also only handle single line grammars.

# 1) constraints on ordering of keywords (not sure this one is needed, ask Ennan?)

o("bof","[client]") /\
o("[client]","socket_0") /\
o("[client]","port_0") /\
o("[client]","[mysqld]") /\
o("[client]","socket_1") /\
o("[client]","port_1") /\

o("socket_0","port_0") /\
o("socket_0","[mysqld]") /\
o("socket_0","socket_1") /\
o("socket_0","port_1") /\

...

# 2) constraints on ordering of values (lines that contains '=')
# (B) & (C) - Format Syntax

o("socket_0 = /db/data/mysql.sock", "port_0 = 3306") /\
o("socket_0 = /db/data/mysql.sock", "socket_1 = /db/database/mysql.sock") /\
...

# 3) constraints on value relations of same type
#    gather all strings and nums, and generate constraints between them
#    rather use types string, num, ip, file
# (G) & (H) - Value Inconsistency

v(socket_0) == v(socket_1) /\
v(port_0) == v(port_1 = 3306)

# 4) constraints on values to their keywords
# (A) - Format Lexical

port_0 == 3306 /\
socket_0 == ...

# At the end of processing this file we have learned config files must...

contain all keywords listed, in that order, with those values
