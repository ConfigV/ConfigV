Parameters.TagValue.Description,Tag value to match on ec2 instances
Metadata.AWS::CloudFormation::Interface.ParameterLabels.TagValue.default,Tag Value
Parameters.Action.AllowedValues,"[u'Stop', u'Terminate']"
Parameters.DryRun.Description,Set to true to test function without actually taking action on affected instances
Parameters.TagKey.Description,Tag key to match on ec2 instances
Resources.AWS::Events::Rule.Properties.EventPattern.source,[u'aws.health']
Resources.AWS::Lambda::Function.Properties.Description,stop or terminate EC2 instances that have a specific tag in response to AWS health events
Resources.AWS::Lambda::Permission.Properties.FunctionName,"{u'Fn::GetAtt': [u'LambdaFunction', u'Arn']}"
Resources.AWS::Lambda::Permission.Properties.Principal,events.amazonaws.com
Resources.AWS::Lambda::Permission.Properties.Action,lambda:InvokeFunction
Metadata.AWS::CloudFormation::Interface.ParameterLabels.TagKey.default,Tag Key
Resources.AWS::Events::Rule.Properties.EventPattern.detail.eventTypeCode,[u'AWS_EC2_INSTANCE_STORE_DRIVE_PERFORMANCE_DEGRADED']
Resources.AWS::Lambda::Function.Properties.Timeout,120
Resources.AWS::Events::Rule.Properties.EventPattern.detail-type,[u'AWS Health Event']
Resources.AWS::Events::Rule.Properties.EventPattern.detail.service,[u'EC2']
Resources.AWS::Lambda::Permission.Type,AWS::Lambda::Permission
Resources.AWS::Lambda::Function.Properties.Environment.Variables.DRY_RUN,{u'Ref': u'DryRun'}
Resources.AWS::IAM::Role.Type,AWS::IAM::Role
Resources.AWS::Lambda::Function.Properties.Role,"{u'Fn::GetAtt': [u'LambdaIAMRole', u'Arn']}"
Resources.AWS::Lambda::Function.Properties.Code.ZipFile,"{u'Fn::Join': [u'\n', [u'// Sample Lambda Function to stop EC2 instances when AWS Health AWS_EC2_INSTANCE_STORE_DRIVE_PERFORMANCE_DEGRADED events are generated. This is useful for situations where there is data redundancy and automated launch of instnaces (e.g. via Autoscaling).', u""var AWS = require('aws-sdk');"", u'', u'// define configuration', u'const tagKey = process.env.TAG_KEY;', u'const tagValue = process.env.TAG_VALUE;', u'const action = process.env.EC2_ACTION;', u'const dryRun = process.env.DRY_RUN;', u'', u'function getMatchingInstances(affectedEntities){', u'    //initialize an empty array', u'    var instances = [];', u'    // loop through entities', u'    for ( var i=0; i < affectedEntities.length; i+=1 )', u'    {', u'        var instanceId = affectedEntities[i].entityValue;', u'        // check that tags match', u'        if (affectedEntities[i].tags[[tagKey]] == tagValue){', u'            // add instanceid to the array', u'            instances.push(instanceId);', u'        }', u""        else console.log ('The following instance does not match the configured tag: ', instanceId);"", u'    }', u'    return instances', u'}', u'', u'function setupClient(region){', u'    // set the region for the sdk', u'    AWS.config.update({region: region});', u'    //create the ec2 client', u'    return new AWS.EC2();', u'}', u'', u'function getParams(instances, dryRun){', u'    // setup parameters', u'    var instancesParams = {', u'        InstanceIds: instances,', u'        DryRun: false', u'    };', u'    // enable DryRun if set in environment variables', u""    if (dryRun == 'true')  {"", u'        instancesParams.DryRun = true;', u'        console.log()', u'    }', u'    return instancesParams', u'}', u'', u'//main function which gets AWS Health data from Cloudwatch event', u'exports.handler = (event, context, callback) => {', u'', u'    // function to handle ec2 API response', u'    function handleResponse(err, data) {', u'        if (err) {                                                          // an error occurred', u""            if (err.code == 'DryRunOperation') {"", u'                console.log(instances, region, err.message);', u'                callback(null, awsHealthSuccessMessage);', u'            } else {', u'                console.log(instances, region, err, err.stack);', u'                throw err;', u'            }', u'', u'        } else {', u'            console.log(`Instance ${action}: `, instances, region);', u'            //return success', u'            callback(null, awsHealthSuccessMessage);', u'        }                                                                   // successful response', u'    }', u'', u'    //extract details from Cloudwatch event', u'    var eventName = event.detail.eventTypeCode;', u'    var affectedEntities = event.detail.affectedEntities;', u'    var region = event.region;', u'', u'    const awsHealthSuccessMessage = `Successfully got details from AWS Health event, ${eventName} and executed automated action.`;', u'', u'    // get affected instances that match the required tags', u'    instances = getMatchingInstances(affectedEntities);', u'', u'    if (instances.length > 0) {                           //there are some instances to take action on', u'', u""        //create an ec2 api client in the event's region"", u'        var ec2 = setupClient(region);', u'', u'        // setup parameters', u'        var instancesParams = getParams(instances, dryRun);', u'', u'        console.log (`attempting to ${action} the following instances: `, instances);', u'        // Call either the Terminate or the Stop API', u""        if (action == 'Terminate') ec2.terminateInstances(instancesParams, handleResponse);"", u'        else ec2.stopInstances(instancesParams, handleResponse);', u'', u'    } else {', u""        console.log('No instances in the event match the required tags, exiting without any action');"", u'        callback(null, awsHealthSuccessMessage);', u'    }', u'', u'};', u'']]}"
Metadata.AWS::CloudFormation::Interface.ParameterLabels.Action.default,Action to take
Resources.AWS::Events::Rule.Properties.State,ENABLED
Resources.AWS::Events::Rule.Properties.EventPattern.detail.eventTypeCategory,[u'issue']
Parameters.Action.Type,String
Resources.AWS::Lambda::Function.Properties.Handler,index.handler
Resources.AWS::Lambda::Function.Properties.Environment.Variables.EC2_ACTION,{u'Ref': u'Action'}
Resources.AWS::Events::Rule.Properties.Targets,"[{u'Id': u'InstanceStoreDegradedFunction', u'Arn': {u'Fn::GetAtt': [u'LambdaFunction', u'Arn']}}]"
Parameters.Action.Default,Stop
Metadata.AWS::CloudFormation::Interface.ParameterLabels.DryRun.default,Dry Run
Resources.AWS::Events::Rule.Properties.Description,AWS_EC2_INSTANCE_STORE_DRIVE_PERFORMANCE_DEGRADED
Resources.AWS::IAM::Role.Properties.Path,/
Resources.AWS::Lambda::Function.Type,AWS::Lambda::Function
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Statement,"[{u'Action': u'sts:AssumeRole', u'Effect': u'Allow', u'Principal': {u'Service': u'lambda.amazonaws.com'}}]"
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Version,2012-10-17
Parameters.TagValue.Default,dev
Resources.AWS::Lambda::Function.Properties.Runtime,nodejs6.1
Resources.AWS::Events::Rule.Type,AWS::Events::Rule
Resources.AWS::Lambda::Permission.Properties.SourceArn,"{u'Fn::GetAtt': [u'CloudWatchEventRule', u'Arn']}"
Parameters.DryRun.Default,true
Parameters.TagKey.Type,String
Parameters.DryRun.Type,String
Parameters.Action.Description,Action to take when Instance Storage is degraded
Resources.AWS::IAM::Role.Properties.Policies,"[{u'PolicyName': u'AADriveDegraded', u'PolicyDocument': {u'Version': u'2012-10-17', u'Statement': [{u'Action': [u'logs:CreateLogGroup', u'logs:CreateLogStream', u'logs:PutLogEvents'], u'Resource': [u'arn:aws:logs:*:*:*'], u'Effect': u'Allow', u'Sid': u'LambdaLogging'}, {u'Action': [{u'Fn::Sub': u'ec2:${Action}Instances'}], u'Resource': u'*', u'Effect': u'Allow', u'Sid': {u'Fn::Sub': u'EC2${Action}Instances'}}]}}]"
Metadata.AWS::CloudFormation::Interface.ParameterGroups,"[{u'Parameters': [u'Action', u'TagKey', u'TagValue', u'DryRun'], u'Label': {u'default': u'General Configuration'}}]"
Resources.AWS::Lambda::Function.Properties.Environment.Variables.TAG_VALUE,{u'Ref': u'TagValue'}
Parameters.TagKey.Default,stage
Resources.AWS::Lambda::Function.Properties.Environment.Variables.TAG_KEY,{u'Ref': u'TagKey'}
Parameters.TagValue.Type,String
