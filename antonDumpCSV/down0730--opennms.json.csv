Resources.AWS::AutoScaling::AutoScalingGroup.DependsOn,PublicRoute
Parameters.MinionCount.Description,Number of EC2 instances to launch for the Minion
Resources.AWS::EC2::Route.Type,AWS::EC2::Route
Resources.AWS::EC2::NetworkAclEntry.Properties.NetworkAclId,{u'Ref': u'PublicNetworkAcl'}
Parameters.SSHLocation.AllowedPattern,"(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})"
Mappings.SubnetConfig.VPC.CIDR,10.0.0.0/16
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.Tags,"[{u'PropagateAtLaunch': u'true', u'Value': u'Minion (Minion Lab)', u'Key': u'Name'}, {u'PropagateAtLaunch': u'true', u'Value': u'Public', u'Key': u'Network'}, {u'PropagateAtLaunch': u'true', u'Value': u'minion', u'Key': u'MinionLabInstanceType'}]"
Mappings.AWSRegionArch2AMI.eu-central-1.PV64,ami-6527cf0a
Outputs.VPCId.Value,{u'Ref': u'VPC'}
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.MinSize,1
Parameters.SSHLocation.ConstraintDescription,must be a valid CIDR range of the form x.x.x.x/x.
Parameters.KafkaCount.Type,Number
Parameters.KeyName.ConstraintDescription,must be the name of an existing EC2 KeyPair.
Resources.AWS::EC2::NetworkAclEntry.Properties.Egress,true
Resources.AWS::AutoScaling::AutoScalingGroup.UpdatePolicy.AutoScalingRollingUpdate.MaxBatchSize,1
Resources.AWS::AutoScaling::LaunchConfiguration.Properties.SecurityGroups,[{u'Ref': u'EC2SecurityGroup'}]
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.DesiredCapacity,{u'Ref': u'MinionCount'}
Parameters.SSHLocation.Description,Lockdown SSH access to the bastion host (default can be accessed from anywhere)
Resources.AWS::EC2::SubnetNetworkAclAssociation.Properties.SubnetId,{u'Ref': u'PublicSubnet'}
Resources.AWS::EC2::NetworkAcl.Type,AWS::EC2::NetworkAcl
Parameters.MinionCount.Default,2
Resources.AWS::EC2::VPC.Properties.EnableDnsSupport,true
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.AvailabilityZones,"[{u'Fn::GetAtt': [u'PublicSubnet', u'AvailabilityZone']}]"
Resources.AWS::EC2::Route.Properties.GatewayId,{u'Ref': u'InternetGateway'}
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.services.sysvinit.cfn-hup.files,"[u'/etc/cfn/cfn-hup.conf', u'/etc/cfn/hooks.d/cfn-auto-reloader.conf']"
Resources.AWS::EC2::SubnetNetworkAclAssociation.Type,AWS::EC2::SubnetNetworkAclAssociation
Resources.AWS::AutoScaling::LaunchConfiguration.Properties.UserData,"{u'Fn::Base64': {u'Fn::Join': [u'', [u'#!/bin/bash -xe\n', u'yum update -y aws-cfn-bootstrap\n', u'# Install the sample application\n', u'/opt/aws/bin/cfn-init -v ', u'    --stack ', {u'Ref': u'AWS::StackId'}, u'    --resource ElasticLaunchConfig ', u'    --region ', {u'Ref': u'AWS::Region'}, u'\n', u'# Signal copletion\n', u'/opt/aws/bin/cfn-signal -e $? ', u'    --stack ', {u'Ref': u'AWS::StackId'}, u'    --resource ElasticFleet ', u'    --region ', {u'Ref': u'AWS::Region'}, u'\n']]}}"
Resources.AWS::EC2::NetworkAclEntry.Type,AWS::EC2::NetworkAclEntry
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.services.sysvinit.cfn-hup.ensureRunning,true
Resources.AWS::EC2::NetworkAclEntry.Properties.Protocol,6
Resources.AWS::AutoScaling::AutoScalingGroup.UpdatePolicy.AutoScalingRollingUpdate.WaitOnResourceSignals,true
Resources.AWS::EC2::Subnet.Properties.CidrBlock,"{u'Fn::FindInMap': [u'SubnetConfig', u'Public', u'CIDR']}"
Resources.AWS::AutoScaling::AutoScalingGroup.UpdatePolicy.AutoScalingRollingUpdate.PauseTime,PT15M
Parameters.ElasticCount.Type,Number
Resources.AWS::AutoScaling::LaunchConfiguration.Properties.AssociatePublicIpAddress,true
Outputs.VPCId.Description,VPCId of the newly created VPC
Parameters.ElasticCount.Description,Number of EC2 instances to launch for Elastic cluster
Outputs.DNSName.Description,DNS Name of the EC2 host
Resources.AWS::EC2::SubnetNetworkAclAssociation.Properties.NetworkAclId,{u'Ref': u'PublicNetworkAcl'}
Resources.AWS::EC2::NetworkAclEntry.Properties.RuleNumber,100
Resources.AWS::EC2::VPCGatewayAttachment.Properties.InternetGatewayId,{u'Ref': u'InternetGateway'}
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.services.sysvinit.cfn-hup.enabled,true
Resources.AWS::EC2::RouteTable.Properties.Tags,"[{u'Value': {u'Ref': u'AWS::StackName'}, u'Key': u'Application'}, {u'Value': u'Public', u'Key': u'Network'}]"
Resources.AWS::AutoScaling::AutoScalingGroup.CreationPolicy.ResourceSignal.Timeout,PT45M
Resources.AWS::EC2::NetworkAclEntry.Properties.RuleAction,allow
Resources.AWS::EC2::Route.Properties.RouteTableId,{u'Ref': u'PublicRouteTable'}
Resources.AWS::EC2::Route.DependsOn,GatewayToInternet
Resources.AWS::EC2::Instance.Properties.NetworkInterfaces,"[{u'DeleteOnTermination': u'true', u'DeviceIndex': u'0', u'SubnetId': {u'Ref': u'PublicSubnet'}, u'GroupSet': [{u'Ref': u'EC2SecurityGroup'}], u'AssociatePublicIpAddress': u'true'}]"
Resources.AWS::EC2::RouteTable.Properties.VpcId,{u'Ref': u'VPC'}
Outputs.PublicSubnet.Value,{u'Ref': u'PublicSubnet'}
Parameters.ElasticCount.Default,2
Mappings.AWSRegionArch2AMI.eu-central-1.HVMG2,ami-7f04ec10
Outputs.PublicSubnet.Description,SubnetId of the public subnet
Resources.AWS::EC2::VPC.Properties.CidrBlock,"{u'Fn::FindInMap': [u'SubnetConfig', u'VPC', u'CIDR']}"
Resources.AWS::AutoScaling::AutoScalingGroup.UpdatePolicy.AutoScalingRollingUpdate.MinInstancesInService,1
Resources.AWS::EC2::Subnet.Type,AWS::EC2::Subnet
Resources.AWS::EC2::NetworkAclEntry.Properties.PortRange.To,65535
Resources.AWS::EC2::VPCGatewayAttachment.Properties.VpcId,{u'Ref': u'VPC'}
Resources.AWS::AutoScaling::LaunchConfiguration.Properties.KeyName,{u'Ref': u'KeyName'}
Resources.AWS::EC2::Route.Properties.DestinationCidrBlock,0.0.0.0/0
Resources.AWS::EC2::Subnet.Properties.VpcId,{u'Ref': u'VPC'}
Resources.AWS::EC2::VPC.Properties.EnableDnsHostnames,true
Resources.AWS::AutoScaling::AutoScalingGroup.CreationPolicy.ResourceSignal.Count,{u'Ref': u'MinionCount'}
Resources.AWS::EC2::SecurityGroup.Properties.GroupDescription,Enable access to the EC2 host
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.LaunchConfigurationName,{u'Ref': u'MinionLaunchConfig'}
Resources.AWS::AutoScaling::LaunchConfiguration.Properties.BlockDeviceMappings,"[{u'DeviceName': u'/dev/xvda', u'Ebs': {u'VolumeSize': u'100'}}]"
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./etc/cfn/hooks.d/cfn-auto-reloader.conf.content,"{u'Fn::Join': [u'', [u'[cfn-auto-reloader-hook]\n', u'triggers=post.update\n', u'path=Resources.WebServerLaunchConfig.Metadata.AWS::CloudFormation::Init\n', u'action=/opt/aws/bin/cfn-init -v ', u'         --stack ', {u'Ref': u'AWS::StackName'}, u'         --resource ElasticLaunchConfig ', u'         --region ', {u'Ref': u'AWS::Region'}, u'\n', u'runas=root\n']]}"
Resources.AWS::EC2::NetworkAcl.Properties.VpcId,{u'Ref': u'VPC'}
Resources.AWS::EC2::NetworkAclEntry.Properties.PortRange.From,0
Mappings.SubnetConfig.Public.CIDR,10.0.0.0/24
Resources.AWS::EC2::NetworkAcl.Properties.Tags,"[{u'Value': {u'Ref': u'AWS::StackName'}, u'Key': u'Application'}, {u'Value': u'Public', u'Key': u'Network'}]"
Resources.AWS::EC2::SubnetRouteTableAssociation.Properties.RouteTableId,{u'Ref': u'PublicRouteTable'}
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./etc/cfn/cfn-hup.conf.content,"{u'Fn::Join': [u'', [u'[main]\n', u'stack=', {u'Ref': u'AWS::StackId'}, u'\n', u'region=', {u'Ref': u'AWS::Region'}, u'\n']]}"
Resources.AWS::EC2::InternetGateway.Properties.Tags,"[{u'Value': {u'Ref': u'AWS::StackName'}, u'Key': u'Application'}, {u'Value': u'Public', u'Key': u'Network'}]"
Resources.AWS::EC2::VPC.Properties.Tags,"[{u'Value': {u'Ref': u'AWS::StackName'}, u'Key': u'Application'}, {u'Value': u'Public', u'Key': u'Network'}]"
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.MaxSize,10
Parameters.KafkaCount.Default,2
Parameters.KeyName.Description,Name of an existing EC2 KeyPair to enable SSH access to the bastion host
Resources.AWS::EC2::InternetGateway.Type,AWS::EC2::InternetGateway
Resources.AWS::EC2::SecurityGroup.Properties.VpcId,{u'Ref': u'VPC'}
Resources.AWS::EC2::SecurityGroup.Type,AWS::EC2::SecurityGroup
Resources.AWS::EC2::Instance.Properties.KeyName,{u'Ref': u'KeyName'}
Parameters.MinionCount.Type,Number
Parameters.SSHLocation.MinLength,9
Resources.AWS::AutoScaling::LaunchConfiguration.Type,AWS::AutoScaling::LaunchConfiguration
Resources.AWS::AutoScaling::AutoScalingGroup.Type,AWS::AutoScaling::AutoScalingGroup
Resources.AWS::AutoScaling::LaunchConfiguration.Properties.ImageId,"{u'Fn::FindInMap': [u'AWSRegionArch2AMI', {u'Ref': u'AWS::Region'}, {u'Fn::FindInMap': [u'AWSInstanceType2Arch', {u'Ref': u'EC2InstanceType'}, u'Arch']}]}"
Outputs.DNSName.Value,"{u'Fn::GetAtt': [u'LoadGeneratorEC2Host', u'PublicDnsName']}"
Resources.AWS::EC2::NetworkAclEntry.Properties.CidrBlock,0.0.0.0/0
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.VPCZoneIdentifier,[{u'Ref': u'PublicSubnet'}]
Resources.AWS::EC2::VPCGatewayAttachment.Type,AWS::EC2::VPCGatewayAttachment
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./etc/cfn/cfn-hup.conf.owner,root
Resources.AWS::EC2::VPC.Type,AWS::EC2::VPC
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./etc/cfn/cfn-hup.conf.group,root
Resources.AWS::EC2::Subnet.Properties.Tags,"[{u'Value': {u'Ref': u'AWS::StackName'}, u'Key': u'Application'}, {u'Value': u'Public', u'Key': u'Network'}]"
Resources.AWS::EC2::SubnetRouteTableAssociation.Type,AWS::EC2::SubnetRouteTableAssociation
Resources.AWS::EC2::Instance.DependsOn,GatewayToInternet
Resources.AWS::EC2::Instance.Type,AWS::EC2::Instance
Parameters.SSHLocation.MaxLength,18
Parameters.KafkaCount.Description,Number of EC2 instances to launch for Kafka cluster
Resources.AWS::EC2::SubnetRouteTableAssociation.Properties.SubnetId,{u'Ref': u'PublicSubnet'}
Resources.AWS::EC2::RouteTable.Type,AWS::EC2::RouteTable
Parameters.SSHLocation.Default,0.0.0.0/0
Mappings.AWSRegionArch2AMI.eu-central-1.HVM64,ami-ea26ce85
Parameters.SSHLocation.Type,String
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./etc/cfn/cfn-hup.conf.mode,000400
Parameters.KeyName.Type,AWS::EC2::KeyPair::KeyName
Resources.AWS::EC2::Instance.Properties.ImageId,"{u'Fn::FindInMap': [u'AWSRegionArch2AMI', {u'Ref': u'AWS::Region'}, {u'Fn::FindInMap': [u'AWSInstanceType2Arch', {u'Ref': u'EC2InstanceType'}, u'Arch']}]}"
Resources.AWS::EC2::SecurityGroup.Properties.SecurityGroupIngress,"[{u'ToPort': u'22', u'IpProtocol': u'tcp', u'CidrIp': {u'Ref': u'SSHLocation'}, u'FromPort': u'22'}, {u'ToPort': u'8980', u'IpProtocol': u'tcp', u'CidrIp': {u'Ref': u'SSHLocation'}, u'FromPort': u'8980'}, {u'ToPort': u'8181', u'IpProtocol': u'tcp', u'CidrIp': {u'Ref': u'SSHLocation'}, u'FromPort': u'8181'}, {u'ToPort': u'1162', u'IpProtocol': u'udp', u'CidrIp': {u'Fn::FindInMap': [u'SubnetConfig', u'Public', u'CIDR']}, u'FromPort': u'1162'}, {u'ToPort': u'1514', u'IpProtocol': u'udp', u'CidrIp': {u'Fn::FindInMap': [u'SubnetConfig', u'Public', u'CIDR']}, u'FromPort': u'1514'}, {u'ToPort': u'5432', u'IpProtocol': u'tcp', u'CidrIp': {u'Fn::FindInMap': [u'SubnetConfig', u'Public', u'CIDR']}, u'FromPort': u'5432'}, {u'ToPort': u'61616', u'IpProtocol': u'tcp', u'CidrIp': {u'Fn::FindInMap': [u'SubnetConfig', u'Public', u'CIDR']}, u'FromPort': u'61616'}, {u'ToPort': u'2181', u'IpProtocol': u'tcp', u'CidrIp': {u'Fn::FindInMap': [u'SubnetConfig', u'Public', u'CIDR']}, u'FromPort': u'2181'}, {u'ToPort': u'9092', u'IpProtocol': u'tcp', u'CidrIp': {u'Fn::FindInMap': [u'SubnetConfig', u'Public', u'CIDR']}, u'FromPort': u'9092'}, {u'ToPort': u'9092', u'IpProtocol': u'udp', u'CidrIp': {u'Fn::FindInMap': [u'SubnetConfig', u'Public', u'CIDR']}, u'FromPort': u'9092'}, {u'ToPort': u'9200', u'IpProtocol': u'tcp', u'CidrIp': {u'Fn::FindInMap': [u'SubnetConfig', u'Public', u'CIDR']}, u'FromPort': u'9200'}, {u'ToPort': u'9300', u'IpProtocol': u'tcp', u'CidrIp': {u'Fn::FindInMap': [u'SubnetConfig', u'Public', u'CIDR']}, u'FromPort': u'9300'}]"
Resources.AWS::EC2::Instance.Properties.Tags,"[{u'Value': u'PostgreSQL (Minion Lab)', u'Key': u'Name'}, {u'Value': u'postgres', u'Key': u'MinionLabInstanceType'}]"
