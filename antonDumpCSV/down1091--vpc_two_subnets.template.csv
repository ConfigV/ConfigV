Resources.AWS::EC2::VPC.Properties.CidrBlock,192.168.0.0/16
Parameters.KeyName.MinLength,1
Resources.AWS::EC2::Route.Type,AWS::EC2::Route
Resources.AWS::EC2::Route.Properties.DestinationCidrBlock,0.0.0.0/0
Resources.AWS::EC2::Subnet.Properties.VpcId,{u'Ref': u'VPC'}
Outputs.PublicSubnetID.Description,Public subnet ID
Resources.AWS::EC2::Route.Properties.InstanceId,{u'Ref': u'NATDevice'}
Resources.AWS::EC2::Subnet.Properties.CidrBlock,192.168.1.0/24
Resources.AWS::EC2::SecurityGroup.Properties.GroupDescription,"Enable internal access to NAT instance: receive internet-bound traffic from instances in private subnet, as well as SSH traffic from vpc"
Resources.AWS::EC2::Instance.Properties.KeyName,{u'Ref': u'KeyName'}
Parameters.SSHFrom.AllowedPattern,"(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})"
Parameters.KeyName.Type,String
Parameters.SSHFrom.MaxLength,18
Parameters.KeyName.ConstraintDescription,"can contain only alphanumeric characters, spaces, dashes and underscores."
Parameters.SSHFrom.ConstraintDescription,must be a valid CIDR range of the form x.x.x.x/x.
Parameters.SSHFrom.Type,String
Outputs.PublicSubnetID.Value,{u'Ref': u'PublicSubnet'}
Resources.AWS::EC2::VPCGatewayAttachment.Properties.InternetGatewayId,{u'Ref': u'InternetGateway'}
Resources.AWS::EC2::Instance.Properties.SourceDestCheck,false
Resources.AWS::EC2::SecurityGroup.Properties.SecurityGroupEgress,"[{u'ToPort': u'80', u'IpProtocol': u'tcp', u'CidrIp': u'0.0.0.0/0', u'FromPort': u'80'}, {u'ToPort': u'443', u'IpProtocol': u'tcp', u'CidrIp': u'0.0.0.0/0', u'FromPort': u'443'}, {u'ToPort': u'-1', u'IpProtocol': u'icmp', u'CidrIp': u'0.0.0.0/0', u'FromPort': u'-1'}]"
Resources.AWS::EC2::VPCGatewayAttachment.Type,AWS::EC2::VPCGatewayAttachment
Parameters.KeyName.MaxLength,64
Parameters.SSHFrom.Default,0.0.0.0/0
Resources.AWS::EC2::Route.Properties.GatewayId,{u'Ref': u'InternetGateway'}
Outputs.VpcID.Description,VPC ID of newly created VPC
Outputs.VpcID.Value,{u'Ref': u'VPC'}
Resources.AWS::EC2::RouteTable.Properties.Tags,"[{u'Value': {u'Ref': u'AWS::StackName'}, u'Key': u'Application'}, {u'Value': u'Private', u'Key': u'Network'}]"
Resources.AWS::EC2::Subnet.Properties.Tags,"[{u'Value': {u'Ref': u'AWS::StackName'}, u'Key': u'Application'}, {u'Value': u'Public', u'Key': u'Network'}]"
Parameters.SSHFrom.MinLength,9
Resources.AWS::EC2::SubnetRouteTableAssociation.Type,AWS::EC2::SubnetRouteTableAssociation
Resources.AWS::EC2::Instance.Type,AWS::EC2::Instance
Resources.AWS::EC2::InternetGateway.Properties.Tags,"[{u'Value': {u'Ref': u'AWS::StackName'}, u'Key': u'Application'}, {u'Value': u'Public', u'Key': u'Network'}]"
Resources.AWS::EC2::VPC.Properties.EnableDnsHostnames,True
Resources.AWS::EC2::VPC.Properties.Tags,"[{u'Value': {u'Ref': u'AWS::StackName'}, u'Key': u'Name'}, {u'Value': {u'Ref': u'AWS::StackName'}, u'Key': u'Application'}, {u'Value': u'Public', u'Key': u'Network'}]"
Resources.AWS::EC2::SubnetRouteTableAssociation.Properties.SubnetId,{u'Ref': u'PublicSubnet'}
Resources.AWS::EC2::RouteTable.Type,AWS::EC2::RouteTable
Resources.AWS::EC2::SecurityGroup.Properties.SecurityGroupIngress,"[{u'ToPort': u'22', u'IpProtocol': u'tcp', u'CidrIp': {u'Ref': u'SSHFrom'}, u'FromPort': u'22'}, {u'ToPort': u'80', u'IpProtocol': u'tcp', u'CidrIp': u'192.168.10.0/24', u'FromPort': u'80'}, {u'ToPort': u'443', u'IpProtocol': u'tcp', u'CidrIp': u'192.168.10.0/24', u'FromPort': u'443'}, {u'ToPort': u'-1', u'IpProtocol': u'icmp', u'CidrIp': u'192.168.10.0/24', u'FromPort': u'-1'}]"
Outputs.NATDeviceID.Value,{u'Ref': u'NATDevice'}
Parameters.KeyName.Description,Name of an existing EC2 KeyPair to enable SSH access to the instances
Resources.AWS::EC2::Route.Properties.RouteTableId,{u'Ref': u'PublicRouteTable'}
Resources.AWS::EC2::Instance.Properties.NetworkInterfaces,"[{u'DeleteOnTermination': u'true', u'DeviceIndex': u'0', u'SubnetId': {u'Ref': u'PublicSubnet'}, u'GroupSet': [{u'Ref': u'NATSecurityGroup'}], u'AssociatePublicIpAddress': u'true'}]"
Resources.AWS::EC2::InternetGateway.Type,AWS::EC2::InternetGateway
Resources.AWS::EC2::RouteTable.Properties.VpcId,{u'Ref': u'VPC'}
Resources.AWS::EC2::SecurityGroup.Properties.VpcId,{u'Ref': u'VPC'}
Parameters.KeyName.AllowedPattern,[-_ a-zA-Z0-9]*
Resources.AWS::EC2::SecurityGroup.Type,AWS::EC2::SecurityGroup
Outputs.NATDeviceID.Description,NAT Instance ID
Resources.AWS::EC2::VPC.Properties.EnableDnsSupport,True
Parameters.SSHFrom.Description,Lockdown SSH access to NAT instance (default can be accessed from anywhere)
Resources.AWS::EC2::Instance.Properties.ImageId,"{u'Fn::FindInMap': [u'AWSRegionArch2AMINAT', {u'Ref': u'AWS::Region'}, u'64']}"
Resources.AWS::EC2::SubnetRouteTableAssociation.Properties.RouteTableId,{u'Ref': u'PublicRouteTable'}
Resources.AWS::EC2::VPC.Type,AWS::EC2::VPC
Resources.AWS::EC2::Instance.Properties.Tags,"[{u'Value': u'NATDevice', u'Key': u'Name'}]"
Outputs.PrivateSubnetID.Value,{u'Ref': u'PrivateSubnet'}
Outputs.PrivateSubnetID.Description,Private Subnet ID
Resources.AWS::EC2::Subnet.Type,AWS::EC2::Subnet
Resources.AWS::EC2::VPCGatewayAttachment.Properties.VpcId,{u'Ref': u'VPC'}
