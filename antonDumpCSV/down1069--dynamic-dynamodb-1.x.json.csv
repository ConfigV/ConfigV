Resources.AWS::IAM::InstanceProfile.Properties.Path,/
Resources.AWS::AutoScaling::LaunchConfiguration.Properties.KeyName,{u'Ref': u'KeyPair'}
Resources.AWS::AutoScaling::LaunchConfiguration.Type,AWS::AutoScaling::LaunchConfiguration
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./etc/dynamic-dynamodb/scripts/init_config_file.sh.group,root
Resources.AWS::AutoScaling::LaunchConfiguration.Properties.UserData,"{u'Fn::Base64': {u'Fn::Join': [u'\n', [u'#!/usr/bin/env bash', u'# Helper function', u'log(){', u'    timenow=`date +%Y-%m-%dT%H:%M:%S.%N`', u'    echo ""$timenow: $1"" >> $INSTALLER_LOG_FILE_LOCATION', u'}', u'', u'backup_file_locally(){', u'  FILE=$1', u'  BACKUP_FILE_NAME=$FILE.`date +""%Y.%m.%d.%H.%M.%S.%N"".backup`', u'  mv $FILE ""$FILE.`date +""%Y.%m.%d.%H.%M.%S.%N"".backup`""', u'  log ""Backed up $FILE to $BACKUP_FILE_NAME""', u'}', u'error_exit(){', u'  log ""$1""', {u'Fn::Join': [u'', [u'/opt/aws/bin/cfn-signal ', u' -e 1 ', u' -r ""$1""', u"" '"", {u'Ref': u'WaitHandle'}, u""'\n""]]}, u'  exit 1', u'}', u'INSTALLER_LOG_FILE_LOCATION=/etc/dynamic-dynamodb/logs/installer.log', u""mkdir -p /etc/dynamic-dynamodb/{scripts,logs} || error_exit 'Failed to create /etc/dynamic-dynamodb'"", {u'Fn::Join': [u' ', [u'/opt/aws/bin/cfn-init ', u'  --stack ', {u'Ref': u'AWS::StackId'}, u'  --resource LaunchConfig ', u'  --region ', {u'Ref': u'AWS::Region'}, u"" || error_exit 'Failed in AWS::CloudFormation::Init. Check logs at /var/log/cfn-init.log'""]]}, u'', u'if [[ -f $INSTALLER_LOG_FILE_LOCATION ]]; then', u'  backup_file_locally $INSTALLER_LOG_FILE_LOCATION', u'fi', u""easy_install pip || error_exit 'Failed to install pip'"", u'log ""Installed pip""', u'echo ""dynamic-dynamodb>=1.7.0,<2.0.0"">/etc/dynamic-dynamodb/requirements.txt', u""/usr/local/bin/pip install -U -r /etc/dynamic-dynamodb/requirements.txt || error_exit 'Failed to install dynamic-dynamodb package from pip repository'"", u'log ""Installed dynamic-dynamodb""', u'', u'', u""mkdir -p ~/.aws || error_exit 'Failed to create /home/root/.aws'"", u'cp /home/ec2-user/.aws/config ~/.aws/config', {u'Fn::Join': [u'', [u'echo ""aws s3 cp /etc/dynamic-dynamodb/dynamic-dynamodb.conf ', {u'Ref': u'S3Bucket'}, u'dynamic-dynamodb.conf --region ', {u'Ref': u'S3BucketRegion'}, u"" || (echo 'Failed to upload /etc/dynamic-dynamodb/dynamic-dynamodb.conf to "", {u'Ref': u'S3Bucket'}, u'\' ; exit 1)"">/etc/dynamic-dynamodb/scripts/upload-config-to-s3.sh', u"" || error_exit 'Failed to create /etc/dynamic-dynamodb/scripts/upload-config-to-s3.sh'""]]}, {u'Fn::Join': [u' ', [u'sh /etc/dynamic-dynamodb/scripts/init_config_file.sh /etc/dynamic-dynamodb/dynamic-dynamodb.conf', {u'Ref': u'S3Bucket'}, u' $INSTALLER_LOG_FILE_LOCATION', u"" || error_exit 'Failed to initialize config file'""]]}, u""service dynamic-dynamodb start || error_exit 'Failed to start dynamic-dynamodb service. Check /etc/dynamic-dynamodb/logs/service.log'"", u'log ""Dynamic dynamodb service started""', {u'Fn::Join': [u'', [u'# All is well so signal success\n', u'/opt/aws/bin/cfn-signal -e 0 -r ""Dynamic DynamoDB instance setup complete"" \'', {u'Ref': u'WaitHandle'}, u""'\n""]]}]]}}"
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./etc/init.d/dynamic-dynamodb.owner,root
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.AvailabilityZones,{u'Fn::GetAZs': u''}
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./etc/init.d/dynamic-dynamodb.group,root
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./etc/dynamic-dynamodb/example-dynamic-dynamodb.conf.mode,000644
Resources.AWS::AutoScaling::AutoScalingGroup.Type,AWS::AutoScaling::AutoScalingGroup
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./home/ec2-user/.aws/config.mode,000755
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.Tags,"[{u'PropagateAtLaunch': u'true', u'Value': u'dynamic-dynamodb', u'Key': u'Name'}]"
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./etc/dynamic-dynamodb/scripts/init_config_file.sh.owner,root
Resources.AWS::AutoScaling::LaunchConfiguration.Properties.ImageId,"{u'Fn::FindInMap': [u'Region2AMI', {u'Ref': u'AWS::Region'}, u'64']}"
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.LaunchConfigurationName,{u'Ref': u'LaunchConfig'}
Resources.AWS::CloudFormation::WaitCondition.DependsOn,AutoScalingGroup
Outputs.URL.Value,You can find your EC2 instance at https://console.aws.amazon.com/ec2/v2/home?#Instances:search=dynamic-dynamodb
Parameters.KeyPair.MaxLength,64
Parameters.KeyPair.AllowedPattern,[-_ a-zA-Z0-9]*
Resources.AWS::IAM::Role.Properties.Path,/
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.MinSize,1
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./home/ec2-user/.aws/config.owner,root
Resources.AWS::IAM::Role.Type,AWS::IAM::Role
Parameters.S3BucketRegion.Type,String
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./etc/dynamic-dynamodb/scripts/init_config_file.sh.content,"{u'Fn::Join': [u'', [u'#!/usr/bin/env bash\n', u'CONFIG_FILE_LOCAL_LOCATION=$1\n', u'S3_BUCKET=$2\n', u'INSTALLER_LOG_FILE_LOCATION=$3\n', u'CONFIG_FILE_S3_LOCATION=""$S3_BUCKET""dynamic-dynamodb.conf\n', u'DOES_CONFIG_FILE_EXIST_ON_S3=0\n', u'DOES_CONFIG_FILE_EXIST_ON_LOCALLY=0\n\n', u'log(){\n', u'    timenow=`date +%Y-%m-%dT%H:%M:%S.%N`\n', u'    echo ""$timenow: $1"" >> $INSTALLER_LOG_FILE_LOCATION\n', u'}\n\n', u'error_exit(){\n', u'  log ""$1""\n', u'  exit 1\n', u'}\n\n', u'backup_file_locally(){\n', u'  FILE=$1\n', u'  BACKUP_FILE_NAME=$FILE.`date +\\""%Y.%m.%d.%H.%M.%S.%N\\"".backup`\n', u'  mv $FILE ""$FILE.`date +\\""%Y.%m.%d.%H.%M.%S.%N\\"".backup`"" || error_exit ""Failed in creating backup file $BACKUP_FILE_NAME""\n', u'  log ""Backed up $FILE to $BACKUP_FILE_NAME""\n', u'}\n\n', u'generate_new_config_file(){\n', u'   log ""Loading an example config file to $CONFIG_FILE_LOCAL_LOCATION""\n', u'   cp /etc/dynamic-dynamodb/example-dynamic-dynamodb.conf $CONFIG_FILE_LOCAL_LOCATION\n', u""   sed -i 's/region:\\ us-east-1/region:\\ "", {u'Ref': u'AWS::Region'}, u""/g' /etc/dynamic-dynamodb/example-dynamic-dynamodb.conf\n"", u'   log ""Loaded example configuration to $CONFIG_FILE_LOCAL_LOCATION""\n', u'}\n\n', u'download_from_s3(){\n', u'  aws s3 cp $CONFIG_FILE_S3_LOCATION $CONFIG_FILE_LOCAL_LOCATION --region ', {u'Ref': u'S3BucketRegion'}, u' || error_exit ""Failed to download config file from $CONFIG_FILE_S3_LOCATION to $CONFIG_FILE_S3_LOCATION  even though it existed on S3""\n', u'  log ""Downloaded config file from $CONFIG_FILE_S3_LOCATION to $CONFIG_FILE_LOCAL_LOCATION""\n', u'}\n\n', u'aws s3 cp $CONFIG_FILE_S3_LOCATION . --region ', {u'Ref': u'S3BucketRegion'}, u' >/dev/null 2>&1\n', u'if [[ ""$?"" -eq 0 ]]; then\n', u'   DOES_CONFIG_FILE_EXIST_ON_S3=1\n', u'fi\n\n', u'if [[ -f $CONFIG_FILE_LOCAL_LOCATION ]]; then\n', u'   DOES_CONFIG_FILE_EXIST_ON_LOCALLY=1\n', u'fi\n\n', u'if [ $DOES_CONFIG_FILE_EXIST_ON_S3 -eq 0 ] && [ $DOES_CONFIG_FILE_EXIST_ON_LOCALLY -eq 0 ]; then\n', u'  generate_new_config_file\n', u'elif [ $DOES_CONFIG_FILE_EXIST_ON_S3 -eq 0 ] && [ $DOES_CONFIG_FILE_EXIST_ON_LOCALLY -eq 1 ]; then\n', u'  log ""Config file exists locally and not on $CONFIG_FILE_S3_LOCATION, continuing to use the file"";\n', u'elif [ $DOES_CONFIG_FILE_EXIST_ON_S3 -eq 1 ] && [ $DOES_CONFIG_FILE_EXIST_ON_LOCALLY -eq 0 ]; then\n', u'  download_from_s3\n', u'elif [ $DOES_CONFIG_FILE_EXIST_ON_S3 -eq 1 ] && [ $DOES_CONFIG_FILE_EXIST_ON_LOCALLY -eq 1 ]; then\n', u'  backup_file_locally $CONFIG_FILE_LOCAL_LOCATION\n', u'  download_from_s3\n', u'fi\n']]}"
Parameters.S3Bucket.Default,s3://bucket-name/folder-path-if-applicable/
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./etc/init.d/dynamic-dynamodb.mode,000755
Resources.AWS::CloudFormation::WaitCondition.Properties.Handle,{u'Ref': u'WaitHandle'}
Resources.AWS::AutoScaling::LaunchConfiguration.Properties.SecurityGroups,[{u'Ref': u'SecurityGroup'}]
Parameters.KeyPair.MinLength,1
Resources.AWS::AutoScaling::LaunchConfiguration.Properties.IamInstanceProfile,{u'Ref': u'IamInstanceProfile'}
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./etc/dynamic-dynamodb/example-dynamic-dynamodb.conf.owner,root
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./etc/dynamic-dynamodb/scripts/init_config_file.sh.mode,000755
Outputs.URL.Description,EC2 instance
Resources.AWS::IAM::InstanceProfile.Type,AWS::IAM::InstanceProfile
Parameters.KeyPair.ConstraintDescription,"can contain only alphanumeric characters, spaces, dashes and underscores."
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Statement,"[{u'Action': [u'sts:AssumeRole'], u'Effect': u'Allow', u'Principal': {u'Service': [u'ec2.amazonaws.com']}}]"
Parameters.S3Bucket.Type,String
Parameters.S3BucketRegion.Default,us-east-1
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Version,2012-10-17
Resources.AWS::EC2::SecurityGroup.Properties.SecurityGroupIngress,"[{u'ToPort': 22, u'IpProtocol': u'tcp', u'CidrIp': u'0.0.0.0/0', u'FromPort': 22}]"
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./home/ec2-user/.aws/config.content,"{u'Fn::Join': [u'', [u'[default]\n', u'region=', {u'Ref': u'AWS::Region'}, u'\n']]}"
Resources.AWS::CloudFormation::WaitCondition.Properties.Timeout,600
Resources.AWS::CloudFormation::WaitCondition.Type,AWS::CloudFormation::WaitCondition
Resources.AWS::CloudFormation::WaitConditionHandle.Type,AWS::CloudFormation::WaitConditionHandle
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./etc/dynamic-dynamodb/example-dynamic-dynamodb.conf.source,https://raw.github.com/sebdah/dynamic-dynamodb/master/example-dynamic-dynamodb.conf
Parameters.KeyPair.Type,String
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./home/ec2-user/.aws/config.group,root
Parameters.KeyPair.Description,Remove this default value and enter the name of your EC2 keypair to use for SSH access
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./etc/dynamic-dynamodb/example-dynamic-dynamodb.conf.group,root
Resources.AWS::EC2::SecurityGroup.Type,AWS::EC2::SecurityGroup
Parameters.S3BucketRegion.Description,Region the S3 bucket is located in. This is needed due to a limitation in the AWS CLI (https://github.com/aws/aws-cli/issues/564)
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./etc/init.d/dynamic-dynamodb.content,"{u'Fn::Join': [u'\n', [u'#!/usr/bin/env bash', u'### BEGIN INIT INFO', u'# Provides:        dynamic-dynamodb', u'# Required-Start:  $remote_fs $syslog', u'# Required-Stop:   $remote_fs $syslog', u'# Default-Start:   2 3 4 5', u'# Default-Stop:    0 1 6', u'# Short-Description: Automatic scaling for AWS DynamoDB', u'# Description:     Dynamic DynamoDB provides automatic scaling for AWS DynamoDB', u'### END INIT INFO', u'', u'NAME=dynamicdynamodb', u'DAEMON=/usr/local/bin/dynamic-dynamodb', u'DRY_RUN=$2', u'DAEMON_START_ARGS=""--config /etc/dynamic-dynamodb/dynamic-dynamodb.conf --daemon start""', u'DAEMON_STOP_ARGS=""--config /etc/dynamic-dynamodb/dynamic-dynamodb.conf --daemon stop""', u'SCRIPTNAME=/etc/init.d/$NAME', u'SERVICE_LOG_FILE=/etc/dynamic-dynamodb/logs/service.log', u'', u'if [ ""$DRY_RUN"" == ""--dry-run"" ]; then', u'   DAEMON_START_ARGS=""--config /etc/dynamic-dynamodb/dynamic-dynamodb.conf --dry-run --daemon start""', u'   DAEMON_STOP_ARGS=""--config /etc/dynamic-dynamodb/dynamic-dynamodb.conf --dry-run --daemon stop""', u'elif [ ""$2"" != """" ]; then', u'   echo ""$2""', u'   echo ""Second parameter has to be --dry-run and is used only when running start/restart/force-reload commands""', u'   exit 1', u'fi', u'', u'# Exit if the package is not installed', u'[ -x ""$DAEMON"" ] || exit 1', u'', u'. /etc/rc.d/init.d/functions', u'', u'log(){', u'    timenow=`date +%Y-%m-%dT%H:%M:%S.%N`', u'    echo ""$timenow: $1""', u'    echo ""$timenow: $1"" >> $SERVICE_LOG_FILE', u'}', u'', u'error_exit(){', u'  log ""$1""', u'  exit 1', u'}', u'', u'', u'do_start()', u'{', u'   if [ ""$DRY_RUN"" == ""--dry-run"" ]; then', u'      log ""do_start:Dry run mode, not uploading latest config file to S3""', u'   else', u'      log ""do_start:Firstly, uploading latest config file to S3""', u'      sh /etc/dynamic-dynamodb/scripts/upload-config-to-s3.sh  || error_exit ""Failed in uploading config file to s3 bucket""', u'   fi', u'   log ""do_start:Starting $NAME""', u'   daemon $DAEMON $DAEMON_START_ARGS  || error_exit ""Failed in starting $NAME service""', u'}', u'', u'do_stop()', u'{', u'   log ""do_stop:Stopping $NAME""', u'   daemon $DAEMON $DAEMON_STOP_ARGS || error_exit ""Failed in stopping $NAME service""', u'}', u'', u'', u'case ""$1"" in', u'  start)', u'  do_start', u'  ;;', u'  stop)', u'  do_stop', u'  ;;', u'  status)', u'  status ""$DAEMON"" ""$NAME"" && exit 0 || exit $?', u'  ;;', u'  restart|force-reload)', u'  do_stop', u'  do_start', u'    #*)', u'  ;;', u'  *)', u'  echo ""Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}"" >&2', u'  exit 3', u'  ;;', u'esac', u'', u':']]}"
Resources.AWS::EC2::SecurityGroup.Properties.GroupDescription,Allow access to MyInstance
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.Cooldown,300
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.MaxSize,1
Parameters.S3Bucket.Description,Remove this default value and enter your pre-created S3 Bucket url upto folder name. (Please include the trailing /. Example: https://s3.amazonaws.com/my-bucket/ should be input as s3://my-bucket/). It will be used for storing a copy of Dynamic DynamoDB configuration file.
Resources.AWS::IAM::Role.Properties.Policies,"[{u'PolicyName': u'root', u'PolicyDocument': {u'Version': u'2012-10-17', u'Statement': [{u'Action': [u'dynamodb:DescribeTable', u'dynamodb:ListTables', u'dynamodb:UpdateTable', u'cloudwatch:GetMetricStatistics', u's3:PutObject', u's3:GetObject'], u'Resource': [u'*'], u'Effect': u'Allow'}, {u'Action': [u'sns:Publish'], u'Resource': [u'arn:aws:sns:*::dynamic-dynamodb'], u'Effect': u'Allow'}]}}]"
Parameters.KeyPair.Default,key-pair-name
Resources.AWS::IAM::InstanceProfile.Properties.Roles,[{u'Ref': u'IamRole'}]
