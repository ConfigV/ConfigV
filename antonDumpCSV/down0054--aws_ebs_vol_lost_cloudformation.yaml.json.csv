Parameters.SNSTopicName.Type,String
Resources.AWS::Events::Rule.Properties.EventPattern.source,[u'aws.health']
Resources.AWS::Events::Rule.Properties.EventPattern.detail.eventTypeCode,[u'AWS_EBS_VOLUME_LOST']
Resources.AWS::Lambda::Function.Properties.Timeout,25
Resources.AWS::Events::Rule.Properties.EventPattern.detail-type,[u'AWS Health Event']
Resources.AWS::Lambda::Function.Properties.Handler,index.handler
Resources.AWS::IAM::Role.Type,AWS::IAM::Role
Resources.AWS::Lambda::Function.Properties.Role,ExecutionRole.Arn
Resources.AWS::Lambda::Function.Properties.Code.ZipFile,"exports.handler = (event, context, callback) => {
  var AWS = require('aws-sdk');
  var ec2 = new AWS.EC2();
  var volumes = event.resources;  
  function findLatestSnapshot(err, data) {   
        console.log(data);
        if (err) console.log(err, err.stack); 
        else {
          var dates=[];
          var snapshots=data.Snapshots;
          snapshots.forEach(function(value){dates.push(new Date(value.StartTime));});
          var maxDate = new Date(Math.max.apply(null,dates));
              if ( snapshots.length > 0 ){
                  snapshotobj = snapshots.filter(function(o){return o.StartTime.getTime() === maxDate.getTime();});
                  console.log(""Found snapshot "",snapshotobj[0].SnapshotId,"" that was created on "", maxDate );
                  out = {'Snapshot': snapshotobj[0].SnapshotId}
                  result = out;
              }
              else{
                    console.log(""No Snapshot Found"");
                    result = {'Snapshot' : 'No Snapshot Found','VolumeId':volume };
              }
          callback(null,result);
        }
  }
  for (var i in volumes) {
    volume = volumes[i];
    console.log(""Searching for snapshot of volume "",volume);
    var params = { Filters: [{ Name: ""volume-id"", Values: [volume] },{ Name: ""progress"",  Values : [""100%""]}] };      
    ec2.describeSnapshots(params,findLatestSnapshot );      
  }
};
"
Resources.AWS::Events::Rule.Properties.State,ENABLED
Resources.AWS::Events::Rule.Properties.EventPattern.detail.eventTypeCategory,[u'issue']
Resources.AWS::Events::Rule.Properties.EventPattern.detail.service,[u'EBS']
Resources.AWS::Events::Rule.Properties.Targets,"[{u'RoleArn': u'ExecutionRole.Arn', u'Id': u'VolLostStateMachine', u'Arn': u'VolLostStateMachine'}]"
Resources.AWS::Events::Rule.Properties.RoleArn,ExecutionRole.Arn
Parameters.SNSTopicName.Description,Please enter your SNS Topic Name. (SNS Topic must exist in the same region where this stack is launched).
Resources.AWS::Events::Rule.Properties.Description,EventRule
Resources.AWS::IAM::Role.Properties.Path,/
Resources.AWS::Lambda::Function.Type,AWS::Lambda::Function
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Statement,"[{u'Action': [u'sts:AssumeRole'], u'Effect': u'Allow', u'Principal': {u'Service': [u'events.amazonaws.com', u'lambda.amazonaws.com', {u'Fn::Join': [u'', [u'states.', u'AWS::Region', u'.amazonaws.com']]}]}}]"
Resources.AWS::StepFunctions::StateMachine.Type,AWS::StepFunctions::StateMachine
Resources.AWS::StepFunctions::StateMachine.Properties.DefinitionString,"[u'{\n  ""StartAt"": ""GatherVolumeSnapshotInfo"",\n  ""States"": {\n    ""GatherVolumeSnapshotInfo"": {\n      ""Type"": ""Parallel"",\n      ""Next"": ""StopInstance"",\n      ""Branches"": [\n        {\n          ""StartAt"": ""FindVolumeDetails"",\n          ""States"": {\n            ""FindVolumeDetails"": {\n              ""Type"": ""Task"",\n              ""Resource"": ""${ FindVol }"",\n              ""Next"": ""CheckIfRootDev""\n            },\n            ""CheckIfRootDev"": {\n              ""Type"": ""Choice"",\n              ""Choices"": [\n                {\n                  ""Variable"": ""$.Device"",\n                  ""StringEquals"": ""/dev/xvda"",\n                  ""Next"": ""PassValueVolume""\n                },\n                {\n                  ""Variable"": ""$.Device"",\n                  ""StringEquals"": ""/dev/sda1"",\n                  ""Next"": ""PassValueVolume""\n                },\n                {\n                  ""Variable"": ""$.Device"",\n                  ""StringEquals"": ""None"",\n                  ""Next"": ""PassMessageDeviceDetached""\n                }\n              ],\n              ""Default"": ""PassMessageDeviceNotRoot""\n            },\n            ""PassMessageDeviceNotRoot"": {\n              ""Type"": ""Pass"",\n              ""Result"": {\n                ""Message"": ""Volume is not Root (Volume needs to be either/dev/xvda or /dev/sda1 ).  Please attend to the volume manually.""\n              },\n              ""ResultPath"": ""$.SNS"",\n              ""Next"": ""SendSNSErrorDeviceNotRoot""\n            },\n            ""PassMessageDeviceDetached"": {\n              ""Type"": ""Pass"",\n              ""Result"": {\n                ""Message"": ""Volume is Detached (Volume needs to be attached to either/dev/xvda or /dev/sda1 of an instance ).  Please attend to the volume manually.""\n              },\n              ""ResultPath"": ""$.SNS"",\n              ""Next"": ""SendSNSErrorDeviceDetached""\n            },\n            ""SendSNSErrorDeviceNotRoot"": {\n              ""Type"": ""Task"",\n              ""Resource"": ""${SNSNotif}"",\n              ""Next"": ""NotRoot""\n            },\n            ""SendSNSErrorDeviceDetached"": {\n              ""Type"": ""Task"",\n              ""Resource"": ""${SNSNotif}"",\n              ""Next"": ""Detached""\n            },\n            ""NotRoot"": {\n              ""Type"": ""Fail"",\n              ""Cause"": ""Volume is not /dev/xvda or /dev/sda1""\n            },\n            ""Detached"": {\n              ""Type"": ""Fail"",\n              ""Cause"": ""Volume is not attached to instance as /dev/xvda or /dev/sda1.""\n            },\n            ""PassValueVolume"": {\n              ""Type"": ""Pass"",\n              ""End"": true\n            }\n          }\n        },\n        {\n          ""StartAt"": ""FindLatestSnapshot"",\n          ""States"": {\n            ""FindLatestSnapshot"": {\n              ""Type"": ""Task"",\n              ""Resource"": ""${FindSnap}"",\n              ""Next"": ""CheckIfSnapshotExist""\n            },\n            ""CheckIfSnapshotExist"": {\n              ""Type"": ""Choice"",\n              ""Choices"": [\n                {\n                  ""Variable"": ""$.Snapshot"",\n                  ""StringEquals"": ""No Snapshot Found"",\n                  ""Next"": ""PassMessageNoSnapshot""\n                }\n              ],\n              ""Default"": ""PassValueSnapshot""\n            },\n            ""PassMessageNoSnapshot"": {\n              ""Type"": ""Pass"",\n              ""Result"": {\n                ""Message"": ""No Shapshot Found on this Volume. Please attend to the volume manually.""\n              },\n              ""ResultPath"": ""$.SNS"",\n              ""Next"": ""SendSNSErrorNoSnapshot""\n            },\n            ""SendSNSErrorNoSnapshot"": {\n              ""Type"": ""Task"",\n              ""Resource"": ""${SNSNotif}"",\n              ""Next"": ""NoSnapshot""\n            },\n            ""NoSnapshot"": {\n              ""Type"": ""Fail"",\n              ""Cause"": ""No Snapshot Found for the Volume.""\n            },\n            ""PassValueSnapshot"": {\n              ""Type"": ""Pass"",\n              ""End"": true\n            }\n          }\n        }\n      ]\n    },\n    ""StopInstance"": {\n      ""Type"": ""Task"",\n      ""Resource"": ""${StopInst}"",\n      ""Next"": ""WaitInstanceStop""\n    },\n    ""WaitInstanceStop"": {\n      ""Type"": ""Task"",\n      ""Resource"": ""${CheckInst}"",\n      ""Retry"": [\n        {\n          ""ErrorEquals"": [\n            ""HandledError""\n          ],\n          ""IntervalSeconds"": 5,\n          ""MaxAttempts"": 3000\n        }\n      ],\n      ""Next"": ""DetachRootVolume""\n    },\n    ""DetachRootVolume"": {\n      ""Type"": ""Task"",\n      ""Resource"": ""${DetachVol}"",\n      ""Next"": ""WaitDetachVolume""\n    },\n    ""WaitDetachVolume"": {\n      ""Type"": ""Task"",\n      ""Resource"": ""${CheckVol}"",\n      ""Retry"": [\n        {\n          ""ErrorEquals"": [\n            ""HandledError""\n          ],\n          ""IntervalSeconds"": 5,\n          ""MaxAttempts"": 3000\n        }\n      ],\n      ""Next"": ""RestoreSnapshot""\n    },\n    ""RestoreSnapshot"": {\n      ""Type"": ""Task"",\n      ""Resource"": ""${RestSnap}"",\n      ""Next"": ""WaitVolumeCreated""\n    },\n    ""WaitVolumeCreated"": {\n      ""Type"": ""Task"",\n      ""Resource"": ""${CheckVol}"",\n      ""Retry"": [\n        {\n          ""ErrorEquals"": [\n            ""HandledError""\n          ],\n          ""IntervalSeconds"": 5,\n          ""MaxAttempts"": 3000\n        }\n      ],\n      ""Next"": ""AttachNewVolume""\n    },\n    ""AttachNewVolume"": {\n      ""Type"": ""Task"",\n      ""Resource"": ""${AttachVol}"",\n      ""Next"": ""WaitVolumeAttached""\n    },\n    ""WaitVolumeAttached"": {\n      ""Type"": ""Task"",\n      ""Resource"": ""${CheckVolInuse}"",\n      ""Retry"": [\n        {\n          ""ErrorEquals"": [\n            ""HandledError""\n          ],\n          ""IntervalSeconds"": 5,\n          ""MaxAttempts"": 3000\n        }\n      ],\n      ""Next"": ""StartInstance""\n    },\n    ""StartInstance"": {\n      ""Type"": ""Task"",\n      ""Resource"": ""${StartInst}"",\n      ""Next"": ""PassMessageRestoreSuccess""\n    },\n    ""PassMessageRestoreSuccess"": {\n      ""Type"": ""Pass"",\n      ""Result"": {\n        ""Message"": ""New volume has been restored from the latest snapshot, and attached to the instance. Please double check everything is OK with the instance.""\n      },\n      ""ResultPath"": ""$.SNS"",\n      ""Next"": ""SNSMessageRestoreSuccess""\n    },\n    ""SNSMessageRestoreSuccess"": {\n      ""Type"": ""Task"",\n      ""Resource"": ""${SNSNotif}"",\n      ""End"": true\n    }\n  }\n}', {u'FindSnap': u'LFFindLatestSnapshot.Arn', u'FindVol': u'LFFindVolumeDetails.Arn', u'CheckInst': u'LFCheckInstance.Arn', u'SNSNotif': u'LFSNSNotif.Arn', u'AttachVol': u'LFAttachVolume.Arn', u'DetachVol': u'LFDetachVolume.Arn', u'StopInst': u'LFStopInstance.Arn', u'CheckVolInuse': u'LFCheckVolumeInuse.Arn', u'RestSnap': u'LFRestoreSnapshot.Arn', u'CheckVol': u'LFCheckVolume.Arn', u'StartInst': u'LFStartInstance.Arn'}]"
Resources.AWS::Lambda::Function.Properties.Runtime,nodejs6.1
Resources.AWS::Events::Rule.Type,AWS::Events::Rule
Resources.AWS::StepFunctions::StateMachine.Properties.RoleArn,ExecutionRole.Arn
Resources.AWS::IAM::Role.Properties.Policies,"[{u'PolicyName': u'Policies', u'PolicyDocument': {u'Statement': [{u'Action': [u'logs:CreateLogGroup', u'logs:CreateLogStream', u'logs:PutLogEvents'], u'Resource': u'arn:aws:logs:*:*:*', u'Effect': u'Allow'}, {u'Action': [u'ec2:AttachVolume', u'ec2:CreateVolume', u'ec2:DescribeSnapshots', u'ec2:DescribeVolumes', u'ec2:DetachVolume', u'ec2:DescribeInstances', u'ec2:StartInstances', u'ec2:StopInstances'], u'Resource': u'*', u'Effect': u'Allow'}, {u'Action': [u'lambda:InvokeFunction'], u'Resource': {u'Fn::Join': [u'', [u'arn:aws:lambda:', u'AWS::Region', u':', u'AWS::AccountId', u':*']]}, u'Effect': u'Allow'}, {u'Action': [u'states:StartExecution'], u'Resource': {u'Fn::Join': [u'', [u'arn:aws:states:', u'AWS::Region', u':', u'AWS::AccountId', u':*']]}, u'Effect': u'Allow'}, {u'Action': [u'sns:Publish'], u'Resource': {u'Fn::Join': [u'', [u'arn:aws:sns:', u'AWS::Region', u':', u'AWS::AccountId', u':*']]}, u'Effect': u'Allow'}]}}]"
Resources.AWS::Lambda::Function.Properties.Environment.Variables.SNSARN,"{u'Fn::Join': [u'', [u'arn:aws:sns:', u'AWS::Region', u':', u'AWS::AccountId', u':', u'SNSTopicName']]}"
