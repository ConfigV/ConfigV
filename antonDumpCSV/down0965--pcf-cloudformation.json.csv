Resources.AWS::IAM::InstanceProfile.Properties.Path,/
Parameters.OpsManIngressCidr.Default,0.0.0.0/0
Resources.AWS::IAM::Role.Type,AWS::IAM::Role
Resources.AWS::EC2::NetworkAclEntry.Properties.Egress,true
Resources.AWS::RDS::DBInstance.Type,AWS::RDS::DBInstance
Outputs.PcfERTSubnetAZ3AvailabilityZone.Value,"{u'Fn::GetAtt': [u'PcfERTSubnetAZ3', u'AvailabilityZone']}"
Resources.AWS::EC2::NetworkAclEntry.Properties.NetworkAclId,{u'Ref': u'PcfNetworkAcl'}
Outputs.PcfRdsPassword.Condition,CreateRDS
Outputs.PcfServicesSubnetAZ3AvailabilityZone.Value,"{u'Fn::GetAtt': [u'PcfServicesSubnetAZ3', u'AvailabilityZone']}"
Resources.AWS::RDS::DBInstance.Properties.MasterUsername,{u'Ref': u'RDSUsername'}
Parameters.AvailabilityZone2.Type,String
Resources.AWS::EC2::Route.Type,AWS::EC2::Route
Outputs.PcfServicesSubnetAZ3.Value,{u'Ref': u'PcfServicesSubnetAZ3'}
Outputs.PcfElbTcpName.Value,{u'Ref': u'PcfElbTcp'}
Resources.AWS::IAM::Role.DependsOn,"[u'PcfVPC', u'PcfOpsManBucket']"
Resources.AWS::IAM::User.DependsOn,"[u'PcfVPC', u'PcfOpsManBucket']"
Resources.AWS::EC2::VPCDHCPOptionsAssociation.Type,AWS::EC2::VPCDHCPOptionsAssociation
Resources.AWS::EC2::SecurityGroupEgress.Properties.IpProtocol,-1
Resources.AWS::EC2::VPCDHCPOptionsAssociation.Properties.VpcId,{u'Ref': u'PcfVPC'}
Parameters.RDSPassword.NoEcho,true
Resources.AWS::EC2::SecurityGroupIngress.Properties.GroupId,{u'Ref': u'PcfOpsManSecurityGroup'}
Resources.AWS::RDS::DBSubnetGroup.Properties.Tags,"[{u'Value': {u'Fn::Join': [u'', [{u'Ref': u'EnvironmentID'}, u'-rds-subnet-group']]}, u'Key': u'Name'}]"
Resources.AWS::EC2::Subnet.Properties.Tags,"[{u'Value': {u'Fn::Join': [u'', [{u'Ref': u'EnvironmentID'}, u'-services-subnet-az1']]}, u'Key': u'Name'}]"
Resources.AWS::RDS::DBInstance.Properties.MultiAZ,True
Resources.AWS::RDS::DBInstance.Properties.Engine,MySQL
Outputs.PcfManagementSubnetAZ1.Value,{u'Ref': u'PcfManagementSubnetAZ1'}
Outputs.PcfRdsUsername.Condition,CreateRDS
Parameters.AvailabilityZone1.Description,Example: us-west-2a
Parameters.RDSUsername.Type,String
Resources.AWS::EC2::NetworkAclEntry.Properties.RuleNumber,100
Resources.AWS::IAM::User.Properties.Policies,[]
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Version,2012-10-17
Resources.AWS::IAM::ManagedPolicy.Properties.Users,[{u'Ref': u'PcfIamUser'}]
Parameters.RDSUsername.Description,RDS database username (leave blank to skip RDS)
Parameters.OpsManSSHKeyPairName.Type,AWS::EC2::KeyPair::KeyName
Resources.AWS::EC2::SubnetNetworkAclAssociation.Properties.SubnetId,{u'Ref': u'PcfManagementSubnetAZ2'}
Resources.AWS::EC2::NetworkAcl.Type,AWS::EC2::NetworkAcl
Resources.AWS::IAM::ManagedPolicy.Type,AWS::IAM::ManagedPolicy
Outputs.PcfManagementSubnetAZ2.Value,{u'Ref': u'PcfManagementSubnetAZ2'}
Parameters.OpsManIngressCidr.Type,String
Outputs.PcfElasticRuntimeS3DropletsBucket.Value,{u'Ref': u'PcfDropletsBucket'}
Resources.AWS::IAM::ManagedPolicy.Properties.Roles,[{u'Ref': u'PcfIamRole'}]
Outputs.PcfElbWebDnsName.Value,"{u'Fn::GetAtt': [u'PcfElbWeb', u'DNSName']}"
Resources.AWS::EC2::VPC.Properties.EnableDnsSupport,true
Resources.AWS::S3::Bucket.Properties.VersioningConfiguration.Status,Suspended
Outputs.PcfERTSubnetAZ2AvailabilityZone.Value,"{u'Fn::GetAtt': [u'PcfERTSubnetAZ2', u'AvailabilityZone']}"
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.HealthCheck.UnhealthyThreshold,3
Parameters.ERTCertificateARN.Description,ARN for pre-uploaded certificate for the ERT
Resources.AWS::EC2::SubnetNetworkAclAssociation.Type,AWS::EC2::SubnetNetworkAclAssociation
Parameters.EnvironmentID.Default,pcf-env-id
Parameters.AvailabilityZone1.Type,String
Resources.AWS::EC2::SecurityGroupEgress.Properties.CidrIp,0.0.0.0/0
Outputs.PcfIamUserSecretAccessKey.Value,"{u'Fn::GetAtt': [u'PcfIamUserAccessKey', u'SecretAccessKey']}"
Resources.AWS::EC2::NetworkAclEntry.Properties.Protocol,-1
Outputs.PcfServicesSubnetAZ1AvailabilityZone.Value,"{u'Fn::GetAtt': [u'PcfServicesSubnetAZ1', u'AvailabilityZone']}"
Resources.AWS::IAM::ManagedPolicy.Properties.PolicyDocument.Version,2012-10-17
Resources.AWS::S3::Bucket.Properties.Tags,"[{u'Value': u'Elastic Runtime S3 Packages Bucket', u'Key': u'Name'}]"
Resources.AWS::EC2::SecurityGroupIngress.Type,AWS::EC2::SecurityGroupIngress
Resources.AWS::EC2::Subnet.Properties.CidrBlock,10.0.8.0/24
Resources.AWS::EC2::Instance.Properties.KeyName,{u'Ref': u'OpsManSSHKeyPairName'}
Parameters.RDSDBName.Description,RDS database name (leave blank to skip RDS). Nust begin with a letter and contain only alphanumeric characters.
Outputs.PcfERTSubnetAZ2.Value,{u'Ref': u'PcfERTSubnetAZ2'}
Resources.AWS::EC2::Instance.Properties.DisableApiTermination,false
Resources.AWS::RDS::DBInstance.Properties.PubliclyAccessible,False
Mappings.NATRegionToAmiMap.eu-central-1.id,ami-0469bb6b
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.HealthCheck.Timeout,3
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.HealthCheck.Interval,5
Outputs.PcfRdsAddress.Condition,CreateRDS
Outputs.PcfElbWebName.Value,{u'Ref': u'PcfElbWeb'}
Resources.AWS::EC2::SubnetNetworkAclAssociation.Properties.NetworkAclId,{u'Ref': u'PcfNetworkAcl'}
Outputs.PcfERTSubnetAZ3.Value,{u'Ref': u'PcfERTSubnetAZ3'}
Resources.AWS::EC2::VPCGatewayAttachment.Properties.InternetGatewayId,{u'Ref': u'PcfInternetGateway'}
Outputs.PcfERTSubnetAZ1.Value,{u'Ref': u'PcfERTSubnetAZ1'}
Outputs.PcfRdsPassword.Value,{u'Ref': u'RDSPassword'}
Resources.AWS::RDS::DBInstance.Properties.MasterUserPassword,{u'Ref': u'RDSPassword'}
Outputs.PcfServicesSubnetAZ2AvailabilityZone.Value,"{u'Fn::GetAtt': [u'PcfServicesSubnetAZ2', u'AvailabilityZone']}"
Parameters.RDSPassword.AllowedPattern,"(.{8,}|^$)"
Resources.AWS::EC2::EIPAssociation.Type,AWS::EC2::EIPAssociation
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Type,AWS::ElasticLoadBalancing::LoadBalancer
Outputs.PcfIamInstanceProfile.Value,{u'Ref': u'PcfIamInstanceProfile'}
Outputs.PcfOpsManIPAddress.Value,"{u'Fn::GetAtt': [u'PcfOpsManInstance', u'PublicIp']}"
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.Subnets,"[{u'Ref': u'PcfPublicSubnetAZ1'}, {u'Ref': u'PcfPublicSubnetAZ2'}, {u'Ref': u'PcfPublicSubnetAZ3'}]"
Resources.AWS::EC2::SecurityGroupIngress.Properties.FromPort,443
Resources.AWS::EC2::NetworkAclEntry.Properties.RuleAction,allow
Resources.AWS::EC2::Route.Properties.RouteTableId,{u'Ref': u'PcfInternetGatewayRouteTable'}
Resources.AWS::IAM::ManagedPolicy.Properties.PolicyDocument.Statement,"[{u'Action': [u'iam:Add*', u'iam:Attach*', u'iam:ChangePassword', u'iam:Create*', u'iam:DeactivateMFADevice', u'iam:Delete*', u'iam:Detach*', u'iam:EnableMFADevice', u'iam:GenerateCredentialReport', u'iam:GenerateServiceLastAccessedDetails', u'iam:GetAccessKeyLastUsed', u'iam:GetAccountAuthorizationDetails', u'iam:GetAccountPasswordPolicy', u'iam:GetAccountSummary', u'iam:GetContextKeysForCustomPolicy', u'iam:GetContextKeysForPrincipalPolicy', u'iam:GetCredentialReport', u'iam:GetGroup', u'iam:GetGroupPolicy', u'iam:GetLoginProfile', u'iam:GetOpenIDConnectProvider', u'iam:GetPolicy', u'iam:GetPolicyVersion', u'iam:GetRole', u'iam:GetRolePolicy', u'iam:GetSAMLProvider', u'iam:GetSSHPublicKey', u'iam:GetServerCertificate', u'iam:GetServiceLastAccessedDetails', u'iam:GetUser', u'iam:GetUserPolicy', u'iam:List*', u'iam:Put*', u'iam:RemoveClientIDFromOpenIDConnectProvider', u'iam:RemoveRoleFromInstanceProfile', u'iam:RemoveUserFromGroup', u'iam:ResyncMFADevice', u'iam:SetDefaultPolicyVersion', u'iam:SimulateCustomPolicy', u'iam:SimulatePrincipalPolicy', u'iam:Update*'], u'Resource': [u'*'], u'Effect': u'Deny'}, {u'Action': [u'iam:GetInstanceProfile'], u'Resource': [{u'Fn::GetAtt': [u'PcfIamInstanceProfile', u'Arn']}], u'Effect': u'Allow', u'Sid': u'AllowToGetInfoAboutCurrentInstanceProfile'}, {u'Action': [u'iam:PassRole'], u'Resource': [{u'Fn::GetAtt': [u'PcfIamRole', u'Arn']}], u'Effect': u'Allow', u'Sid': u'AllowToCreateInstanceWithCurrentInstanceProfile'}, {u'Action': [u's3:*'], u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'PcfOpsManBucket'}]]}, {u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'PcfOpsManBucket'}, u'/*']]}, {u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'PcfPackagesBucket'}]]}, {u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'PcfPackagesBucket'}, u'/*']]}, {u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'PcfDropletsBucket'}]]}, {u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'PcfDropletsBucket'}, u'/*']]}, {u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'PcfResourcesBucket'}]]}, {u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'PcfResourcesBucket'}, u'/*']]}, {u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'PcfBuildpacksBucket'}]]}, {u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'PcfBuildpacksBucket'}, u'/*']]}], u'Effect': u'Allow', u'Sid': u'OpsManagerS3Permissions'}, {u'Action': [u'ec2:DescribeAccountAttributes', u'ec2:DescribeAddresses', u'ec2:AssociateAddress', u'ec2:DisassociateAddress', u'ec2:DescribeAvailabilityZones', u'ec2:DescribeImages', u'ec2:DescribeInstances', u'ec2:RunInstances', u'ec2:RebootInstances', u'ec2:TerminateInstances', u'ec2:DescribeKeypairs', u'ec2:DescribeRegions', u'ec2:DescribeSnapshots', u'ec2:CreateSnapshot', u'ec2:DeleteSnapshot', u'ec2:DescribeSecurityGroups', u'ec2:DescribeSubnets', u'ec2:DescribeVpcs', u'ec2:CreateTags', u'ec2:DescribeVolumes', u'ec2:CreateVolume', u'ec2:AttachVolume', u'ec2:DeleteVolume', u'ec2:DetachVolume'], u'Resource': [u'*'], u'Effect': u'Allow', u'Sid': u'OpsManagerEc2Permissions'}, {u'Action': [u'elasticloadbalancing:DescribeLoadBalancers', u'elasticloadbalancing:DeregisterInstancesFromLoadBalancer', u'elasticloadbalancing:RegisterInstancesWithLoadBalancer'], u'Resource': [u'*'], u'Effect': u'Allow', u'Sid': u'OpsManagerElbPermissions'}]"
Resources.AWS::EC2::EIPAssociation.Properties.InstanceId,{u'Ref': u'PcfOpsManInstance'}
Resources.AWS::EC2::EIP.Properties.Domain,vpc
Resources.AWS::EC2::Instance.Properties.NetworkInterfaces,"[{u'SubnetId': {u'Ref': u'PcfPublicSubnetAZ1'}, u'DeviceIndex': 0, u'GroupSet': [{u'Ref': u'PcfOpsManSecurityGroup'}], u'DeleteOnTermination': u'true', u'PrivateIpAddresses': [{u'Primary': u'true', u'PrivateIpAddress': u'10.0.0.241'}]}]"
Outputs.PcfRdsDBName.Value,{u'Ref': u'RDSDBName'}
Parameters.EnvironmentID.Description,Default: pcf-env-id
Resources.AWS::RDS::DBInstance.Properties.VPCSecurityGroups,[{u'Ref': u'PcfRdsSecurityGroup'}]
Resources.AWS::EC2::RouteTable.Properties.VpcId,{u'Ref': u'PcfVPC'}
Outputs.PcfManagementSubnetAZ1AvailabilityZone.Value,"{u'Fn::GetAtt': [u'PcfManagementSubnetAZ1', u'AvailabilityZone']}"
Outputs.PcfVpc.Value,{u'Ref': u'PcfVPC'}
Outputs.PcfServicesSubnetAZ2.Value,{u'Ref': u'PcfServicesSubnetAZ2'}
Resources.AWS::EC2::Instance.Properties.SourceDestCheck,false
Outputs.PcfManagementSubnetAZ3.Value,{u'Ref': u'PcfManagementSubnetAZ3'}
Parameters.RDSDBName.AllowedPattern,"([a-zA-Z][a-zA-Z0-9]{3,}|^$)"
Resources.AWS::EC2::VPC.Type,AWS::EC2::VPC
Outputs.PcfElasticRuntimeS3BuildpacksBucket.Value,{u'Ref': u'PcfBuildpacksBucket'}
Resources.AWS::EC2::VPC.Properties.EnableDnsHostnames,true
Outputs.PcfRdsDBName.Condition,CreateRDS
Resources.AWS::EC2::Subnet.Type,AWS::EC2::Subnet
Resources.AWS::IAM::InstanceProfile.Properties.Roles,[{u'Ref': u'PcfIamRole'}]
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.HealthCheck.HealthyThreshold,6
Resources.AWS::EC2::SecurityGroup.Type,AWS::EC2::SecurityGroup
Resources.AWS::IAM::AccessKey.Properties.UserName,{u'Ref': u'PcfIamUser'}
Parameters.AvailabilityZone3.Description,Example: us-west-2c
Resources.AWS::EC2::Route.Properties.DestinationCidrBlock,0.0.0.0/0
Resources.AWS::EC2::Subnet.Properties.VpcId,{u'Ref': u'PcfVPC'}
Resources.AWS::EC2::Instance.Properties.InstanceInitiatedShutdownBehavior,stop
Resources.AWS::EC2::Route.Properties.InstanceId,{u'Ref': u'PcfNatInstance'}
Resources.AWS::EC2::SecurityGroup.Properties.GroupDescription,ELB Security Group
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.Listeners,"[{u'InstancePort': u'2222', u'LoadBalancerPort': u'2222', u'Protocol': u'TCP', u'InstanceProtocol': u'TCP'}]"
Resources.AWS::RDS::DBInstance.Properties.DBInstanceIdentifier,"{u'Fn::Join': [u'', [{u'Ref': u'EnvironmentID'}, u'-rds']]}"
Resources.AWS::RDS::DBSubnetGroup.Properties.DBSubnetGroupDescription,RDS Subnet Group
Resources.AWS::EC2::EIP.Type,AWS::EC2::EIP
Resources.AWS::IAM::AccessKey.DependsOn,PcfIamUser
Resources.AWS::RDS::DBSubnetGroup.Type,AWS::RDS::DBSubnetGroup
Resources.AWS::EC2::Instance.Properties.Monitoring,false
Resources.AWS::EC2::SecurityGroupIngress.Properties.ToPort,443
Resources.AWS::EC2::Route.DependsOn,PcfVpcGatewayAttachment1
Resources.AWS::EC2::Subnet.Properties.AvailabilityZone,{u'Ref': u'AvailabilityZone1'}
Resources.AWS::EC2::SecurityGroupIngress.Properties.IpProtocol,tcp
Parameters.EnvironmentID.Type,String
Resources.AWS::EC2::NetworkAcl.Properties.VpcId,{u'Ref': u'PcfVPC'}
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.ConnectionDrainingPolicy.Timeout,300
Parameters.RDSPassword.Description,"RDS database password (leave blank to skip RDS, must be 8+ chars)"
Outputs.PcfElbSshDnsName.Value,"{u'Fn::GetAtt': [u'PcfElbSsh', u'DNSName']}"
Parameters.RDSDBName.Type,String
Resources.AWS::RDS::DBInstance.Properties.EngineVersion,5.6.35
Resources.AWS::EC2::SecurityGroupEgress.Type,AWS::EC2::SecurityGroupEgress
Parameters.RDSPassword.Type,String
Resources.AWS::S3::Bucket.Type,AWS::S3::Bucket
Resources.AWS::EC2::SubnetRouteTableAssociation.Properties.RouteTableId,{u'Ref': u'PcfNatRouteTableAZ2'}
Resources.AWS::RDS::DBInstance.Properties.Iops,1000
Outputs.PcfRdsUsername.Value,{u'Ref': u'RDSUsername'}
Resources.AWS::RDS::DBInstance.Properties.DBInstanceClass,db.m4.large
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Statement,"[{u'Action': [u'sts:AssumeRole'], u'Effect': u'Allow', u'Principal': {u'Service': [u'ec2.amazonaws.com']}}]"
Resources.AWS::EC2::VPC.Properties.Tags,"[{u'Value': {u'Fn::Join': [u'', [{u'Ref': u'EnvironmentID'}, u'-vpc']]}, u'Key': u'Name'}]"
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.ConnectionSettings.IdleTimeout,3600
Resources.AWS::EC2::Instance.Properties.BlockDeviceMappings,"[{u'DeviceName': u'/dev/xvda', u'Ebs': {u'VolumeSize': u'150', u'VolumeType': u'gp2'}}]"
Outputs.PcfIamUserAccessKey.Value,{u'Ref': u'PcfIamUserAccessKey'}
Parameters.AvailabilityZone3.Type,String
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.CrossZone,true
Resources.AWS::EC2::InternetGateway.Type,AWS::EC2::InternetGateway
Resources.AWS::EC2::NetworkAclEntry.Type,AWS::EC2::NetworkAclEntry
Resources.AWS::EC2::SecurityGroup.Properties.VpcId,{u'Ref': u'PcfVPC'}
Outputs.PcfRdsPort.Value,"{u'Fn::GetAtt': [u'PcfRds', u'Endpoint.Port']}"
Resources.AWS::EC2::SecurityGroupEgress.Properties.GroupId,{u'Ref': u'PcfTcpElbSecurityGroup'}
Outputs.PcfVmsSecurityGroup.Value,{u'Ref': u'PcfVmsSecurityGroup'}
Parameters.OpsManAMI.Description,Exampe: ami-6e799016
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.HealthCheck.Target,TCP:2222
Resources.AWS::RDS::DBInstance.Properties.DBSubnetGroupName,{u'Ref': u'PcfRdsSubnetGroup'}
Resources.AWS::EC2::VPCGatewayAttachment.Properties.VpcId,{u'Ref': u'PcfVPC'}
Outputs.PcfServicesSubnetAZ1.Value,{u'Ref': u'PcfServicesSubnetAZ1'}
Resources.AWS::RDS::DBInstance.Condition,CreateRDS
Resources.AWS::EC2::VPCDHCPOptionsAssociation.Properties.DhcpOptionsId,{u'Ref': u'PcfDHCPOptions'}
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.ConnectionDrainingPolicy.Enabled,false
Resources.AWS::EC2::DHCPOptions.Properties.DomainName,"{u'Fn::Join': [u'', [{u'Ref': u'AWS::Region'}, u'.compute.internal']]}"
Resources.AWS::EC2::EIPAssociation.Properties.AllocationId,"{u'Fn::GetAtt': [u'PcfEipOpsMan', u'AllocationId']}"
Resources.AWS::IAM::ManagedPolicy.Properties.Description,"{u'Fn::Join': [u'', [u'Managed policy for OpsManager and BOSH director in ', {u'Ref': u'AWS::StackName'}]]}"
Outputs.PcfManagementSubnetAZ3AvailabilityZone.Value,"{u'Fn::GetAtt': [u'PcfManagementSubnetAZ3', u'AvailabilityZone']}"
Resources.AWS::EC2::VPC.Properties.InstanceTenancy,default
Resources.AWS::EC2::NetworkAclEntry.Properties.CidrBlock,0.0.0.0/0
Outputs.PcfElasticRuntimeS3ResourcesBucket.Value,{u'Ref': u'PcfResourcesBucket'}
Resources.AWS::EC2::DHCPOptions.Properties.DomainNameServers,[u'AmazonProvidedDNS']
Outputs.PcfOpsManagerS3Bucket.Value,{u'Ref': u'PcfOpsManBucket'}
Resources.AWS::RDS::DBInstance.Properties.AllocatedStorage,100
Resources.AWS::IAM::User.Type,AWS::IAM::User
Outputs.PcfElbSshName.Value,{u'Ref': u'PcfElbSsh'}
Resources.AWS::EC2::EIP.DependsOn,[u'PcfVpcGatewayAttachment1']
Resources.AWS::EC2::VPCGatewayAttachment.Type,AWS::EC2::VPCGatewayAttachment
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.SecurityGroups,[{u'Ref': u'PcfSshElbSecurityGroup'}]
Parameters.OpsManSSHKeyPairName.Description,Select the SSH keypair to use for the Ops Manager VM
Resources.AWS::EC2::Route.Properties.GatewayId,{u'Ref': u'PcfInternetGateway'}
Resources.AWS::EC2::VPC.Properties.CidrBlock,10.0.0.0/16
Resources.AWS::IAM::InstanceProfile.Type,AWS::IAM::InstanceProfile
Resources.AWS::IAM::AccessKey.Type,AWS::IAM::AccessKey
Resources.AWS::IAM::Role.Properties.Policies,[]
Outputs.PcfERTSubnetAZ1AvailabilityZone.Value,"{u'Fn::GetAtt': [u'PcfERTSubnetAZ1', u'AvailabilityZone']}"
Resources.AWS::EC2::SubnetRouteTableAssociation.Type,AWS::EC2::SubnetRouteTableAssociation
Resources.AWS::EC2::Instance.Type,AWS::EC2::Instance
Resources.AWS::EC2::SubnetRouteTableAssociation.Properties.SubnetId,{u'Ref': u'PcfERTSubnetAZ2'}
Resources.AWS::EC2::RouteTable.Type,AWS::EC2::RouteTable
Parameters.AvailabilityZone2.Description,Example: us-west-2b
Resources.AWS::EC2::SecurityGroupIngress.Properties.CidrIp,{u'Ref': u'OpsManIngressCidr'}
Resources.AWS::RDS::DBSubnetGroup.Properties.SubnetIds,"[{u'Ref': u'PcfRDSSubnetAZ1'}, {u'Ref': u'PcfRDSSubnetAZ2'}, {u'Ref': u'PcfRDSSubnetAZ3'}]"
Outputs.PcfRdsPort.Condition,CreateRDS
Resources.AWS::EC2::DHCPOptions.Type,AWS::EC2::DHCPOptions
Resources.AWS::S3::Bucket.Properties.AccessControl,Private
Outputs.PcfElbTcpDnsName.Value,"{u'Fn::GetAtt': [u'PcfElbTcp', u'DNSName']}"
Resources.AWS::RDS::DBInstance.Properties.DBName,{u'Ref': u'RDSDBName'}
Outputs.PcfManagementSubnetAZ2AvailabilityZone.Value,"{u'Fn::GetAtt': [u'PcfManagementSubnetAZ2', u'AvailabilityZone']}"
Outputs.PcfRdsAddress.Value,"{u'Fn::GetAtt': [u'PcfRds', u'Endpoint.Address']}"
Resources.AWS::EC2::Instance.Properties.ImageId,{u'Ref': u'OpsManAMI'}
Parameters.OpsManAMI.Type,String
Parameters.OpsManIngressCidr.Description,Allow ingress traffic to the Ops Manager VM from this CIDR range
Resources.AWS::EC2::SecurityGroup.Properties.Tags,"[{u'Value': {u'Fn::Join': [u'', [{u'Ref': u'EnvironmentID'}, u'-elb-security-group']]}, u'Key': u'Name'}]"
Outputs.PcfElasticRuntimeS3PackagesBucket.Value,{u'Ref': u'PcfPackagesBucket'}
Parameters.ERTCertificateARN.Type,String
Resources.AWS::EC2::Instance.Properties.Tags,"[{u'Value': {u'Fn::Join': [u'', [{u'Ref': u'EnvironmentID'}, u'-ops-manager']]}, u'Key': u'Name'}]"
