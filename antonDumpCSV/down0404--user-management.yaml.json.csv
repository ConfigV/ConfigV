Resources.Custom::ConfigFile.Type,Custom::ConfigFile
Resources.AWS::Lambda::Function.Properties.Description,Updates object on S3 for client-side configuration
Resources.Custom::ConfigFile.Properties.ServiceToken,UpdateConfigFunction.Arn
Resources.Custom::ConfigFile.Properties.Bucket,WebsiteBucket
Resources.AWS::Lambda::Function.Properties.Timeout,120
Resources.AWS::Cognito::UserPool.Properties.UserPoolName,WildRydes
Resources.Custom::ConfigFile.Properties.UserPool,UserPool
Resources.AWS::Cognito::UserPoolClient.Properties.UserPoolId,UserPool
Resources.AWS::Lambda::Function.Properties.Handler,index.handler
Resources.AWS::IAM::Role.Type,AWS::IAM::Role
Resources.AWS::Lambda::Function.Properties.Role,CognitoConfigRole.Arn
Resources.AWS::Lambda::Function.Properties.Code.ZipFile,"import json
import boto3
import cfnresponse

s3 = boto3.resource('s3')

def create(properties, physical_id):
  userPoolId = properties['UserPool']
  clientId = properties['Client']
  region = properties['Region']
  bucket = properties['Bucket']

  object = s3.Object(bucket, 'js/config.js')
  config_content = """"""
var _config = {
    cognito: {
        userPoolId: '%s', // e.g. us-east-2_uXboG5pAb
        userPoolClientId: '%s', // e.g. 25ddkmj4v6hfsfvruhpfi7n4hv
        region: '%s', // e.g. us-east-2
    },
    api: {
        invokeUrl: '', // Base URL of your API including the stage, e.g. 'https://rc7nyt4tql.execute-api.us-west-2.amazonaws.com/prod'
    }
};
    """"""
  config_content = config_content % (userPoolId, clientId, region)
  config = s3.Object(bucket,'js/config.js')
  config.put(Body=config_content)
  return cfnresponse.SUCCESS, None

def update(properties, physical_id):
  return create(properties, physical_id)

def delete(properties, physical_id):
  return cfnresponse.SUCCESS, physical_id

def handler(event, context):
  print ""Received event: %s"" % json.dumps(event)

  status = cfnresponse.FAILED
  new_physical_id = None

  try:
    properties = event.get('ResourceProperties')
    physical_id = event.get('PhysicalResourceId')

    status, new_physical_id = {
      'Create': create,
      'Update': update,
      'Delete': delete
    }.get(event['RequestType'], lambda x, y: (cfnresponse.FAILED, None))(properties, physical_id)
  except Exception as e:
    print ""Exception: %s"" % e
    status = cfnresponse.FAILED
  finally:
    cfnresponse.send(event, context, status, {}, new_physical_id)
"
Metadata.AWS::CloudFormation::Interface.ParameterLabels.WebsiteBucket.default,Website Bucket Name
Resources.Custom::ConfigFile.Properties.Client,UserPoolClient
Resources.AWS::Cognito::UserPoolClient.Properties.ClientName,WildRydesWeb
Resources.Custom::ConfigFile.Properties.Region,AWS::Region
Resources.AWS::IAM::Role.Properties.Path,/wildrydes/
Resources.AWS::Lambda::Function.Type,AWS::Lambda::Function
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Statement,"[{u'Action': u'sts:AssumeRole', u'Effect': u'Allow', u'Principal': {u'Service': u'lambda.amazonaws.com'}}]"
Resources.AWS::Cognito::UserPool.Type,AWS::Cognito::UserPool
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Version,2012-10-17
Parameters.WebsiteBucket.Type,String
Parameters.WebsiteBucket.Description,"The name for the bucket hosting your website, e.g. 'wildrydes-yourname.'"
Resources.AWS::Lambda::Function.Properties.Runtime,python2.7
Resources.AWS::Cognito::UserPoolClient.Type,AWS::Cognito::UserPoolClient
Metadata.AWS::CloudFormation::Interface.ParameterGroups,"[{u'Parameters': [u'WebsiteBucket'], u'Label': {u'default': u'Module 1 Details'}}]"
Resources.AWS::IAM::Role.Properties.Policies,"[{u'PolicyName': u'CognitoConfig', u'PolicyDocument': {u'Version': u'2012-10-17', u'Statement': [{u'Action': [u'logs:CreateLogGroup', u'logs:CreateLogStream', u'logs:PutLogEvents'], u'Resource': u'*', u'Effect': u'Allow', u'Sid': u'Logging'}, {u'Action': [u'cognito-idp:CreateUserPool', u'cognito-idp:DeleteUserPool', u'cognito-idp:CreateUserPoolClient', u'cognito-idp:DeleteUserPoolClient'], u'Resource': u'*', u'Effect': u'Allow', u'Sid': u'Cognito'}, {u'Action': [u's3:PutObject', u's3:PutObjectAcl', u's3:PutObjectVersionAcl'], u'Resource': [u'arn:aws:s3:::${WebsiteBucket}/*'], u'Effect': u'Allow', u'Sid': u'ConfigBucketWriteAccess'}]}}]"
Resources.AWS::Cognito::UserPool.Properties.AutoVerifiedAttributes,[u'email']
Resources.AWS::Cognito::UserPool.Properties.AliasAttributes,[u'email']
Resources.AWS::Cognito::UserPoolClient.Properties.GenerateSecret,False
