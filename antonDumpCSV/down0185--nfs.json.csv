Resources.AWS::EC2::VolumeAttachment.Type,AWS::EC2::VolumeAttachment
Resources.AWS::IAM::InstanceProfile.Properties.Path,/
Outputs.VolumeId.Value,{u'Ref': u'Volume'}
Outputs.Client2PublicName.Value,"{u'Fn::GetAtt': [u'Client2', u'PublicDnsName']}"
Resources.AWS::EC2::SecurityGroup.Properties.GroupDescription,My server security group
Resources.AWS::EC2::Instance.Properties.KeyName,{u'Ref': u'KeyName'}
Parameters.VPC.Type,AWS::EC2::VPC::Id
Outputs.VolumeId.Description,Volume id
Resources.AWS::CloudFormation::WaitCondition.Properties.Timeout,600
Resources.AWS::EC2::Instance.CreationPolicy.ResourceSignal.Timeout,PT10M
Parameters.Subnet.Description,Just select one of the available subnets
Resources.AWS::CloudFormation::WaitConditionHandle.Type,AWS::CloudFormation::WaitConditionHandle
Resources.AWS::EC2::Volume.Type,AWS::EC2::Volume
Resources.AWS::IAM::Role.Properties.Path,/
Outputs.Client2PublicName.Description,Public name (connect via SSH as user ec2-user)
Resources.AWS::EC2::Instance.Properties.IamInstanceProfile,{u'Ref': u'InstanceProfile'}
Resources.AWS::EC2::VolumeAttachment.Properties.InstanceId,{u'Ref': u'Server'}
Outputs.Client1PublicName.Description,Public name (connect via SSH as user ec2-user)
Parameters.KeyName.Type,AWS::EC2::KeyPair::KeyName
Resources.AWS::EC2::Volume.Properties.AvailabilityZone,"{u'Fn::GetAtt': [u'Server', u'AvailabilityZone']}"
Resources.AWS::EC2::Instance.Properties.SecurityGroupIds,"[{u'Ref': u'SecurityGroupCommon'}, {u'Ref': u'SecurityGroupServer'}]"
Mappings.EC2RegionMap.eu-central-1.AmazonLinuxAMIHVMEBSBacked64bit,ami-a8221fb5
Resources.AWS::EC2::Instance.Properties.UserData,"{u'Fn::Base64': {u'Fn::Join': [u'', [u'#!/bin/bash -ex\n', u'export REGION=""', {u'Ref': u'AWS::Region'}, u'""\n', u'curl -s https://s3.amazonaws.com/awsinaction/chapter8/nfs-server-install.sh | bash -ex\n', u""/opt/aws/bin/cfn-signal --success true '"", {u'Ref': u'WaitConditionHandle'}, u""'\n""]]}}"
Resources.AWS::CloudFormation::WaitCondition.Properties.Handle,{u'Ref': u'WaitConditionHandle'}
Resources.AWS::EC2::VolumeAttachment.Properties.VolumeId,{u'Ref': u'Volume'}
Resources.AWS::EC2::Instance.Properties.SubnetId,{u'Ref': u'Subnet'}
Outputs.Client1PublicName.Value,"{u'Fn::GetAtt': [u'Client1', u'PublicDnsName']}"
Resources.AWS::EC2::Volume.Properties.Size,5
Outputs.ServerPublicName.Description,Public name (connect via SSH as user ec2-user)
Resources.AWS::IAM::InstanceProfile.Type,AWS::IAM::InstanceProfile
Resources.AWS::EC2::Instance.Type,AWS::EC2::Instance
Resources.AWS::EC2::Instance.DependsOn,WaitCondition
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Statement,"[{u'Action': [u'sts:AssumeRole'], u'Effect': u'Allow', u'Principal': {u'Service': [u'ec2.amazonaws.com']}}]"
Parameters.KeyName.Default,mykey
Parameters.VPC.Description,Just select the one and only default VPC
Resources.AWS::EC2::SecurityGroup.Properties.SecurityGroupIngress,"[{u'SourceSecurityGroupId': {u'Ref': u'SecurityGroupClient'}, u'FromPort': 111, u'ToPort': 111, u'IpProtocol': u'tcp'}, {u'SourceSecurityGroupId': {u'Ref': u'SecurityGroupClient'}, u'FromPort': 111, u'ToPort': 111, u'IpProtocol': u'udp'}, {u'SourceSecurityGroupId': {u'Ref': u'SecurityGroupClient'}, u'FromPort': 2049, u'ToPort': 2049, u'IpProtocol': u'tcp'}, {u'SourceSecurityGroupId': {u'Ref': u'SecurityGroupClient'}, u'FromPort': 2049, u'ToPort': 2049, u'IpProtocol': u'udp'}]"
Resources.AWS::EC2::VolumeAttachment.Properties.Device,/dev/xvdf
Parameters.Subnet.Type,AWS::EC2::Subnet::Id
Parameters.KeyName.Description,Key Pair name
Resources.AWS::IAM::Role.Type,AWS::IAM::Role
Resources.AWS::CloudFormation::WaitCondition.Type,AWS::CloudFormation::WaitCondition
Resources.AWS::EC2::Volume.Properties.VolumeType,gp2
Resources.AWS::EC2::Instance.Properties.BlockDeviceMappings,"[{u'DeviceName': u'/dev/xvda', u'Ebs': {u'VolumeSize': u'8', u'VolumeType': u'gp2'}}, {u'DeviceName': u'/dev/xvdb', u'VirtualName': u'ephemeral0'}]"
Resources.AWS::EC2::SecurityGroup.Properties.VpcId,{u'Ref': u'VPC'}
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Version,2012-10-17
Resources.AWS::EC2::SecurityGroup.Type,AWS::EC2::SecurityGroup
Resources.AWS::EC2::Instance.Properties.ImageId,"{u'Fn::FindInMap': [u'EC2RegionMap', {u'Ref': u'AWS::Region'}, u'AmazonLinuxAMIHVMEBSBacked64bit']}"
Resources.AWS::IAM::Role.Properties.Policies,"[{u'PolicyName': u'ec2', u'PolicyDocument': {u'Version': u'2012-10-17', u'Statement': [{u'Action': [u'ec2:DescribeVolumes', u'ec2:CreateSnapshot'], u'Resource': [u'*'], u'Effect': u'Allow', u'Sid': u'Stmt1425388787000'}]}}]"
Outputs.ServerPublicName.Value,"{u'Fn::GetAtt': [u'Server', u'PublicDnsName']}"
Resources.AWS::IAM::InstanceProfile.Properties.Roles,[{u'Ref': u'Role'}]
Resources.AWS::CloudFormation::WaitCondition.Properties.Count,1
