Outputs.LambdaRoleArn.Value,"{u'Fn::GetAtt': [u'LambdaRole', u'Arn']}"
Resources.AWS::ApiGateway::Method.Properties.Integration.Uri,"{u'Fn::Join': [u'', [u'arn:aws:apigateway:', {u'Ref': u'AWS::Region'}, u':lambda:path/2015-03-31/functions/', {u'Fn::GetAtt': [u'QueueCommentLambdaFunction', u'Arn']}, u'/invocations']]}"
Resources.AWS::IAM::Policy.Properties.Roles,[{u'Ref': u'LambdaRole'}]
Resources.AWS::Lambda::EventSourceMapping.DependsOn,"[u'JobStreamDynamoDBTable', u'LambdaCommentsCombinedPolicy', u'LambdaRoleInstanceProfile', u'LambdaRole']"
Resources.AWS::Lambda::Function.Properties.Runtime,nodejs
Resources.AWS::Lambda::Permission.Properties.Action,lambda:InvokeFunction
Resources.AWS::IAM::Role.Properties.Path,/
Resources.AWS::ApiGateway::Resource.Type,AWS::ApiGateway::Resource
Resources.AWS::ApiGateway::Deployment.Properties.RestApiId,{u'Ref': u'RestApi'}
Resources.AWS::Lambda::Function.Properties.Description,QueueComment
Resources.AWS::Lambda::Permission.Properties.FunctionName,"{u'Fn::GetAtt': [u'QueueCommentLambdaFunction', u'Arn']}"
Parameters.Origin.Type,String
Parameters.TagName.Description,Tag for resources
Parameters.NewResources.AllowedValues,"[u'true', u'false']"
Resources.AWS::IAM::Policy.Type,AWS::IAM::Policy
Resources.AWS::Lambda::Permission.Properties.Principal,apigateway.amazonaws.com
Resources.AWS::ApiGateway::Deployment.DependsOn,"[u'RestApi', u'CommentsApiResource', u'PostCommentApiMethod', u'OptionsCommentApiMethod']"
Resources.AWS::Lambda::Function.Properties.Timeout,30
Resources.AWS::Lambda::EventSourceMapping.Properties.Enabled,True
Resources.AWS::ApiGateway::Resource.Properties.ParentId,"{u'Fn::GetAtt': [u'RestApi', u'RootResourceId']}"
Resources.AWS::IAM::Policy.Properties.PolicyDocument.Statement,"[{u'Action': [u'logs:CreateLogGroup', u'logs:CreateLogStream', u'logs:PutLogEvents'], u'Resource': u'arn:aws:logs:*:*:*', u'Effect': u'Allow'}, {u'Action': u's3:*', u'Resource': {u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'WebsiteS3'}, u'/*']]}, u'Effect': u'Allow'}, {u'Action': u's3:*', u'Resource': {u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'PrivateS3'}, u'/*']]}, u'Effect': u'Allow'}, {u'Action': u'dynamodb:*', u'Resource': {u'Fn::Join': [u'', [u'arn:aws:dynamodb:', {u'Ref': u'AWS::Region'}, u':', {u'Ref': u'AWS::AccountId'}, u':table/', {u'Ref': u'JobStreamDynamoDBTable'}]]}, u'Effect': u'Allow'}, {u'Action': [u'dynamodb:GetRecords', u'dynamodb:GetShardIterator', u'dynamodb:DescribeStream', u'dynamodb:ListStreams'], u'Resource': {u'Fn::GetAtt': [u'JobStreamDynamoDBTable', u'StreamArn']}, u'Effect': u'Allow'}]"
Resources.AWS::Lambda::EventSourceMapping.Properties.FunctionName,{u'Ref': u'WorkerLambdaFunction'}
Resources.AWS::DynamoDB::Table.Properties.KeySchema,"[{u'KeyType': u'HASH', u'AttributeName': u'id'}]"
Outputs.LambdaRoleArn.Description,ARN for LambdaRole
Resources.AWS::ApiGateway::Deployment.Properties.StageName,prod
Resources.AWS::S3::Bucket.Properties.WebsiteConfiguration.IndexDocument,index.html
Resources.AWS::IAM::Role.Type,AWS::IAM::Role
Resources.AWS::IAM::InstanceProfile.Properties.Path,/
Resources.AWS::Lambda::Function.Properties.Code.ZipFile,"exports.handler = function(event, context) { context.fail('Not Implemented'); };"
Resources.AWS::Lambda::EventSourceMapping.Type,AWS::Lambda::EventSourceMapping
Resources.AWS::ApiGateway::Deployment.Properties.Description,Production deployment
Resources.AWS::ApiGateway::Method.Properties.Integration.IntegrationResponses,"[{u'ResponseParameters': {u'method.response.header.Access-Control-Allow-Origin': {u'Fn::Join': [u'', [u""'"", {u'Ref': u'Origin'}, u""'""]]}}, u'StatusCode': u'201'}, {u'ResponseParameters': {u'method.response.header.Access-Control-Allow-Origin': {u'Fn::Join': [u'', [u""'"", {u'Ref': u'Origin'}, u""'""]]}}, u'SelectionPattern': u'.*Error.*', u'StatusCode': u'400'}]"
Resources.AWS::Lambda::Function.Properties.Handler,lib/index.handler
Parameters.NewResources.Default,false
Resources.AWS::ApiGateway::Resource.Properties.RestApiId,{u'Ref': u'RestApi'}
Resources.AWS::DynamoDB::Table.Properties.StreamSpecification.StreamViewType,NEW_IMAGE
Resources.AWS::Lambda::EventSourceMapping.Properties.StartingPosition,LATEST
Resources.AWS::DynamoDB::Table.Properties.ProvisionedThroughput.WriteCapacityUnits,1
Parameters.NewResources.Description,Include new resources (still being developed)
Resources.AWS::ApiGateway::Method.Properties.RestApiId,{u'Ref': u'RestApi'}
Resources.AWS::DynamoDB::Table.Properties.AttributeDefinitions,"[{u'AttributeName': u'id', u'AttributeType': u'S'}]"
Resources.AWS::ApiGateway::Method.Properties.HttpMethod,POST
Resources.AWS::ApiGateway::Method.Properties.Integration.IntegrationHttpMethod,POST
Resources.AWS::IAM::InstanceProfile.Type,AWS::IAM::InstanceProfile
Resources.AWS::DynamoDB::Table.Type,AWS::DynamoDB::Table
Resources.AWS::Lambda::Function.Properties.MemorySize,128
Resources.AWS::S3::Bucket.Type,AWS::S3::Bucket
Parameters.NewResources.Type,String
Resources.AWS::S3::BucketPolicy.Type,AWS::S3::BucketPolicy
Resources.AWS::Lambda::Function.Type,AWS::Lambda::Function
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Statement,"[{u'Action': [u'sts:AssumeRole'], u'Effect': u'Allow', u'Principal': {u'Service': [u'lambda.amazonaws.com']}}]"
Resources.AWS::Lambda::Permission.Type,AWS::Lambda::Permission
Resources.AWS::ApiGateway::RestApi.Properties.Name,"{u'Fn::Join': [u'', [u'Comments-', {u'Ref': u'AWS::StackName'}]]}"
Resources.AWS::Lambda::Permission.Properties.SourceArn,"{u'Fn::Join': [u'', [u'arn:aws:execute-api:', {u'Ref': u'AWS::Region'}, u':', {u'Ref': u'AWS::AccountId'}, u':', {u'Ref': u'RestApi'}, u'/*/POST/comments']]}"
Resources.AWS::S3::BucketPolicy.Properties.PolicyDocument.Statement,"[{u'Action': [u's3:*'], u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'PrivateS3'}, u'/*']]}], u'Effect': u'Allow', u'Principal': {u'AWS': {u'Fn::GetAtt': [u'LambdaRole', u'Arn']}}}]"
Resources.AWS::S3::Bucket.Properties.CorsConfiguration.CorsRules,"[{u'AllowedHeaders': [u'Authorization'], u'AllowedMethods': [u'GET'], u'MaxAge': 3000, u'AllowedOrigins': [{u'Ref': u'Origin'}]}]"
Parameters.TagName.Type,String
Resources.AWS::IAM::Policy.Properties.PolicyName,LambdaCommentsCombined
Resources.AWS::Lambda::Function.Properties.Role,"{u'Fn::GetAtt': [u'LambdaRole', u'Arn']}"
Resources.AWS::ApiGateway::Resource.Properties.PathPart,comments
Parameters.Origin.Description,Origin URL for CORS
Resources.AWS::ApiGateway::Deployment.Type,AWS::ApiGateway::Deployment
Resources.AWS::ApiGateway::Method.Properties.ResourceId,{u'Ref': u'CommentsApiResource'}
Resources.AWS::ApiGateway::Method.Properties.MethodResponses,"[{u'ResponseParameters': {u'method.response.header.Access-Control-Allow-Origin': True}, u'StatusCode': u'201'}, {u'ResponseParameters': {u'method.response.header.Access-Control-Allow-Origin': True}, u'StatusCode': u'400'}]"
Resources.AWS::ApiGateway::RestApi.Properties.Description,API for blog comments
Resources.AWS::ApiGateway::Method.Properties.Integration.Type,AWS
Resources.AWS::ApiGateway::Method.Properties.Integration.RequestTemplates.application/json,"{ ""sourceIp"": ""$context.identity.sourceIp"", ""fields"": $input.json('$') }"
Resources.AWS::Lambda::EventSourceMapping.Properties.EventSourceArn,"{u'Fn::GetAtt': [u'JobStreamDynamoDBTable', u'StreamArn']}"
Resources.AWS::ApiGateway::RestApi.Type,AWS::ApiGateway::RestApi
Resources.AWS::ApiGateway::Method.Type,AWS::ApiGateway::Method
Resources.AWS::Lambda::EventSourceMapping.Properties.BatchSize,20
Resources.AWS::DynamoDB::Table.Properties.ProvisionedThroughput.ReadCapacityUnits,1
Resources.AWS::S3::BucketPolicy.Properties.Bucket,{u'Ref': u'PrivateS3'}
Resources.AWS::ApiGateway::Method.Properties.AuthorizationType,NONE
Resources.AWS::IAM::InstanceProfile.Properties.Roles,[{u'Ref': u'LambdaRole'}]
