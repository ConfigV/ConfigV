Resources.AWS::Events::Rule.Properties.EventPattern.source,[u'aws.trustedadvisor']
Resources.AWS::Lambda::Function.Properties.Description,Stop EC2 instances that have a specific tag in response to Trused Advisor
Resources.AWS::Lambda::Permission.Properties.FunctionName,"{u'Fn::GetAtt': [u'LambdaFunction', u'Arn']}"
Resources.AWS::Lambda::Permission.Properties.Principal,events.amazonaws.com
Resources.AWS::Lambda::Permission.Properties.Action,lambda:InvokeFunction
Resources.AWS::Lambda::Function.Properties.Timeout,60
Resources.AWS::Events::Rule.Properties.EventPattern.detail-type,[u'Trusted Advisor Check Item Refresh Notification']
Resources.AWS::IAM::Role.Properties.Path,/
Resources.AWS::Lambda::Permission.Type,AWS::Lambda::Permission
Resources.AWS::IAM::Role.Type,AWS::IAM::Role
Resources.AWS::Events::Rule.Properties.EventPattern.detail.status,[u'WARN']
Resources.AWS::Lambda::Function.Properties.Code.ZipFile,"{u'Fn::Join': [u'\n', [u'// Sample Lambda Function to get Trusted Advisor Low Utilization Amazon EC2 Instances check details from Cloudwatch events and execute the EC2 stop instance recommendation', u""var AWS = require('aws-sdk');"", u'', u'// define configuration', u""const tagKey ='environment';"", u""const tagValue ='dev';"", u""const dryRun ='true'; //set to false during testing "", u""const regionSpecification = 'eu-west-1'; //Specify a region to restrict the EC2 Stop Instances action to. Use 'all' for all regions"", u'', u'//main function which gets Trusted Advisor data from Cloudwatch event', u'exports.handler = (event, context, callback) => {', u'    //extract details from Cloudwatch event', u""    checkName = event.detail['check-name'];"", u""    instanceId = event.detail['check-item-detail']['Instance ID'];"", u""    region = event.detail['check-item-detail']['Region/AZ'].slice(0, -1);"", u'    const trustedAdvisorSuccessMessage = `Successfully got details from Trusted Advisor check, ${checkName} and executed automated action.`;', u'    //check if the EC2 instance is in the right region', u""    if (region == regionSpecification || regionSpecification == 'all') { stopInstances(instanceId, region); }"", u""    else { console.log ('No EC2 instance found in specifed region'); }"", u'    callback(null, trustedAdvisorSuccessMessage); //return success', u'};', u'', u'//Sample function which stops EC2 Instances after checking their tags', u'function stopInstances (instanceId, region) {', u'    AWS.config.update({region: region});', u'    var ec2 = new AWS.EC2();', u'    //get tags for the instances highlighted by Trusted Advisor', u'    var describeTagsparams = {', u'        Filters: [', u'        {', u""            Name: 'resource-id',"", u'            Values: [instanceId]', u'        },', u'        {', u""            Name: 'key',"", u'            Values: [tagKey]', u'        }', u'        ]', u'    };', u'    ec2.describeTags(describeTagsparams, function(err, data) {', u'        if (err) console.log(err, err.stack); // an error occurred', u'        else {', u""            if (data.Tags == '') {data = {Tags: [{value: 'empty'}]} };"", u""            //if the tag value matches what's configured, then stop the instance"", u'            if (data.Tags[0].Value == tagValue)', u'            {', u'                var stopInstancesParams = {', u'                    InstanceIds: [instanceId],', u'                    DryRun: dryRun //set to true for testing', u'                };', u'                ec2.stopInstances(stopInstancesParams, function(err, data) {', u'                    if (err) console.log(instanceId, region, err, err.stack); // an error occurred', u""                    else console.log('Instance stopped: ', instanceId, region);           // successful response"", u'                });', u'            }', u""            else console.log ('Instance did not match tag: ', instanceId, region);"", u'        }', u'    });', u'}', u'']]}"
Resources.AWS::Events::Rule.Properties.State,ENABLED
Resources.AWS::Lambda::Function.Properties.Handler,index.handler
Resources.AWS::Events::Rule.Properties.Targets,"[{u'Id': u'StopTAEC2Instances', u'Arn': {u'Fn::GetAtt': [u'LambdaFunction', u'Arn']}}]"
Resources.AWS::IAM::Role.Properties.Policies,"[{u'PolicyName': u'TAEC2InstanceStop', u'PolicyDocument': {u'Version': u'2012-10-17', u'Statement': [{u'Action': [u'logs:CreateLogGroup', u'logs:CreateLogStream', u'logs:PutLogEvents'], u'Resource': [u'arn:aws:logs:*:*:*'], u'Effect': u'Allow', u'Sid': u'LambdaLogging'}, {u'Action': [u'ec2:StopInstances', u'ec2:DescribeTags'], u'Resource': u'*', u'Effect': u'Allow', u'Sid': u'Ec2Actions'}]}}]"
Resources.AWS::Lambda::Function.Type,AWS::Lambda::Function
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Statement,"[{u'Action': u'sts:AssumeRole', u'Effect': u'Allow', u'Principal': {u'Service': u'lambda.amazonaws.com'}}]"
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Version,2012-10-17
Resources.AWS::Lambda::Function.Properties.Runtime,nodejs6.10
Resources.AWS::Events::Rule.Type,AWS::Events::Rule
Resources.AWS::Events::Rule.Properties.EventPattern.detail.check-name,[u'Low Utilization Amazon EC2 Instances']
Resources.AWS::Lambda::Function.Properties.Role,"{u'Fn::GetAtt': [u'LambdaIAMRole', u'Arn']}"
Resources.AWS::Lambda::Permission.Properties.SourceArn,"{u'Fn::GetAtt': [u'CloudWatchEventRule', u'Arn']}"
Resources.AWS::Events::Rule.Properties.Description,Low Utilization Amazon EC2 Instances
