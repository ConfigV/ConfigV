Parameters.PrivateSubnet2Cidr.AllowedPattern,"(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})"
Parameters.PrivateSubnet3Cidr.ConstraintDescription,Must be a valid subnet CIDR.
Parameters.DomainName.Description,A custom domain for private DNS names. Must also specify Name Servers.
Resources.AWS::EC2::Route.Type,AWS::EC2::Route
Outputs.PrivateSubnet1AZ.Description,The AZ of the first private subnet.
Outputs.PrivateSubnet1AZ.Export.Name,${AWS::StackName}:private-subnet-1-az
Parameters.VPCCidr.Type,String
Parameters.VPCCidr.ConstraintDescription,Must be an IP CIDR range in the form of 10.x.x.x/x.
Parameters.PublicSubnet3Cidr.Type,String
Parameters.NTPServers.Type,String
Metadata.AWS::CloudFormation::Interface.ParameterLabels.NameServers.default,Name servers
Resources.AWS::EC2::VPCEndpoint.Properties.ServiceName,com.amazonaws.${AWS::Region}.s3
Resources.AWS::EC2::NetworkAclEntry.Properties.RuleNumber,110
Parameters.PrivateSubnet2Cidr.Description,IPv4 CIDR for the second private subnet. Must be part of the VPC CIDR.
Outputs.PublicSubnet2.Export.Name,${AWS::StackName}:public-subnet-2
Metadata.AWS::CloudFormation::Interface.ParameterLabels.DynamoDBEndpoint.default,Create DynamoDB endpoint
Resources.AWS::EC2::RouteTable.Properties.VpcId,VPC
Resources.AWS::EC2::VPCDHCPOptionsAssociation.Type,AWS::EC2::VPCDHCPOptionsAssociation
Outputs.PublicSubnet3AZ.Value,PublicSubnet3.AvailabilityZone
Resources.AWS::EC2::NetworkAclEntry.Properties.Egress,True
Resources.AWS::EC2::NatGateway.Properties.Tags,"[{u'Value': u'${AWS::StackName}-nat-gateway-public-3', u'Key': u'Name'}]"
Resources.AWS::EC2::VPCDHCPOptionsAssociation.Properties.VpcId,VPC
Parameters.PublicSubnet1Cidr.Description,IPv4 CIDR for the first public subnet. Must be part of the VPC CIDR.
Parameters.EnableDnsSupport.Description,Enables the Amazon provided DNS server.
Metadata.AWS::CloudFormation::Interface.ParameterLabels.PrivateSubnet2Cidr.default,Private subnet 2
Resources.AWS::EC2::InternetGateway.Type,AWS::EC2::InternetGateway
Parameters.EnableDnsSupport.AllowedValues,"[u'Yes', u'No']"
Resources.AWS::EC2::Route.Properties.DestinationCidrBlock,0.0.0.0/0
Resources.AWS::EC2::Subnet.Properties.VpcId,VPC
Resources.AWS::EC2::Route.Properties.NatGatewayId,PublicSubnet3NAT
Outputs.PublicSubnet3.Value,PublicSubnet3
Parameters.PrivateSubnet1Cidr.Description,IPv4 CIDR for the first private subnet. Must be part of the VPC CIDR.
Parameters.PrivateSubnet3Cidr.Type,String
Resources.AWS::EC2::SubnetNetworkAclAssociation.Properties.SubnetId,PublicSubnet1
Outputs.PublicNACL.Description,The NACL for the public subnets.
Parameters.VPCCidr.Description,The IPv4 CIDR for the VPC. Must be part of the 10.0.0.0/8 CIDR.
Parameters.PrivateSubnet3Cidr.Description,IPv4 CIDR for the third private subnet. Must be part of the VPC CIDR.
Parameters.PrivateZoneEgress.Default,Yes
Parameters.EnableDnsHostnames.Description,Assign Amazon provided DNS names to instances.
Metadata.AWS::CloudFormation::Interface.ParameterLabels.PublicSubnet2Cidr.default,Pubic subnet 2
Parameters.PublicSubnet1Cidr.AllowedPattern,"10\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})"
Resources.AWS::EC2::NetworkAcl.Type,AWS::EC2::NetworkAcl
Metadata.AWS::CloudFormation::Interface.ParameterLabels.VPCCidr.default,VPC CIDR
Metadata.AWS::CloudFormation::Interface.ParameterLabels.EnableDnsSupport.default,Enable DNS support
Outputs.PrivateSubnet3AZ.Value,PrivateSubnet3.AvailabilityZone
Parameters.PublicSubnet1Cidr.Default,10.0.192.0/20
Outputs.PrivateNACL.Export.Name,${AWS::StackName}:private-nacl
Resources.AWS::EC2::VPC.Properties.EnableDnsSupport,"[u'EnableDNS', True, False]"
Parameters.PublicSubnet2Cidr.AllowedPattern,"10\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})"
Resources.AWS::EC2::NetworkAclEntry.Properties.Icmp.Type,-1
Outputs.PrivateSubnet3.Export.Name,${AWS::StackName}:private-subnet-3
Parameters.PublicSubnet2Cidr.Default,10.0.208.0/20
Resources.AWS::EC2::SubnetNetworkAclAssociation.Type,AWS::EC2::SubnetNetworkAclAssociation
Parameters.PrivateZoneEgress.Description,Allow HTTP and HTTPS requests to the internet from the private subnets.
Outputs.VPCCIDR.Description,The IPv4 CIDR of the VPC.
Resources.AWS::EC2::NetworkAclEntry.Properties.NetworkAclId,PrivateNetworkAcl
Metadata.AWS::CloudFormation::Interface.ParameterLabels.PrivateSubnet3Cidr.default,Private subnet 3
Resources.AWS::EC2::NetworkAclEntry.Properties.Protocol,6
Resources.AWS::EC2::RouteTable.Properties.Tags,"[{u'Value': u'${AWS::StackName}-route-table-public', u'Key': u'Name'}]"
Resources.AWS::EC2::Route.Properties.RouteTableId,PrivateRouteTable3
Metadata.AWS::CloudFormation::Interface.ParameterLabels.PrivateSubnet1Cidr.default,Private subnet 1
Parameters.EnableDnsHostnames.AllowedValues,"[u'Yes', u'No']"
Resources.AWS::EC2::Subnet.Properties.CidrBlock,PublicSubnet2Cidr
Metadata.AWS::CloudFormation::Interface.ParameterLabels.EnableDnsHostnames.default,Enable DNS host names
Resources.AWS::EC2::Subnet.Properties.Tags,"[{u'Value': u'${AWS::StackName}-public-subnet-2', u'Key': u'Name'}, {u'Value': u'public', u'Key': u'network-type'}]"
Resources.AWS::EC2::NatGateway.Properties.SubnetId,PublicSubnet3
Parameters.DynamoDBEndpoint.Default,Yes
Resources.AWS::EC2::DHCPOptions.Properties.DomainName,"[u'HasDomainName', u'DomainName', [u'IsUsEast1', u'ec2.internal', u'compute.internal']]"
Parameters.PrivateSubnet1Cidr.Default,10.0.0.0/18
Outputs.PrivateSubnet2.Export.Name,${AWS::StackName}:private-subnet-2
Outputs.PrivateSubnet3AZ.Export.Name,${AWS::StackName}:private-subnet-3-az
Resources.AWS::EC2::NatGateway.Properties.AllocationId,EIPPublicSubnet3NAT.AllocationId
Outputs.PublicSubnet3AZ.Description,The AZ of the third public subnet.
Parameters.PrivateZoneEgress.AllowedValues,"[u'Yes', u'No']"
Metadata.AWS::CloudFormation::Interface.ParameterLabels.PublicSubnet1Cidr.default,Pubic subnet 1
Resources.AWS::EC2::SubnetNetworkAclAssociation.Properties.NetworkAclId,PublicNetworkAcl
Resources.AWS::EC2::VPCEndpoint.Properties.VpcId,VPC
Outputs.PublicSubnet3.Export.Name,${AWS::StackName}:public-subnet-3
Resources.AWS::EC2::VPCGatewayAttachment.Properties.InternetGatewayId,InternetGateway
Outputs.PrivateSubnet3AZ.Description,The AZ of the third private subnet.
Parameters.VPCCidr.Default,10.0.0.0/16
Metadata.AWS::CloudFormation::Interface.ParameterGroups,"[{u'Parameters': [u'VPCCidr', u'AutoAssignPublicAddress', u'S3Endpoint', u'DynamoDBEndpoint'], u'Label': {u'default': u'VPC Information'}}, {u'Parameters': [u'EnableDnsSupport', u'EnableDnsHostnames'], u'Label': {u'default': u'Amazon Provided DNS'}}, {u'Parameters': [u'DomainName', u'NameServers'], u'Label': {u'default': u'Custom DNS (will disable Amazon Provided DNS)'}}, {u'Parameters': [u'NTPServers'], u'Label': {u'default': u'Other DHCP Options'}}, {u'Parameters': [u'PublicSubnet1Cidr', u'PublicSubnet2Cidr', u'PublicSubnet3Cidr'], u'Label': {u'default': u'Public Subnets'}}, {u'Parameters': [u'PrivateSubnet1Cidr', u'PrivateSubnet2Cidr', u'PrivateSubnet3Cidr', u'PrivateZoneEgress'], u'Label': {u'default': u'Private Subnets'}}]"
Outputs.PublicNACL.Export.Name,${AWS::StackName}:public-nacl
Parameters.PrivateSubnet2Cidr.Default,10.0.64.0/18
Metadata.AWS::CloudFormation::Interface.ParameterLabels.PublicSubnet3Cidr.default,Pubic subnet 3
Outputs.VPCCIDR.Export.Name,${AWS::StackName}:vpc-cidr
Resources.AWS::EC2::VPCEndpoint.Type,AWS::EC2::VPCEndpoint
Parameters.S3Endpoint.Type,String
Parameters.PublicSubnet3Cidr.AllowedPattern,"10\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})"
Parameters.PublicSubnet3Cidr.ConstraintDescription,Must be a valid subnet CIDR.
Parameters.EnableDnsHostnames.Type,String
Metadata.AWS::CloudFormation::Interface.ParameterLabels.S3Endpoint.default,Create S3 endpoint
Parameters.DynamoDBEndpoint.AllowedValues,"[u'Yes', u'No']"
Parameters.PublicSubnet3Cidr.Default,10.0.224.0/20
Resources.AWS::EC2::NetworkAclEntry.Properties.RuleAction,allow
Parameters.NameServers.Type,String
Parameters.PrivateSubnet1Cidr.AllowedPattern,"10\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})"
Resources.AWS::EC2::Route.DependsOn,AttachInternetGateway
Outputs.PrivateSubnet1.Value,PrivateSubnet1
Outputs.PrivateSubnet3.Value,PrivateSubnet3
Parameters.PrivateSubnet3Cidr.Default,10.0.128.0/18
Outputs.PublicSubnet2.Value,PublicSubnet2
Resources.AWS::EC2::NatGateway.Condition,HasPrivateZoneEgress
Parameters.PublicSubnet2Cidr.Description,IPv4 CIDR for the second public subnet. Must be part of the VPC CIDR.
Resources.AWS::EC2::DHCPOptions.Properties.NtpServers,"[u'HasNTPServers', [u',', u'NTPServers'], u'AWS::NoValue']"
Resources.AWS::EC2::VPCEndpoint.Condition,HasS3Endpoint
Resources.AWS::EC2::VPC.Properties.CidrBlock,VPCCidr
Resources.AWS::EC2::Subnet.Type,AWS::EC2::Subnet
Parameters.EnableDnsSupport.Type,String
Parameters.AutoAssignPublicAddress.Default,Yes
Metadata.AWS::CloudFormation::Interface.ParameterLabels.PrivateZoneEgress.default,Internet access
Outputs.PublicNACL.Value,PublicNetworkAcl
Outputs.VPC.Export.Name,${AWS::StackName}:vpc
Resources.AWS::EC2::NatGateway.Type,AWS::EC2::NatGateway
Metadata.AWS::CloudFormation::Interface.ParameterLabels.DomainName.default,Domain name
Outputs.PublicSubnet1AZ.Value,PublicSubnet1.AvailabilityZone
Outputs.PrivateSubnet1.Export.Name,${AWS::StackName}:private-subnet-1
Parameters.PrivateSubnet1Cidr.ConstraintDescription,Must be a valid subnet CIDR.
Resources.AWS::EC2::VPC.Properties.EnableDnsHostnames,"[u'EnableHostnames', True, False]"
Parameters.PublicSubnet2Cidr.Type,String
Parameters.S3Endpoint.AllowedValues,"[u'Yes', u'No']"
Outputs.PrivateSubnet3.Description,The ID of the third private subnet.
Resources.AWS::EC2::EIP.Type,AWS::EC2::EIP
Parameters.NameServers.Description,Up to four IP addresses separated by commas.
Outputs.PrivateSubnet2.Value,PrivateSubnet2
Resources.AWS::EC2::Subnet.Properties.AvailabilityZone,"[1, {u'Fn::GetAZs': u'AWS::Region'}]"
Outputs.PrivateNACL.Value,PrivateNetworkAcl
Resources.AWS::EC2::NetworkAcl.Properties.VpcId,VPC
Parameters.S3Endpoint.Default,Yes
Resources.AWS::EC2::NetworkAclEntry.Properties.PortRange.From,443
Resources.AWS::EC2::EIP.Properties.Domain,vpc
Outputs.PrivateSubnet2AZ.Export.Name,${AWS::StackName}:private-subnet-2-az
Parameters.S3Endpoint.Description,Creates an S3 endpoint and adds it to the route tables for the public and private zones.
Resources.AWS::EC2::VPCEndpoint.Properties.RouteTableIds,"[u'PublicRouteTable', u'PrivateRouteTable1', u'PrivateRouteTable2', u'PrivateRouteTable3']"
Parameters.AutoAssignPublicAddress.Type,String
Resources.AWS::EC2::SubnetRouteTableAssociation.Properties.RouteTableId,PrivateRouteTable3
Parameters.EnableDnsSupport.Default,Yes
Parameters.PrivateSubnet2Cidr.ConstraintDescription,Must be a valid subnet CIDR.
Resources.AWS::EC2::InternetGateway.Properties.Tags,"[{u'Value': u'${AWS::StackName}-internet-gateway', u'Key': u'Name'}]"
Resources.AWS::EC2::VPC.Properties.Tags,"[{u'Value': u'AWS::StackName', u'Key': u'Name'}]"
Parameters.DynamoDBEndpoint.Type,String
Parameters.DynamoDBEndpoint.Description,Creates a DynamoDB endpoint and adds it to the route tables for the public and private zones.
Outputs.PublicSubnet2AZ.Export.Name,${AWS::StackName}:public-subnet-2-az
Outputs.PrivateSubnet1.Description,The ID of the first private subnet.
Outputs.PrivateSubnet2AZ.Value,PrivateSubnet2.AvailabilityZone
Parameters.DomainName.Type,String
Resources.AWS::EC2::NetworkAclEntry.Type,AWS::EC2::NetworkAclEntry
Parameters.PrivateSubnet3Cidr.AllowedPattern,"10\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})"
Outputs.VPCCIDR.Value,VPC.CidrBlock
Parameters.VPCCidr.AllowedPattern,"10\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})"
Resources.AWS::EC2::NatGateway.DependsOn,AttachInternetGateway
Parameters.NTPServers.Description,Up to four IP addresses separated by commas. Leave empty to use AWS NTP servers.
Outputs.PublicSubnet1AZ.Export.Name,${AWS::StackName}:public-subnet-1-az
Resources.AWS::EC2::Route.Condition,HasPrivateZoneEgress
Resources.AWS::EC2::VPCGatewayAttachment.Properties.VpcId,VPC
Parameters.PrivateSubnet1Cidr.Type,String
Resources.AWS::EC2::VPCDHCPOptionsAssociation.Properties.DhcpOptionsId,DHCPOptionsSet
Metadata.AWS::CloudFormation::Interface.ParameterLabels.NTPServers.default,NTP servers
Parameters.PublicSubnet1Cidr.Type,String
Outputs.PrivateSubnet1AZ.Value,PrivateSubnet1.AvailabilityZone
Resources.AWS::EC2::EIP.Condition,HasPrivateZoneEgress
Resources.AWS::EC2::VPC.Properties.InstanceTenancy,default
Resources.AWS::EC2::NetworkAclEntry.Properties.CidrBlock,10.0.0.0/8
Outputs.PublicSubnet3.Description,The ID of the third public subnet.
Resources.AWS::EC2::DHCPOptions.Properties.DomainNameServers,"[u'HasNameServers', [u',', u'NameServers'], [u'AmazonProvidedDNS']]"
Parameters.EnableDnsHostnames.Default,Yes
Resources.AWS::EC2::DHCPOptions.Properties.Tags,"[{u'Value': u'${AWS::StackName}-dhcp-options-set', u'Key': u'Name'}]"
Outputs.PrivateSubnet2.Description,The ID of the second private subnet.
Parameters.PublicSubnet2Cidr.ConstraintDescription,Must be a valid subnet CIDR.
Resources.AWS::EC2::VPCGatewayAttachment.Type,AWS::EC2::VPCGatewayAttachment
Parameters.AutoAssignPublicAddress.Description,Assigns public IP addresses to instances in the public subnets.
Parameters.PrivateSubnet2Cidr.Type,String
Resources.AWS::EC2::Route.Properties.GatewayId,InternetGateway
Resources.AWS::EC2::VPC.Type,AWS::EC2::VPC
Resources.AWS::EC2::NetworkAcl.Properties.Tags,"[{u'Value': u'${AWS::StackName}-public-nacl', u'Key': u'Name'}]"
Resources.AWS::EC2::SubnetRouteTableAssociation.Type,AWS::EC2::SubnetRouteTableAssociation
Outputs.PrivateSubnet2AZ.Description,The AZ of the second private subnet.
Outputs.PublicSubnet2AZ.Value,PublicSubnet2.AvailabilityZone
Resources.AWS::EC2::SubnetRouteTableAssociation.Properties.SubnetId,PrivateSubnet3
Resources.AWS::EC2::RouteTable.Type,AWS::EC2::RouteTable
Resources.AWS::EC2::Subnet.Properties.MapPublicIpOnLaunch,"[u'AutoAssignPublicIP', True, False]"
Outputs.PrivateNACL.Description,The NACL for the private subnets.
Metadata.AWS::CloudFormation::Interface.ParameterLabels.AutoAssignPublicAddress.default,Auto-assign public IP
Outputs.PublicSubnet1.Value,PublicSubnet1
Parameters.PublicSubnet1Cidr.ConstraintDescription,Must be a valid subnet CIDR.
Outputs.PublicSubnet1.Export.Name,${AWS::StackName}:public-subnet-1
Resources.AWS::EC2::DHCPOptions.Type,AWS::EC2::DHCPOptions
Outputs.PublicSubnet3AZ.Export.Name,${AWS::StackName}:public-subnet-3-az
Outputs.VPC.Description,The ID of the vpc.
Parameters.PrivateZoneEgress.Type,String
Outputs.PublicSubnet1.Description,The ID of the first public subnet.
Outputs.PublicSubnet2.Description,The ID of the second public subnet.
Outputs.PublicSubnet2AZ.Description,The AZ of the second public subnet.
Resources.AWS::EC2::NetworkAclEntry.Properties.Icmp.Code,-1
Resources.AWS::EC2::NetworkAclEntry.Properties.PortRange.To,443
Parameters.AutoAssignPublicAddress.AllowedValues,"[u'Yes', u'No']"
Outputs.PublicSubnet1AZ.Description,The AZ of the first public subnet.
Parameters.PublicSubnet3Cidr.Description,IPv4 CIDR for the third public subnet. Must be part of the VPC CIDR.
Outputs.VPC.Value,VPC
