Outputs.CfSshElbSecurityGroup.Export.Name,{u'Fn::Sub': u'${DeploymentName}-CfSshElbSecurityGroup'}
Outputs.ApplicationElbDnsName.Description,ELB DNS Name
Parameters.DirectorElbHealthCheckInternal.Description,Director ELB Health Check Interval
Parameters.LbAz1Cidr.ConstraintDescription,Valid CIDR
Parameters.ApplicationElbHealthCheckTimeout.Type,Number
Outputs.ApplicationElbDnsName.Value,"{u'Fn::GetAtt': [u'ApplicationElb', u'DNSName']}"
Parameters.ApplicationElbHealthCheckTimeout.Default,2
Outputs.CfSshInstanceSecurityGroup.Description,CF SSH Instance Security Group
Outputs.ApplicationElbTargetGroupTcp80Arn.Description,Application ELB Target Group TCP Port 80 ARN
Outputs.DirectorElbSecurityGroup.Description,Director ELB Security Group
Parameters.ApplicationElbTimeout.MaxValue,60
Parameters.CfSshElbUnhealthyThreshold.MinValue,2
Outputs.ApplicationElbTargetGroupTcp443.Export.Name,{u'Fn::Sub': u'${DeploymentName}-ApplicationElbTargetGroupTcp443'}
Outputs.ApplicationElbTargetGroupTcp443.Description,Application ELB Target Group TCP Port 443
Parameters.DirectorElbUnhealthyThreshold.MaxValue,10
Outputs.CfSshElbDnsName.Value,"{u'Fn::GetAtt': [u'CfSshElb', u'DNSName']}"
Outputs.ApplicationElbTargetGroupTcp443.Condition,ApplicationSslElb
Parameters.DirectorElbHealthCheckTimeout.Type,Number
Parameters.DeploymentName.AllowedPattern,^([A-Za-z0-9]+[A-Za-z0-9-]?)+[A-Za-z0-9]$
Parameters.DirectorElbHealthCheckTimeout.MinValue,2
Outputs.CfSshElbSecurityGroup.Description,CF SSH ELB Security Group
Resources.AWS::CertificateManager::Certificate.Type,AWS::CertificateManager::Certificate
Resources.AWS::ElasticLoadBalancingV2::LoadBalancer.Properties.Subnets,"[{u'Ref': u'LbAz1Subnet'}, {u'Ref': u'LbAz2Subnet'}]"
Parameters.DirectorElbHealthCheckInternal.MinValue,5
Parameters.DirectorElbHealthyThreshold.Description,Director ELB Healthy Threshold
Parameters.CfSshElbHealthCheckTimeout.MaxValue,60
Outputs.CfSshElbDnsName.Description,Cloudfoundry SSH ELB DNS Name
Parameters.DeploymentName.MaxLength,16
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.Tags,"[{u'Value': {u'Fn::Sub': u'${DeploymentName}:DirectorElb'}, u'Key': u'Name'}, {u'Value': {u'Ref': u'DeploymentName'}, u'Key': u'deployment'}]"
Outputs.ApplicationElb.Value,{u'Ref': u'ApplicationElb'}
Parameters.SslValidationDomain.Type,String
Parameters.DirectorElbHealthCheckInternal.MaxValue,300
Parameters.CfSshElbScheme.Default,internet-facing
Parameters.SslValidationDomain.Description,"Domain to send the SSL validation emails to. Should be empty, or a the parent domain of HostedZone"
Outputs.ApplicationElbCanonicalHostedZoneId.Export.Name,{u'Fn::Sub': u'${DeploymentName}-ApplicationElbCanonicalHostedZoneId'}
Resources.AWS::ElasticLoadBalancingV2::Listener.Properties.Certificates,"[{u'CertificateArn': {u'Fn::If': [u'GenerateApplicationSslCertificate', {u'Fn::If': [u'GenerateApplicationSslCertificateAndHaCfName', {u'Ref': u'GeneratedApplicationSslCertificateAndHaCfName'}, {u'Ref': u'GeneratedApplicationSslCertificateAndNoHaCfName'}]}, {u'Ref': u'ExistingApplicationSslCertificate'}]}}]"
Parameters.CfSshElbHealthCheckInternal.MaxValue,300
Resources.AWS::EC2::SecurityGroup.Properties.VpcId,{u'Fn::ImportValue': {u'Fn::Sub': u'${DeploymentName}-CloudFoundryVpc'}}
Parameters.ApplicationElbScheme.Description,Application ELB: Internet facing or internal load balancer
Resources.AWS::ElasticLoadBalancingV2::TargetGroup.Properties.HealthCheckProtocol,HTTP
Parameters.DirectorElbHealthCheckInternal.Type,Number
Parameters.DeploymentName.ConstraintDescription,Must be a valid domain label matching /^([A-Za-z0-9]+[A-Za-z0-9-])+[A-Za-z0-9]$/
Parameters.LbAz1Cidr.Description,Loadbalancer AZ1 CIDR
Outputs.DirectorElbSecurityGroup.Value,{u'Ref': u'DirectorElbSecurityGroup'}
Parameters.CfSshElbHealthyThreshold.Description,Cloudfoundry SSH ELB Healthy Threshold
Resources.AWS::ElasticLoadBalancingV2::TargetGroup.Properties.HealthCheckPort,8080
Resources.AWS::CertificateManager::Certificate.Condition,GenerateApplicationSslCertificateAndNoHaCfName
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.Listeners,"[{u'InstancePort': u'22', u'LoadBalancerPort': u'22', u'Protocol': u'TCP', u'InstanceProtocol': u'TCP'}, {u'InstancePort': u'6868', u'LoadBalancerPort': u'6868', u'Protocol': u'TCP', u'InstanceProtocol': u'TCP'}, {u'InstancePort': u'25555', u'LoadBalancerPort': u'25555', u'Protocol': u'TCP', u'InstanceProtocol': u'TCP'}]"
Parameters.LbAz2Cidr.Description,Loadbalancer AZ2 CIDR
Parameters.ApplicationElbHealthCheckTimeout.MinValue,2
Outputs.DirectorElbDnsName.Value,"{u'Fn::GetAtt': [u'DirectorElb', u'DNSName']}"
Resources.AWS::ElasticLoadBalancingV2::TargetGroup.Properties.VpcId,{u'Fn::ImportValue': {u'Fn::Sub': u'${DeploymentName}-CloudFoundryVpc'}}
Parameters.LbAz1Cidr.Type,String
Outputs.ApplicationElbTargetGroupTcp443.Value,"{u'Fn::Select': [u'1', {u'Fn::Split': [u'/', {u'Fn::GetAtt': [u'ApplicationElbTargetGroupTcp443', u'TargetGroupFullName']}]}]}"
Resources.AWS::ElasticLoadBalancingV2::LoadBalancer.Properties.SecurityGroups,[{u'Fn::ImportValue': {u'Fn::Sub': u'${DeploymentName}-ApplicationLbSecurityGroup'}}]
Parameters.CfSshElbHealthCheckTimeout.Default,2
Parameters.DirectorElbUnhealthyThreshold.Default,2
Resources.AWS::EC2::Subnet.Properties.CidrBlock,{u'Ref': u'LbAz2Cidr'}
Resources.AWS::ElasticLoadBalancingV2::TargetGroup.Properties.Port,443
Parameters.HaCfName.Default,
Parameters.DirectorElbUnhealthyThreshold.MinValue,2
Resources.AWS::ElasticLoadBalancingV2::Listener.Properties.LoadBalancerArn,{u'Ref': u'ApplicationElb'}
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.HealthCheck.Target,TCP:22
Parameters.DirectorElbHealthCheckTimeout.MaxValue,60
Parameters.CfSshElbHealthCheckInternal.Default,5
Parameters.ApplicationElbHealthCheckTimeout.MaxValue,60
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.HealthCheck.Timeout,{u'Ref': u'DirectorElbHealthCheckTimeout'}
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.HealthCheck.Interval,{u'Ref': u'DirectorElbHealthCheckInternal'}
Parameters.DeploymentName.Description,Deployment Name
Outputs.DirectorElbCanonicalHostedZoneId.Export.Name,{u'Fn::Sub': u'${DeploymentName}-DirectorElbCanonicalHostedZoneId'}
Parameters.ApplicationElbHealthCheckInternal.MaxValue,300
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.HealthCheck.UnhealthyThreshold,{u'Ref': u'DirectorElbUnhealthyThreshold'}
Parameters.CfSshElbUnhealthyThreshold.Description,Cloudfoundry SSH ELB Unhealth Threshold
Parameters.ApplicationElbHealthCheckInternal.Default,5
Parameters.Availability.AllowedValues,"[u'SingleAZ', u'SingleAZ-HA', u'MultiAZ']"
Parameters.HaCfName.MaxLength,16
Outputs.ApplicationElbDnsName.Export.Name,{u'Fn::Sub': u'${DeploymentName}-ApplicationElbDnsName'}
Parameters.ExistingApplicationSslCertificate.Type,String
Parameters.ApplicationElbTimeout.Type,Number
Parameters.ExistingApplicationSslCertificate.ConstraintDescription,AWS ACM SSL certificate ARN or empty
Parameters.ApplicationElbHealthCheckInternal.Description,Application ELB Health Check Interval
Outputs.ApplicationElbCanonicalHostedZoneId.Value,"{u'Fn::GetAtt': [u'ApplicationElb', u'CanonicalHostedZoneID']}"
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Type,AWS::ElasticLoadBalancing::LoadBalancer
Parameters.DirectorElbScheme.Type,String
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.Subnets,"[{u'Ref': u'LbAz1Subnet'}, {u'Ref': u'LbAz2Subnet'}]"
Resources.AWS::ElasticLoadBalancingV2::TargetGroup.Properties.HealthCheckPath,/health
Resources.AWS::ElasticLoadBalancingV2::TargetGroup.Type,AWS::ElasticLoadBalancingV2::TargetGroup
Parameters.HaCfName.AllowedPattern,^(([A-Za-z0-9]+[A-Za-z0-9-]?)+[A-Za-z0-9])?$
Outputs.CfSshElbCanonicalHostedZoneId.Value,"{u'Fn::GetAtt': [u'CfSshElb', u'CanonicalHostedZoneNameID']}"
Resources.AWS::ElasticLoadBalancingV2::TargetGroup.Properties.Targets,[]
Parameters.DirectorElbHealthyThreshold.Type,Number
Parameters.CfSshElbUnhealthyThreshold.Default,2
Parameters.GenerateApplicationSslCertificate.Type,String
Parameters.LbAz2Cidr.ConstraintDescription,Valid CIDR
Resources.AWS::EC2::SubnetRouteTableAssociation.Properties.SubnetId,{u'Ref': u'LbAz1Subnet'}
Outputs.ApplicationElbTargetGroupTcp80.Value,"{u'Fn::Select': [u'1', {u'Fn::Split': [u'/', {u'Fn::GetAtt': [u'ApplicationElbTargetGroupTcp80', u'TargetGroupFullName']}]}]}"
Resources.AWS::CertificateManager::Certificate.Properties.Tags,"[{u'Value': {u'Fn::Sub': u'${DeploymentName}:GeneratedApplicationSslCertificate'}, u'Key': u'Name'}, {u'Value': {u'Ref': u'DeploymentName'}, u'Key': u'deployment'}]"
Parameters.DeploymentName.Type,String
Resources.AWS::ElasticLoadBalancingV2::Listener.Properties.Protocol,HTTPS
Outputs.CfSshElbDnsName.Export.Name,{u'Fn::Sub': u'${DeploymentName}-CfSshElbDnsName'}
Outputs.CfSshElbSecurityGroup.Value,{u'Ref': u'CfSshElbSecurityGroup'}
Parameters.DirectorElbHealthyThreshold.MinValue,2
Parameters.Availability.Description,Availability Type
Parameters.DeploymentName.MinLength,1
Outputs.CfSshInstanceSecurityGroup.Export.Name,{u'Fn::Sub': u'${DeploymentName}-CfSshInstanceSecurityGroup'}
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.HealthCheck.HealthyThreshold,{u'Ref': u'DirectorElbHealthyThreshold'}
Resources.AWS::ElasticLoadBalancingV2::Listener.Properties.Port,443
Outputs.DirectorElbCanonicalHostedZoneId.Value,"{u'Fn::GetAtt': [u'DirectorElb', u'CanonicalHostedZoneNameID']}"
Parameters.HaCfName.MinLength,0
Resources.AWS::EC2::Subnet.Properties.VpcId,{u'Fn::ImportValue': {u'Fn::Sub': u'${DeploymentName}-CloudFoundryVpc'}}
Outputs.ApplicationElbTargetGroupTcp80.Description,Application ELB Target Group TCP Port 80
Parameters.DirectorElbUnhealthyThreshold.Type,Number
Outputs.ApplicationElb.Export.Name,{u'Fn::Sub': u'${DeploymentName}-ApplicationElb'}
Parameters.CfSshElbHealthCheckTimeout.Type,Number
Parameters.DirectorElbHealthCheckTimeout.Default,2
Parameters.ApplicationElbTimeout.Description,Application ELB Timeout
Outputs.DirectorElb.Value,{u'Ref': u'DirectorElb'}
Parameters.LbAz1Cidr.Default,10.0.10.0/24
Parameters.DirectorElbHealthCheckTimeout.Description,Director ELB Health Check Timeout
Parameters.CfSshElbUnhealthyThreshold.MaxValue,10
Outputs.ApplicationElbCanonicalHostedZoneId.Description,Application ELB Canonical Hosted Zone ID
Resources.AWS::EC2::Subnet.Properties.AvailabilityZone,{u'Fn::ImportValue': {u'Fn::Sub': u'${DeploymentName}-AwsAvailabilityZone2'}}
Parameters.HaCfName.Description,HA CF Name
Outputs.ApplicationElb.Description,Application ELB
Outputs.ApplicationElbTargetGroupTcp443Arn.Description,Application ELB Target Group TCP Port 443 ARN
Resources.AWS::ElasticLoadBalancingV2::TargetGroup.Properties.Tags,"[{u'Value': {u'Fn::Sub': u'${DeploymentName}:ApplicationElbTargetGroupTcp443'}, u'Key': u'Name'}, {u'Value': {u'Ref': u'DeploymentName'}, u'Key': u'deployment'}]"
Resources.AWS::ElasticLoadBalancingV2::LoadBalancer.Type,AWS::ElasticLoadBalancingV2::LoadBalancer
Parameters.DirectorElbScheme.Default,internet-facing
Outputs.ApplicationElbTargetGroupTcp80Arn.Value,{u'Ref': u'ApplicationElbTargetGroupTcp80'}
Outputs.DirectorElbCanonicalHostedZoneId.Description,CF SSH ELB Canonical Hosted Zone ID
Parameters.ApplicationElbHealthCheckTimeout.Description,Application ELB Health Check Timeout
Resources.AWS::ElasticLoadBalancingV2::Listener.Condition,ApplicationSslElb
Resources.AWS::ElasticLoadBalancingV2::LoadBalancer.Properties.Tags,"[{u'Value': {u'Fn::Sub': u'${DeploymentName}:ApplicationElb'}, u'Key': u'Name'}, {u'Value': {u'Ref': u'DeploymentName'}, u'Key': u'deployment'}]"
Parameters.GenerateApplicationSslCertificate.AllowedValues,"[u'true', u'false']"
Parameters.Availability.Type,String
Parameters.CfSshElbHealthyThreshold.Type,Number
Parameters.DirectorElbScheme.Description,Director ELB: Internet facing or internal load balancer
Outputs.DirectorElbSecurityGroup.Export.Name,{u'Fn::Sub': u'${DeploymentName}-DirectorElbSecurityGroup'}
Parameters.CfSshElbHealthCheckTimeout.Description,Cloudfoundry SSH ELB Health Check Timeout
Parameters.HaCfName.ConstraintDescription,Must be a valid domain label matching /^(([A-Za-z0-9]+[A-Za-z0-9-])+[A-Za-z0-9])?$/
Parameters.CfSshElbHealthCheckTimeout.MinValue,2
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.CrossZone,true
Parameters.LbAz2Cidr.Default,10.0.11.0/24
Outputs.CfSshElbCanonicalHostedZoneId.Description,CF SSH ELB Canonical Hosted Zone ID
Parameters.DirectorElbUnhealthyThreshold.Description,Director ELB Unhealth Threshold
Resources.AWS::EC2::SubnetRouteTableAssociation.Properties.RouteTableId,{u'Fn::ImportValue': {u'Fn::Sub': u'${DeploymentName}-InternetRouteTable'}}
Parameters.HaCfName.Type,String
Parameters.ApplicationElbScheme.AllowedValues,"[u'internet-facing', u'internal']"
Outputs.ApplicationElbTargetGroupTcp443Arn.Export.Name,{u'Fn::Sub': u'${DeploymentName}-ApplicationElbTargetGroupTcp443Arn'}
Parameters.CfSshElbScheme.Description,CF SSH ELB: Internet facing or internal load balancer
Resources.AWS::EC2::SecurityGroup.Type,AWS::EC2::SecurityGroup
Parameters.ApplicationElbHealthCheckInternal.MinValue,5
Outputs.ApplicationElbTargetGroupTcp80.Export.Name,{u'Fn::Sub': u'${DeploymentName}-ApplicationElbTargetGroupTcp80'}
Parameters.SslValidationDomain.ConstraintDescription,"Must be a valid domain name matching /^(([A-Za-z0-9]+[A-Za-z0-9-]?)+[A-Za-z0-9]\.)+([A-Za-z0-9]{2,}$/ or empty"
Resources.AWS::EC2::SecurityGroup.Properties.GroupDescription,CF SSH ELB Security Group
Parameters.GenerateApplicationSslCertificate.Default,true
Parameters.CfSshElbHealthCheckInternal.Type,Number
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.Scheme,{u'Ref': u'DirectorElbScheme'}
Parameters.LbAz2Cidr.AllowedPattern,^(([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])$
Parameters.DirectorElbHealthyThreshold.MaxValue,10
Outputs.CfSshElb.Export.Name,{u'Fn::Sub': u'${DeploymentName}-CfSshElb'}
Outputs.ApplicationElbTargetGroupTcp443Arn.Value,{u'Ref': u'ApplicationElbTargetGroupTcp443'}
Parameters.CfSshElbHealthyThreshold.MinValue,2
Parameters.SslValidationDomain.Default,
Resources.AWS::ElasticLoadBalancingV2::TargetGroup.Properties.HealthCheckTimeoutSeconds,{u'Ref': u'ApplicationElbHealthCheckTimeout'}
Parameters.SslValidationDomain.AllowedPattern,"^((([A-Za-z0-9]+[A-Za-z0-9-]?)+[A-Za-z0-9]\.)+[A-Za-z0-9]{2,})?$"
Parameters.ExistingApplicationSslCertificate.Default,
Parameters.CfSshElbUnhealthyThreshold.Type,Number
Outputs.CfSshElb.Value,{u'Ref': u'CfSshElb'}
Resources.AWS::ElasticLoadBalancingV2::LoadBalancer.Properties.LoadBalancerAttributes,"[{u'Value': {u'Ref': u'ApplicationElbTimeout'}, u'Key': u'idle_timeout.timeout_seconds'}]"
Outputs.DirectorElb.Description,Director External ELB
Parameters.ExistingApplicationSslCertificate.AllowedPattern,^(arn:aws::iam::[0-9]+:server-certificate/[0-9]+:[A-Za-z0-9-]+)?$
Parameters.ExistingApplicationSslCertificate.Description,Existing Application SSL certificate ARN
Parameters.ApplicationElbScheme.Type,String
Parameters.DirectorElbScheme.AllowedValues,"[u'internet-facing', u'internal']"
Outputs.DirectorElbDnsName.Description,Director ELB DNS Name
Resources.AWS::EC2::Subnet.Properties.MapPublicIpOnLaunch,False
Resources.AWS::ElasticLoadBalancingV2::TargetGroup.Properties.HealthCheckIntervalSeconds,{u'Ref': u'ApplicationElbHealthCheckInternal'}
Resources.AWS::CertificateManager::Certificate.Properties.DomainValidationOptions,"[{u'ValidationDomain': {u'Fn::If': [u'UseHostedZone', {u'Fn::ImportValue': {u'Fn::Sub': u'${DeploymentName}-DomainName'}}, {u'Ref': u'SslValidationDomain'}]}, u'DomainName': {u'Fn::Join': [u'.', [u'*.apps', {u'Fn::ImportValue': {u'Fn::Sub': u'${DeploymentName}-DomainName'}}]]}}, {u'ValidationDomain': {u'Fn::If': [u'UseHostedZone', {u'Fn::ImportValue': {u'Fn::Sub': u'${DeploymentName}-DomainName'}}, {u'Ref': u'SslValidationDomain'}]}, u'DomainName': {u'Fn::Join': [u'.', [u'*.system', {u'Fn::ImportValue': {u'Fn::Sub': u'${DeploymentName}-DomainName'}}]]}}]"
Parameters.CfSshElbHealthyThreshold.MaxValue,10
Parameters.ApplicationElbTimeout.Default,2
Resources.AWS::ElasticLoadBalancingV2::TargetGroup.Properties.Protocol,HTTPS
Resources.AWS::CertificateManager::Certificate.Properties.DomainName,"{u'Fn::Join': [u'.', [u'*.apps', {u'Fn::ImportValue': {u'Fn::Sub': u'${DeploymentName}-DomainName'}}]]}"
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.SecurityGroups,[{u'Ref': u'DirectorElbSecurityGroup'}]
Parameters.ApplicationElbScheme.Default,internet-facing
Parameters.CfSshElbHealthyThreshold.Default,2
Resources.AWS::ElasticLoadBalancingV2::Listener.Properties.DefaultActions,"[{u'TargetGroupArn': {u'Ref': u'ApplicationElbTargetGroupTcp443'}, u'Type': u'forward'}]"
Resources.AWS::EC2::Subnet.Properties.Tags,"[{u'Value': {u'Fn::Sub': u'${DeploymentName}:LbAz2Subnet'}, u'Key': u'Name'}, {u'Value': {u'Ref': u'DeploymentName'}, u'Key': u'deployment'}]"
Resources.AWS::ElasticLoadBalancingV2::Listener.Type,AWS::ElasticLoadBalancingV2::Listener
Resources.AWS::EC2::SubnetRouteTableAssociation.Type,AWS::EC2::SubnetRouteTableAssociation
Outputs.DirectorElb.Export.Name,{u'Fn::Sub': u'${DeploymentName}-DirectorElb'}
Outputs.CfSshElbCanonicalHostedZoneId.Export.Name,{u'Fn::Sub': u'${DeploymentName}-CfSshElbCanonicalHostedZoneId'}
Parameters.LbAz2Cidr.Type,String
Parameters.GenerateApplicationSslCertificate.Description,Generate Application AWS SSL certificate - requires manual intervention to validate request email
Outputs.ApplicationElbTargetGroupTcp80Arn.Export.Name,{u'Fn::Sub': u'${DeploymentName}-ApplicationElbTargetGroupTcp80Arn'}
Outputs.DirectorElbDnsName.Export.Name,{u'Fn::Sub': u'${DeploymentName}-DirectorElbDnsName'}
Parameters.CfSshElbHealthCheckInternal.MinValue,5
Parameters.CfSshElbHealthCheckInternal.Description,Cloudfoundry SSH ELB Health Check Interval
Parameters.Availability.Default,SingleAZ
Parameters.CfSshElbScheme.AllowedValues,"[u'internet-facing', u'internal']"
Outputs.CfSshElb.Description,Cloudfoundry SSH External ELB
Resources.AWS::EC2::Subnet.Type,AWS::EC2::Subnet
Parameters.ApplicationElbTimeout.MinValue,2
Outputs.CfSshInstanceSecurityGroup.Value,{u'Ref': u'CfSshInstanceSecurityGroup'}
Resources.AWS::CertificateManager::Certificate.Properties.SubjectAlternativeNames,"[{u'Fn::Join': [u'.', [u'*.system', {u'Fn::ImportValue': {u'Fn::Sub': u'${DeploymentName}-DomainName'}}]]}]"
Parameters.ApplicationElbHealthCheckInternal.Type,Number
Resources.AWS::EC2::SecurityGroup.Properties.Tags,"[{u'Value': {u'Fn::Sub': u'${DeploymentName}:CfSshElbSecurityGroup'}, u'Key': u'Name'}, {u'Value': {u'Ref': u'DeploymentName'}, u'Key': u'deployment'}]"
Parameters.CfSshElbScheme.Type,String
Resources.AWS::ElasticLoadBalancingV2::LoadBalancer.Properties.Scheme,{u'Ref': u'ApplicationElbScheme'}
Parameters.DirectorElbHealthCheckInternal.Default,5
Parameters.LbAz1Cidr.AllowedPattern,^(([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))\.){3}([01]?[0-9]?[0-9]|2([0-4][0-9]|5[0-5]))/([0-2]?[0-9]|3[0-2])$
Parameters.DirectorElbHealthyThreshold.Default,2
