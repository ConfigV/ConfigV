Parameters.Username.MaxLength,255
Parameters.Username.MinLength,1
Resources.AWS::EC2::Instance.CreationPolicy.ResourceSignal.Timeout,PT15M
Resources.AWS::EC2::SecurityGroup.Properties.GroupDescription,VPN Security Groups
Parameters.VPNPhrase.MaxLength,255
Parameters.VPNPassword.Type,String
Parameters.Username.Type,String
Parameters.Size.Description,Instance Type
Resources.AWS::EC2::Instance.Properties.UserData,"{u'Fn::Base64': u'#!/bin/bash -x\n\n#Log Execution to Instance Console\nexec > >(tee /var/log/user-data.log|logger -t user-data -s 2>/dev/console) 2>&1\napt-get update -y\n#Passing variables to shell\nYOUR_IPSEC_PSK=${VPNPhrase}\nYOUR_USERNAME=${Username}\nYOUR_PASSWORD=${VPNPassword}\n#VPN 1 - L2TP IPSEC Server\nwget https://git.io/vpnsetup -O vpnsetup.sh && sudo \\\nVPN_IPSEC_PSK=$YOUR_IPSEC_PSK \\\nVPN_USER=$YOUR_USERNAME \\\nVPN_PASSWORD=$YOUR_PASSWORD sh vpnsetup.sh\n\necho ""Updating sysctl settings...""\n\nif ! grep -qs ""hwdsl2 VPN script"" /etc/sysctl.conf; then\n  conf_bk ""/etc/sysctl.conf""\ncat >> /etc/sysctl.conf <<EOF\n\n# Added by hwdsl2 VPN script\nkernel.msgmnb = 65536\nkernel.msgmax = 65536\nkernel.shmmax = 68719476736\nkernel.shmall = 4294967296\n\nnet.ipv4.ip_forward = 1\nnet.ipv4.tcp_syncookies = 1\nnet.ipv4.conf.all.accept_source_route = 0\nnet.ipv4.conf.default.accept_source_route = 0\nnet.ipv4.conf.all.accept_redirects = 0\nnet.ipv4.conf.default.accept_redirects = 0\nnet.ipv4.conf.all.send_redirects = 0\nnet.ipv4.conf.default.send_redirects = 0\nnet.ipv4.conf.lo.send_redirects = 0\nnet.ipv4.conf.$net_iface.send_redirects = 0\nnet.ipv4.conf.all.rp_filter = 0\nnet.ipv4.conf.default.rp_filter = 0\nnet.ipv4.conf.lo.rp_filter = 0\nnet.ipv4.conf.$net_iface.rp_filter = 0\nnet.ipv4.icmp_echo_ignore_broadcasts = 1\nnet.ipv4.icmp_ignore_bogus_error_responses = 1\n\nnet.core.wmem_max = 12582912\nnet.core.rmem_max = 12582912\nnet.ipv4.tcp_rmem = 10240 87380 12582912\nnet.ipv4.tcp_wmem = 10240 87380 12582912\nEOF\nfi\n\necho ""Updating IPTables rules...""\n\n# Check if IPTables rules need updating\nipt_flag=0\nIPT_FILE=""/etc/iptables.rules""\nif ! grep -qs ""hwdsl2 VPN script"" ""$IPT_FILE"" \\\n  || ! iptables -t nat -C POSTROUTING -s ""$L2TP_NET"" -o ""$net_iface""-j MASQUERADE 2>/dev/null \\\n  || ! iptables -t nat -C POSTROUTING -s ""$XAUTH_NET"" -o ""$net_iface""-m policy --dir out --pol none -j MASQUERADE 2>/dev/null; then\n  ipt_flag=1\nfi\n\n# Add IPTables rules for VPN\nif [ ""$ipt_flag"" = ""1"" ]; then\n  service fail2ban stop >/dev/null 2>&1\n  iptables-save > ""$IPT_FILE.old-$SYS_DT""\n  iptables -I INPUT 1 -p udp --dport 1701 -m policy --dir in --pol none -j DROP\n  iptables -I INPUT 2 -m conntrack --ctstate INVALID -j DROP\n  iptables -I INPUT 3 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n  iptables -I INPUT 4 -p udp -m multiport --dports 500,4500 -j ACCEPT\n  iptables -I INPUT 5 -p udp --dport 1701 -m policy --dir in --pol ipsec -j ACCEPT\n  iptables -I INPUT 6 -p udp --dport 1701 -j DROP\n  iptables -I FORWARD 1 -m conntrack --ctstate INVALID -j DROP\n  iptables -I FORWARD 2 -i ""$net_iface"" -o ppp+ -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n  iptables -I FORWARD 3 -i ppp+ -o ""$net_iface"" -j ACCEPT\n  iptables -I FORWARD 4 -i ppp+ -o ppp+ -s ""$L2TP_NET"" -d ""$L2TP_NET""-j ACCEPT\n  iptables -I FORWARD 5 -i ""$net_iface"" -d ""$XAUTH_NET"" -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT\n  iptables -I FORWARD 6 -s ""$XAUTH_NET"" -o ""$net_iface"" -j ACCEPT\n  # Uncomment if you wish to disallow traffic between VPN clients themselves\n  # iptables -I FORWARD 2 -i ppp+ -o ppp+ -s ""$L2TP_NET"" -d ""$L2TP_NET""-j DROP\n  # iptables -I FORWARD 3 -s ""$XAUTH_NET"" -d ""$XAUTH_NET"" -j DROP\n  iptables -A FORWARD -j DROP\n  iptables -t nat -I POSTROUTING -s ""$XAUTH_NET"" -o ""$net_iface"" -m policy --dir out --pol none -j MASQUERADE\n  iptables -t nat -I POSTROUTING -s ""$L2TP_NET"" -o ""$net_iface"" -j MASQUERADE\n  echo ""# Modified by hwdsl2 VPN script"" > ""$IPT_FILE""\n  iptables-save >> ""$IPT_FILE""\n\n  # Update rules for iptables-persistent\n  IPT_FILE2=""/etc/iptables/rules.v4""\n  if [ -f ""$IPT_FILE2"" ]; then\n    conf_bk ""$IPT_FILE2""\n    /bin/cp -f ""$IPT_FILE"" ""$IPT_FILE2""\n  fi\nfi\n\necho ""Enabling services on boot...""\n\nmkdir -p /etc/network/if-pre-up.d\ncat > /etc/network/if-pre-up.d/iptablesload <<\'EOF\'\n#!/bin/bash\niptables-restore < /etc/iptables.rules\nexit 0\nEOF\n\nfor svc in fail2ban ipsec xl2tpd; do\n  update-rc.d ""$svc"" enable >/dev/null 2>&1\n  systemctl enable ""$svc"" 2>/dev/null\ndone\nif ! grep -qs ""hwdsl2 VPN script"" /etc/rc.local; then\n  if [ -f /etc/rc.local ]; then\n    conf_bk ""/etc/rc.local""\n    sed --follow-symlinks -i \'/^exit 0/d\' /etc/rc.local\n  else\n    echo \'#!/bin/sh\' > /etc/rc.local\n  fi\ncat >> /etc/rc.local <<\'EOF\'\n\n# Added by hwdsl2 VPN script\nservice ipsec start\nservice xl2tpd start\necho 1 > /proc/sys/net/ipv4/ip_forward\nexit 0\nEOF\n  if grep -qs raspbian /etc/os-release; then\n    sed --follow-symlinks -i \'/hwdsl2 VPN script/a sleep 15\' /etc/rc.local\n  fi\nfi\n\necho ""Starting services...""\n\n# Reload sysctl.conf\nsysctl -e -q -p\n\n# Update file attributes\nchmod +x /etc/rc.local /etc/network/if-pre-up.d/iptablesload\nchmod 600 /etc/ipsec.secrets* /etc/ppp/chap-secrets* /etc/ipsec.d/passwd*\n\n# Apply new IPTables rules\niptables-restore < ""$IPT_FILE""\n\n# Restart services\nservice fail2ban restart 2>/dev/null\nservice ipsec restart 2>/dev/null\nservice xl2tpd restart 2>/dev/null\n\n#VPN 2 - Setup PPTP Server\napt-get install pptpd -y\necho ""localip 10.0.0.1"" >> /etc/pptpd.conf\necho ""remoteip 10.0.0.100-200"" >> /etc/pptpd.conf\necho ""$YOUR_USERNAME pptpd $YOUR_PASSWORD *"" >> /etc/ppp/chap-secrets\necho ""ms-dns 8.8.8.8"" >> /etc/ppp/pptpd-options\necho ""ms-dns 8.8.4.4"" >> /etc/ppp/pptpd-options\nservice pptpd restart\n\necho ""net.ipv4.ip_forward = 1"" >> /etc/sysctl.conf\nsysctl -p\niptables -t nat -A POSTROUTING -o eth0 -j MASQUERADE && iptables-save\n\n#Installing cfn helper scripts and signalling back to cloudformation\napt-get update -y\napt-get install -y python-setuptools\nmkdir -p /opt/aws/bin\nwget https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz\neasy_install --script-dir /opt/aws/bin aws-cfn-bootstrap-latest.tar.gz\n/opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource VPNServerInstance \n'}"
Outputs.WebdigiNotes.Value,Comments
Parameters.VPNPassword.MinLength,4
Parameters.Username.Description,VPN Username
Parameters.VPNPassword.MaxLength,255
Parameters.Size.AllowedValues,"[u'Standard.VPN-t2.micro', u'High.Speed.VPN-t2.medium', u'Ultra.High.Speed.VPN-m3.xlarge']"
Mappings.AWSRegionArch2AMI.ca-central-1.HVM64,ami-b3d965d7
Resources.AWS::EC2::Instance.Properties.SecurityGroups,[{u'Ref': u'VPNSecurityGroup'}]
Parameters.VPNPhrase.ConstraintDescription,must contain atleast 4 characters.
Parameters.VPNPassword.Description,VPN Password (Min 4 characters)
Parameters.VPNPhrase.NoEcho,true
Parameters.VPNPassword.ConstraintDescription,must contain atleast 4 characters.
Resources.AWS::EC2::Instance.CreationPolicy.ResourceSignal.Count,1
Outputs.VPNServerAddress.Description,Use the IP as Server Address or VPN Host
Resources.AWS::EC2::Instance.Type,AWS::EC2::Instance
Parameters.Size.Type,String
Resources.AWS::EC2::SecurityGroup.Properties.SecurityGroupIngress,"[{u'ToPort': u'500', u'FromPort': u'500', u'IpProtocol': u'tcp', u'CidrIp': u'0.0.0.0/0'}, {u'ToPort': u'500', u'FromPort': u'500', u'IpProtocol': u'udp', u'CidrIp': u'0.0.0.0/0'}, {u'ToPort': u'4500', u'FromPort': u'4500', u'IpProtocol': u'udp', u'CidrIp': u'0.0.0.0/0'}, {u'ToPort': u'1723', u'FromPort': u'1723', u'IpProtocol': u'tcp', u'CidrIp': u'0.0.0.0/0'}, {u'ToPort': u'1723', u'FromPort': u'1723', u'IpProtocol': u'udp', u'CidrIp': u'0.0.0.0/0'}, {u'ToPort': u'1701', u'FromPort': u'1701', u'IpProtocol': u'udp', u'CidrIp': u'0.0.0.0/0'}]"
Parameters.VPNPhrase.Type,String
Parameters.VPNPhrase.Description,Passphrase for IPSEC PSK (Min 4 characters)
Parameters.Username.AllowedPattern,[a-zA-Z][a-zA-Z0-9]*
Mappings.AWSRegionArch2AMI.eu-central-1.HVM64,ami-060cde69
Outputs.WebdigiNotes.Description,Allow upto 5 minutes after setup to connect. Please contact us at https://www.webdigi.co.uk/blog/2015/how-to-setup-your-own-private-secure-free-vpn-on-the-amazon-aws-cloud-in-10-minutes/ for any help!
Resources.AWS::EC2::SecurityGroup.Type,AWS::EC2::SecurityGroup
Outputs.VPNServerAddress.Value,"{u'Fn::GetAtt': [u'VPNServerInstance', u'PublicIp']}"
Resources.AWS::EC2::Instance.Properties.ImageId,"{u'Fn::FindInMap': [u'AWSRegionArch2AMI', {u'Ref': u'AWS::Region'}, u'HVM64']}"
Parameters.VPNPhrase.MinLength,4
Resources.AWS::EC2::Instance.Properties.Tags,"[{u'Value': {u'Ref': u'AWS::StackName'}, u'Key': u'Name'}]"
Parameters.Size.Default,Standard.VPN-t2.micro
Parameters.Username.ConstraintDescription,must begin with a letter and contain only alphanumeric characters.
Parameters.VPNPassword.NoEcho,true
