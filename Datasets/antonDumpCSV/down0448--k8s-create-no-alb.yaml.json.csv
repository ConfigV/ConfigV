Resources.AWS::AutoScaling::AutoScalingGroup.DependsOn,Master
Outputs.KubeConfig.Value,"[u'', [u'scp -i ', u'KeyName', u'.pem ubuntu@', [u'Master', u'PublicIp'], u':.kube/config $HOME/.kube/', u'KeyName', u'-config', u' ', u'export KUBECONFIG=$HOME/.kube/', u'KeyName', u'-config', u':$HOME/.kube/config', u' ', u'kubectl config use-context kubernetes-admin@kubernetes']]"
Resources.AWS::EC2::Route.Type,AWS::EC2::Route
Resources.Custom::GenerateToken.Type,Custom::GenerateToken
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.Tags,"[{u'Value': [u'', [u'Node - ', u'AWS::StackName']], u'PropagateAtLaunch': True, u'Key': u'Name'}]"
Resources.AWS::Lambda::Function.Properties.Timeout,10
Outputs.GeneratedToken.Description,Kubernetes Token to Join Nodes
Mappings.Images.ca-central-1.Id,ami-85cf76e1
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.MinSize,1
Resources.AWS::EC2::EIPAssociation.DependsOn,AttachGateway
Parameters.KeyName.ConstraintDescription,must be the name of an existing EC2 KeyPair.
Parameters.Nodes.Default,3
Resources.AWS::EC2::Instance.Properties.UserData,"{u'Fn::Join': [u'\n', [u'#!/bin/bash -ex', [u' ', [u'/usr/local/bin/cfn-init', u'--verbose', u'--stack', u'AWS::StackName', u'--region', u'AWS::Region', u'--resource', u'Master', u'--configsets', [u'Addons', u'NetworkProvider', u'configSet']]], [u' ', [u'/usr/local/bin/cfn-signal', u'--stack', u'AWS::StackName', u'--region', u'AWS::Region', u'--resource', u'Master']]]]}"
Parameters.NetworkProvider.Default,none
Resources.AWS::EC2::SecurityGroupIngress.Properties.GroupId,MasterSecGroup
Resources.AWS::EC2::SecurityGroupIngress.Properties.SourceSecurityGroupId,NodeSecGroup
Resources.AWS::AutoScaling::LaunchConfiguration.Properties.SecurityGroups,"[u'ClusterSecGroup', u'NodeSecGroup']"
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.DesiredCapacity,Nodes
Resources.AWS::AutoScaling::LaunchConfiguration.DependsOn,Master
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Version,2012-10-17
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.commands.0-join.command,"[u'', [u'kubeadm join --token=""', u'KubernetesToken.Token', u'"" ', [u'', [[u'Master', u'PrivateIp'], u':6443']]]]"
Parameters.NetworkProvider.Description,Select a pod Network provider
Resources.AWS::EC2::EIPAssociation.Properties.NetworkInterfaceId,MasterENI
Resources.AWS::EC2::Instance.Metadata.AWS::CloudFormation::Init.configure-calico.commands.0-add-calico.command,kubectl apply --kubeconfig /etc/kubernetes/admin.conf --namespace kube-system -f http://docs.projectcalico.org/v2.4/getting-started/kubernetes/installation/hosted/kubeadm/1.6/calico.yaml
Resources.AWS::EC2::Route.Properties.GatewayId,InternetGateway
Outputs.MasterIPAddress.Description,IP Address of Master instance
Mappings.Subnets.VPC.CIDR,10.0.0.0/16
Resources.AWS::AutoScaling::LaunchConfiguration.Properties.UserData,"{u'Fn::Join': [u'\n', [u'#!/bin/bash -ex', [u' ', [u'/usr/local/bin/cfn-init', u'--verbose', u'--stack', u'AWS::StackName', u'--region', u'AWS::Region', u'--resource', u'LaunchConfiguration']], [u' ', [u'/usr/local/bin/cfn-signal', u'--stack', u'AWS::StackName', u'--region', u'AWS::Region', u'--resource', u'AutoScalingGroup']]]]}"
Resources.AWS::EC2::Instance.Metadata.AWS::CloudFormation::Init.kubeadm-init.commands.1-config.command,install --owner=ubuntu --group=ubuntu --directory /home/ubuntu/.kube && install --owner=ubuntu --group=ubuntu --mode=0600 /etc/kubernetes/admin.conf /home/ubuntu/.kube/config
Resources.Custom::GenerateToken.Version,1.0
Mappings.Subnets.AvailabilityZone2.CIDR,10.0.1.0/24
Parameters.Nodes.Type,Number
Outputs.NetworkProvider.Value,NetworkProvider
Outputs.LoginCommand.Description,Command to SSH into Master
Resources.AWS::EC2::SecurityGroupIngress.Type,AWS::EC2::SecurityGroupIngress
Resources.AWS::EC2::Subnet.Properties.CidrBlock,"[u'Subnets', u'AvailabilityZone1', u'CIDR']"
Resources.AWS::EC2::Instance.Properties.KeyName,KeyName
Resources.AWS::AutoScaling::LaunchConfiguration.Properties.AssociatePublicIpAddress,True
Resources.AWS::EC2::Instance.Metadata.AWS::CloudFormation::Init.configSets.calico,"[u'kubeadm-init', u'configure-calico']"
Parameters.NetworkProvider.AllowedValues,"[u'none', u'calico', u'weave']"
Parameters.KeyName.Type,AWS::EC2::KeyPair::KeyName
Resources.AWS::EC2::VPCGatewayAttachment.Properties.InternetGatewayId,InternetGateway
Resources.AWS::EC2::EIPAssociation.Type,AWS::EC2::EIPAssociation
Resources.AWS::Lambda::Function.Type,AWS::Lambda::Function
Mappings.Addons.none.configSet,none
Resources.AWS::EC2::SecurityGroupIngress.Properties.FromPort,9898
Resources.AWS::EC2::Route.Properties.RouteTableId,InternetGatewayRoute
Resources.AWS::EC2::Route.DependsOn,AttachGateway
Resources.AWS::EC2::EIP.Properties.Domain,vpc
Resources.AWS::EC2::Instance.Properties.NetworkInterfaces,"[{u'DeviceIndex': 0, u'NetworkInterfaceId': u'MasterENI'}]"
Resources.AWS::EC2::NetworkInterface.Type,AWS::EC2::NetworkInterface
Resources.AWS::EC2::RouteTable.Properties.VpcId,VPCID
Outputs.AMI.Description,The Kubernetes Community Amazon Machine Image
Resources.AWS::EC2::VPC.Type,AWS::EC2::VPC
Resources.AWS::IAM::Role.Properties.Policies,"[{u'PolicyName': u'lambda_policy', u'PolicyDocument': {u'Version': u'2012-10-17', u'Statement': [{u'Action': [u'logs:CreateLogGroup', u'logs:CreateLogStream', u'logs:PutLogEvents'], u'Resource': u'arn:aws:logs:*:*:*', u'Effect': u'Allow'}]}}]"
Mappings.Addons.calico.configSet,calico
Mappings.Images.eu-central-1.Id,ami-850cbbea
Resources.AWS::EC2::Subnet.Type,AWS::EC2::Subnet
Resources.AWS::EC2::VPCGatewayAttachment.Properties.VpcId,VPCID
Resources.AWS::AutoScaling::LaunchConfiguration.Properties.KeyName,KeyName
Resources.AWS::EC2::Route.Properties.DestinationCidrBlock,0.0.0.0/0
Resources.AWS::EC2::Subnet.Properties.VpcId,VPCID
Resources.AWS::EC2::SecurityGroup.Properties.GroupDescription,Security group for cluster nodes
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.LaunchConfigurationName,LaunchConfiguration
Resources.AWS::EC2::Instance.Metadata.AWS::CloudFormation::Init.configSets.none,[u'kubeadm-init']
Resources.AWS::EC2::EIP.Type,AWS::EC2::EIP
Resources.AWS::Lambda::Function.Properties.Handler,index.handler
Resources.AWS::EC2::SecurityGroupIngress.Properties.ToPort,9898
Resources.AWS::EC2::Subnet.Properties.AvailabilityZone,"[0, {u'Ref': u'AWS::Region'}]"
Resources.AWS::EC2::SecurityGroupIngress.Properties.IpProtocol,tcp
Resources.AWS::EC2::NetworkInterface.DependsOn,AttachGateway
Mappings.Subnets.AvailabilityZone1.CIDR,10.0.0.0/24
Resources.AWS::EC2::SubnetRouteTableAssociation.Properties.RouteTableId,InternetGatewayRoute
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Statement,"[{u'Action': u'sts:AssumeRole', u'Effect': u'Allow', u'Principal': {u'Service': [u'lambda.amazonaws.com']}}]"
Resources.AWS::EC2::NetworkInterface.Properties.GroupSet,"[u'MasterSecGroup', u'ClusterSecGroup']"
Parameters.KeyName.Description,Name of an existing EC2 KeyPair to enable SSH access to the instance
Resources.AWS::Lambda::Function.Properties.Runtime,nodejs6.10
Resources.AWS::EC2::InternetGateway.Type,AWS::EC2::InternetGateway
Resources.AWS::EC2::SecurityGroup.Properties.VpcId,VPCID
Resources.AWS::EC2::SecurityGroup.Type,AWS::EC2::SecurityGroup
Resources.AWS::EC2::VPCGatewayAttachment.DependsOn,KubernetesToken
Outputs.GeneratedToken.Value,${KubernetesToken.Token}
Parameters.NetworkProvider.Type,String
Resources.AWS::AutoScaling::LaunchConfiguration.Type,AWS::AutoScaling::LaunchConfiguration
Resources.AWS::AutoScaling::AutoScalingGroup.Type,AWS::AutoScaling::AutoScalingGroup
Resources.AWS::AutoScaling::LaunchConfiguration.Properties.ImageId,"[u'Images', u'AWS::Region', u'Id']"
Resources.AWS::EC2::EIPAssociation.Properties.AllocationId,"[u'MasterEIP', u'AllocationId']"
Outputs.NetworkProvider.Description,Selected Network Provider
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.MaxSize,Nodes
Resources.AWS::IAM::Role.Properties.Path,/
Resources.AWS::EC2::NetworkInterface.Properties.SubnetId,SubnetAZ1
Resources.AWS::IAM::Role.Type,AWS::IAM::Role
Resources.AWS::Lambda::Function.Properties.Code.ZipFile,"'use strict';
const crypto = require('crypto');
const response = require('cfn-response');

exports.handler = (event, context, callback) => {
    function tokenGenerator (len) {
        return crypto.randomBytes(Math.ceil(len/2)).toString('hex').slice(0,len);
    }
    var token = tokenGenerator(6) + '.' + tokenGenerator(16)
    var responseData = {Token: token}
    return response.send(event, context, response.SUCCESS, responseData);
};
"
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.VPCZoneIdentifier,"[[u',', [u'SubnetAZ1']]]"
Resources.AWS::EC2::Instance.Metadata.AWS::CloudFormation::Init.configure-weave.commands.0-add-weave.command,kubectl apply --kubeconfig /etc/kubernetes/admin.conf --namespace kube-system -f https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')
Resources.AWS::EC2::EIP.DependsOn,AttachGateway
Resources.AWS::EC2::VPCGatewayAttachment.Type,AWS::EC2::VPCGatewayAttachment
Outputs.LoginKey.Value,KeyName
Outputs.LoginKey.Description,SSH Key Name
Mappings.Addons.weave.configSet,weave
Resources.AWS::EC2::SubnetRouteTableAssociation.Type,AWS::EC2::SubnetRouteTableAssociation
Resources.AWS::EC2::Instance.DependsOn,AttachGateway
Resources.AWS::EC2::Instance.Type,AWS::EC2::Instance
Parameters.Nodes.Description,Number of kubernetes nodes
Resources.AWS::EC2::SubnetRouteTableAssociation.Properties.SubnetId,SubnetAZ2
Resources.AWS::EC2::RouteTable.Type,AWS::EC2::RouteTable
Resources.AWS::EC2::Instance.Metadata.AWS::CloudFormation::Init.kubeadm-init.commands.0-init.command,"[u'', [u'set -x; kubeadm init --apiserver-advertise-address=""$(ec2metadata --public-ipv4)"" --token=""', u'KubernetesToken.Token', u'"" --kubernetes-version=""$(cat /etc/kubernetes_community_ami_version)"" --pod-network-cidr=192.168.0.0/16              ']]"
Resources.Custom::GenerateToken.Properties.ServiceToken,GenerateToken.Arn
Resources.AWS::EC2::SecurityGroupIngress.Properties.CidrIp,0.0.0.0/0
Resources.AWS::Lambda::Function.Properties.Role,LambdaExecutionRole.Arn
Outputs.LoginCommand.Value,"[u'', [u'ssh -i ', u'KeyName', u'.pem ubuntu@', [u'Master', u'PublicIp']]]"
Outputs.AMI.Value,"[u'Images', u'AWS::Region', u'Id']"
Resources.AWS::EC2::Instance.Properties.ImageId,"[u'Images', u'AWS::Region', u'Id']"
Outputs.MasterIPAddress.Value,"[u'Master', u'PublicIp']"
Resources.AWS::EC2::VPC.Properties.CidrBlock,"[u'Subnets', u'VPC', u'CIDR']"
Resources.AWS::EC2::Instance.Properties.Tags,"[{u'Value': [u'', [u'Master - ', u'AWS::StackName']], u'Key': u'Name'}]"
Resources.AWS::EC2::Instance.Metadata.AWS::CloudFormation::Init.configSets.weave,"[u'kubeadm-init', u'configure-weave']"
