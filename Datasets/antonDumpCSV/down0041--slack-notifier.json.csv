Resources.AWS::IAM::Policy.Properties.Roles,[{u'Ref': u'LambdaFunctionRole'}]
Resources.AWS::Events::Rule.Properties.EventPattern.source,[u'aws.health']
Resources.AWS::IAM::Policy.Properties.PolicyDocument.Version,2012-10-17
Resources.AWS::Lambda::Permission.Properties.FunctionName,"{u'Fn::GetAtt': [u'SlackNotifierLambdaFn', u'Arn']}"
Resources.AWS::IAM::Policy.Type,AWS::IAM::Policy
Resources.AWS::Lambda::Permission.Properties.Principal,events.amazonaws.com
Resources.AWS::Lambda::Permission.Properties.Action,lambda:InvokeFunction
Resources.AWS::Lambda::Function.Properties.Timeout,60
Parameters.HookURL.Type,String
Resources.AWS::IAM::Role.Properties.Path,/
Resources.AWS::Lambda::Permission.Type,AWS::Lambda::Permission
Resources.AWS::IAM::Role.Type,AWS::IAM::Role
Resources.AWS::Lambda::Function.Properties.Role,"{u'Fn::GetAtt': [u'LambdaFunctionRole', u'Arn']}"
Resources.AWS::Lambda::Function.Properties.Code.ZipFile,"{u'Fn::Join': [u'', [u'#Sample Lambda Function to post notifications to a slack channel when an AWS Health event happens\n', u'from __future__ import print_function \n', u'import boto3 \n', u'import json \n', u'import logging \n', u'import os \n', u'from urllib2 import Request, urlopen, URLError, HTTPError \n', u'# Setting up logging \n', u'logger = logging.getLogger() \n', u'logger.setLevel(logging.INFO) \n', u'# main function \n', u'def handler(event, context): \n', u'  message =  str(event[\'detail\'][\'eventDescription\'][0][\'latestDescription\'] + ""\\n\\n<https://phd.aws.amazon.com/phd/home?region=us-east-1#/event-log?eventID="" + event[\'detail\'][\'eventArn\'] + ""|Click here> for details."") \n', u'  json.dumps(message) \n', u'  slack_message = { \n', u""    'channel': '"", {u'Ref': u'SlackChannel'}, u""',\n    'text': message \n"", u'} \n', u'  logger.info(str(slack_message)) \n', u'  req = Request(""', {u'Ref': u'HookURL'}, u'"", json.dumps(slack_message)) \n', u'  try: \n', u'   response = urlopen(req) \n', u'   response.read() \n', u'   logger.info(""Message posted to %s"", slack_message[\'channel\']) \n', u'  except HTTPError as e: \n', u'   logger.error(""Request failed : %d %s"", e.code, e.reason) \n', u'  except URLError as e: \n', u'   logger.error(""Server connection failed: %s"", e.reason) \n']]}"
Resources.AWS::Events::Rule.Properties.State,ENABLED
Resources.AWS::Lambda::Function.Properties.Handler,index.handler
Resources.AWS::Events::Rule.Properties.Targets,"[{u'Id': u'SlackNotifierLambdaFn', u'Arn': {u'Fn::GetAtt': [u'SlackNotifierLambdaFn', u'Arn']}}]"
Parameters.SlackChannel.Description,Please enter your Slack channel name:
Parameters.SlackChannel.Type,String
Resources.AWS::Lambda::Function.Type,AWS::Lambda::Function
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Statement,"[{u'Action': [u'sts:AssumeRole'], u'Effect': u'Allow', u'Principal': {u'Service': [u'lambda.amazonaws.com']}}]"
Resources.AWS::IAM::Policy.Properties.PolicyDocument.Statement,"[{u'Action': [u'logs:CreateLogGroup', u'logs:CreateLogStream', u'logs:PutLogEvents'], u'Resource': u'arn:aws:logs:*:*:*', u'Effect': u'Allow', u'Sid': u'Stmt12349896368829'}]"
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Version,2012-10-17
Resources.AWS::Lambda::Function.Properties.Runtime,python2.7
Resources.AWS::Events::Rule.Type,AWS::Events::Rule
Parameters.HookURL.Description,Please enter the web hook url from Slack:
Resources.AWS::IAM::Policy.Properties.PolicyName,LambdaPolicy
Resources.AWS::Lambda::Permission.Properties.SourceArn,"{u'Fn::GetAtt': [u'CloudWatchEventRule', u'Arn']}"
Resources.AWS::Events::Rule.Properties.Description,EventRule
