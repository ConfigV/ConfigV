Resources.AWS::WAF::Rule.Properties.MetricName,"{u'Fn::Join': [u'', [{u'Ref': u'pBaseName'}, u'RuleBadActorIps']]}"
Resources.AWS::Lambda::Function.Properties.Runtime,nodejs
Resources.AWS::WAF::WebACL.Properties.Name,"{u'Fn::Join': [u'', [{u'Ref': u'pBaseName'}, u'WebAcl']]}"
Resources.AWS::WAF::WebACL.Type,AWS::WAF::WebACL
Resources.AWS::Lambda::Function.Properties.Description,"{u'Fn::Join': [u'|', [u'DO NOT CHANGE! - CONFIGURATION DATA', {u'Ref': u'rIpSet'}, {u'Ref': u'rSnsTopic'}]]}"
Resources.AWS::Lambda::Permission.Properties.FunctionName,"{u'Fn::GetAtt': [u'rLambdaFunction', u'Arn']}"
Resources.AWS::Lambda::Permission.DependsOn,[u'rLambdaFunction']
Resources.AWS::WAF::IPSet.Type,AWS::WAF::IPSet
Parameters.pBaseName.MinLength,1
Resources.AWS::Lambda::Permission.Properties.Principal,apigateway.amazonaws.com
Resources.AWS::Lambda::Permission.Properties.Action,lambda:InvokeFunction
Resources.AWS::Lambda::Function.Properties.Timeout,10
Parameters.pApiId.Default,
Resources.AWS::IAM::Role.Type,AWS::IAM::Role
Parameters.pApiId.MaxLength,10
Resources.AWS::Lambda::Function.Properties.MemorySize,128
Outputs.oLambdaFunction.Description,The name of the Lambda function to use with the API Gateway
Resources.AWS::Lambda::Permission.Type,AWS::Lambda::Permission
Resources.AWS::SNS::Topic.Type,AWS::SNS::Topic
Resources.AWS::Lambda::Function.Properties.Role,"{u'Fn::GetAtt': [u'rLambdaRole', u'Arn']}"
Resources.AWS::WAF::WebACL.Properties.DefaultAction.Type,ALLOW
Outputs.oSnsTopic.Description,The SNS Topic created by this template
Resources.AWS::WAF::WebACL.DependsOn,[u'rRule']
Parameters.pBaseName.Default,wafBadBotBlocker
Outputs.oIpSet.Description,The IPSet condition created by this template
Parameters.pApiId.AllowedPattern,[a-z0-9]*
Resources.AWS::WAF::IPSet.Properties.Name,"{u'Fn::Join': [u'', [{u'Ref': u'pBaseName'}, u'IpSetBadActors']]}"
Resources.AWS::WAF::WebACL.Properties.MetricName,"{u'Fn::Join': [u'', [{u'Ref': u'pBaseName'}, u'WebAcl']]}"
Parameters.pApiId.Type,String
Resources.AWS::Lambda::Function.Properties.Code.S3Bucket,"{u'Fn::FindInMap': [u'mFunctionSources', {u'Ref': u'AWS::Region'}, u'Bucket']}"
Resources.AWS::SNS::Topic.Properties.TopicName,"{u'Fn::Join': [u'', [{u'Ref': u'pBaseName'}, u'SnsTopic']]}"
Resources.AWS::WAF::Rule.Properties.Name,"{u'Fn::Join': [u'', [{u'Ref': u'pBaseName'}, u'RuleBadActorIps']]}"
Resources.AWS::WAF::WebACL.Properties.Rules,"[{u'Action': {u'Type': u'BLOCK'}, u'Priority': 1, u'RuleId': {u'Ref': u'rRule'}}]"
Metadata.AWS::CloudFormation::Interface.ParameterLabels.pBaseName.default,Base Resource Name
Resources.AWS::WAF::Rule.Properties.Predicates,"[{u'DataId': {u'Ref': u'rIpSet'}, u'Type': u'IPMatch', u'Negated': False}]"
Outputs.oIpSet.Value,{u'Ref': u'rIpSet'}
Outputs.oSnsTopic.Value,{u'Ref': u'rSnsTopic'}
Resources.AWS::Lambda::Function.Properties.Handler,function.handler
Resources.AWS::Lambda::Function.Type,AWS::Lambda::Function
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Statement,"[{u'Action': [u'sts:AssumeRole'], u'Effect': u'Allow', u'Principal': {u'Service': [u'lambda.amazonaws.com']}}]"
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Version,2012-10-17
Parameters.pBaseName.Type,String
Resources.AWS::WAF::Rule.DependsOn,[u'rIpSet']
Parameters.pApiId.Description,The ID of the API Gateway Restful API created
Parameters.pBaseName.MaxLength,32
Metadata.AWS::CloudFormation::Interface.ParameterLabels.pApiId.default,Restful API ID
Resources.AWS::WAF::Rule.Type,AWS::WAF::Rule
Resources.AWS::SNS::Topic.Properties.DisplayName,BadBotBlocked
Parameters.pBaseName.Description,Base name to apply to the resources in this solution
Resources.AWS::SNS::Topic.Properties.Subscription,[]
Resources.AWS::Lambda::Permission.Properties.SourceArn,"{u'Fn::Join': [u'', [u'arn:aws:execute-api:', {u'Ref': u'AWS::Region'}, u':', {u'Ref': u'AWS::AccountId'}, u':', {u'Ref': u'pApiId'}, u'/*/GET/*']]}"
Resources.AWS::Lambda::Function.Properties.Code.S3Key,waf-bad-bot-blocking/aws-waf-bad-bot-blocking_0-1-0_latest.zip
Resources.AWS::WAF::IPSet.Properties.IPSetDescriptors,[]
Parameters.pBaseName.AllowedPattern,[a-zA-Z0-9]+
Resources.AWS::IAM::Role.DependsOn,"[u'rIpSet', u'rSnsTopic']"
Metadata.AWS::CloudFormation::Interface.ParameterGroups,"[{u'Parameters': [u'pBaseName'], u'Label': {u'default': u'General'}}, {u'Parameters': [u'pApiId'], u'Label': {u'default': u'API Gateway Integration'}}]"
Resources.AWS::IAM::Role.Properties.Policies,"[{u'PolicyName': {u'Fn::Join': [u'', [{u'Ref': u'pBaseName'}, u'LambdaRole']]}, u'PolicyDocument': {u'Version': u'2012-10-17', u'Statement': [{u'Action': [u'logs:CreateLogGroup', u'logs:CreateLogStream', u'logs:PutLogEvents'], u'Resource': [u'arn:aws:logs:*:*:*'], u'Effect': u'Allow'}, {u'Action': [u'waf:GetChangeToken'], u'Resource': [u'*'], u'Effect': u'Allow'}, {u'Action': [u'waf:UpdateIPSet'], u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:waf::', {u'Ref': u'AWS::AccountId'}, u':ipset/', {u'Ref': u'rIpSet'}]]}], u'Effect': u'Allow'}, {u'Action': [u'sns:Publish'], u'Resource': [{u'Ref': u'rSnsTopic'}], u'Effect': u'Allow'}, {u'Action': [u'lambda:GetFunctionConfiguration'], u'Resource': [u'*'], u'Effect': u'Allow'}]}}]"
Outputs.oLambdaFunction.Value,{u'Ref': u'rLambdaFunction'}
