Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./var/www/html/index.html.owner,root
Resources.AWS::EC2::Route.Type,AWS::EC2::Route
Outputs.Bastion.Description,IP Address of the Bastion host
Resources.AWS::EC2::NetworkAclEntry.Properties.NetworkAclId,{u'Ref': u'PrivateNetworkAcl'}
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./etc/httpd/conf.d/maptobackend.conf.content,"{u'Fn::Join': [u'', [u'ProxyPass /backend http://', {u'Fn::GetAtt': [u'PrivateElasticLoadBalancer', u'DNSName']}, u'\n', u'ProxyPassReverse /backend http://', {u'Fn::GetAtt': [u'PrivateElasticLoadBalancer', u'DNSName']}, u'\n']]}"
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.Tags,"[{u'PropagateAtLaunch': u'true', u'Value': u'Public', u'Key': u'Network'}]"
Parameters.SSHFrom.AllowedPattern,"(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})"
Resources.AWS::EC2::Instance.Properties.SecurityGroupIds,[{u'Ref': u'NATSecurityGroup'}]
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.MinSize,1
Resources.AWS::IAM::User.Properties.Path,/
Parameters.FrontendSize.Type,Number
Parameters.SSHFrom.MaxLength,18
Parameters.KeyName.ConstraintDescription,"can contain only alphanumeric characters, spaces, dashes and underscores."
Resources.AWS::EC2::NetworkAclEntry.Properties.Egress,true
Resources.AWS::EC2::Instance.Properties.SubnetId,{u'Ref': u'PublicSubnet'}
Parameters.KeyName.MaxLength,64
Parameters.SSHFrom.MinLength,9
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.DesiredCapacity,{u'Ref': u'FrontendSize'}
Resources.AWS::IAM::User.Properties.Policies,"[{u'PolicyName': u'root', u'PolicyDocument': {u'Statement': [{u'Action': u'cloudformation:DescribeStackResource', u'Resource': u'*', u'Effect': u'Allow'}]}}]"
Resources.AWS::EC2::SecurityGroup.Properties.SecurityGroupIngress,"[{u'ToPort': u'22', u'IpProtocol': u'tcp', u'CidrIp': {u'Ref': u'SSHFrom'}, u'FromPort': u'22'}]"
Resources.AWS::EC2::VPCGatewayAttachment.Type,AWS::EC2::VPCGatewayAttachment
Resources.AWS::EC2::SubnetNetworkAclAssociation.Properties.SubnetId,{u'Ref': u'PrivateSubnet'}
Resources.AWS::CloudFormation::WaitCondition.Properties.Timeout,300
Resources.AWS::EC2::NetworkAcl.Type,AWS::EC2::NetworkAcl
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.Scheme,internal
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.AvailabilityZones,"[{u'Fn::GetAtt': [u'PrivateSubnet', u'AvailabilityZone']}]"
Parameters.SSHFrom.Description,Lockdown SSH access to the bastion host (default can be accessed from anywhere)
Mappings.SubnetConfig.Public.CIDR,10.0.0.0/24
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.HealthCheck.UnhealthyThreshold,5
Mappings.SubnetConfig.VPC.CIDR,10.0.0.0/16
Resources.AWS::EC2::SubnetNetworkAclAssociation.Type,AWS::EC2::SubnetNetworkAclAssociation
Resources.AWS::AutoScaling::LaunchConfiguration.Properties.UserData,"{u'Fn::Base64': {u'Fn::Join': [u'', [u'#!/bin/bash -v\n', u'yum update -y aws-cfn-bootstrap\n', u'# Install Apache\n', u'/opt/aws/bin/cfn-init --stack ', {u'Ref': u'AWS::StackName'}, u' --resource BackendLaunchConfig ', u'    --access-key ', {u'Ref': u'HostKeys'}, u'    --secret-key ', {u'Fn::GetAtt': [u'HostKeys', u'SecretAccessKey']}, u'    --url https://stackbuilder.amazonaws.com ', u'    --region ', {u'Ref': u'AWS::Region'}, u'\n', u'# Signal completion\n', u'/opt/aws/bin/cfn-signal -e $? -r ""Backend setup done"" \'', {u'Ref': u'BackendWaitHandle'}, u""'\n""]]}}"
Resources.AWS::EC2::NetworkAclEntry.Type,AWS::EC2::NetworkAclEntry
Resources.AWS::EC2::NetworkAclEntry.Properties.Protocol,6
Resources.AWS::EC2::RouteTable.Properties.Tags,"[{u'Value': {u'Ref': u'AWS::StackName'}, u'Key': u'Application'}, {u'Value': u'Public', u'Key': u'Network'}]"
Outputs.WebSite.Value,"{u'Fn::Join': [u'', [u'http://', {u'Fn::GetAtt': [u'PublicElasticLoadBalancer', u'DNSName']}]]}"
Resources.AWS::EC2::Subnet.Properties.CidrBlock,"{u'Fn::FindInMap': [u'SubnetConfig', u'Private', u'CIDR']}"
Resources.AWS::EC2::Instance.Properties.KeyName,{u'Ref': u'KeyName'}
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.HealthCheck.Timeout,60
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.HealthCheck.Interval,90
Parameters.KeyName.Type,String
Resources.AWS::EC2::SubnetNetworkAclAssociation.Properties.NetworkAclId,{u'Ref': u'PrivateNetworkAcl'}
Parameters.SSHFrom.ConstraintDescription,must be a valid CIDR range of the form x.x.x.x/x.
Resources.AWS::EC2::NetworkAclEntry.Properties.RuleNumber,100
Resources.AWS::EC2::VPCGatewayAttachment.Properties.InternetGatewayId,{u'Ref': u'InternetGateway'}
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./var/www/html/index.html.group,root
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Type,AWS::ElasticLoadBalancing::LoadBalancer
Resources.AWS::EC2::Instance.Type,AWS::EC2::Instance
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.Subnets,[{u'Ref': u'PublicSubnet'}]
Resources.AWS::EC2::NetworkAclEntry.Properties.RuleAction,allow
Resources.AWS::EC2::Route.Properties.RouteTableId,{u'Ref': u'PrivateRouteTable'}
Resources.AWS::EC2::EIP.Properties.Domain,vpc
Resources.AWS::EC2::RouteTable.Properties.VpcId,{u'Ref': u'VPC'}
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.services.sysvinit.httpd.files,[u'/var/www/html/index.html']
Resources.AWS::EC2::VPC.Type,AWS::EC2::VPC
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./etc/httpd/conf.d/maptobackend.conf.owner,root
Resources.AWS::EC2::Subnet.Type,AWS::EC2::Subnet
Resources.AWS::EC2::NetworkAclEntry.Properties.PortRange.To,65535
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.HealthCheck.HealthyThreshold,3
Resources.AWS::CloudFormation::WaitCondition.Properties.Count,{u'Ref': u'BackendSize'}
Resources.AWS::AutoScaling::LaunchConfiguration.Properties.KeyName,{u'Ref': u'KeyName'}
Resources.AWS::IAM::AccessKey.Properties.UserName,{u'Ref': u'CfnUser'}
Resources.AWS::EC2::SecurityGroup.Properties.SecurityGroupEgress,"[{u'ToPort': u'22', u'IpProtocol': u'tcp', u'CidrIp': {u'Fn::FindInMap': [u'SubnetConfig', u'Private', u'CIDR']}, u'FromPort': u'22'}]"
Parameters.BackendSize.Type,Number
Resources.AWS::EC2::Route.Properties.DestinationCidrBlock,0.0.0.0/0
Resources.AWS::EC2::Subnet.Properties.VpcId,{u'Ref': u'VPC'}
Resources.AWS::EC2::Route.Properties.InstanceId,{u'Ref': u'NATDevice'}
Resources.AWS::EC2::SecurityGroup.Properties.GroupDescription,Enable access to the Bastion host
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.Listeners,"[{u'InstancePort': u'80', u'LoadBalancerPort': u'80', u'Protocol': u'HTTP'}]"
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.LaunchConfigurationName,{u'Ref': u'FrontendServerLaunchConfig'}
Resources.AWS::CloudFormation::WaitCondition.DependsOn,BackendFleet
Resources.AWS::EC2::EIP.Type,AWS::EC2::EIP
Resources.AWS::EC2::NetworkAcl.Properties.VpcId,{u'Ref': u'VPC'}
Mappings.SubnetConfig.Private.CIDR,10.0.1.0/24
Parameters.SSHFrom.Type,String
Resources.AWS::EC2::Instance.Properties.SourceDestCheck,false
Resources.AWS::EC2::NetworkAclEntry.Properties.PortRange.From,0
Resources.AWS::CloudFormation::WaitCondition.Properties.Handle,{u'Ref': u'BackendWaitHandle'}
Resources.AWS::EC2::NetworkAcl.Properties.Tags,"[{u'Value': {u'Ref': u'AWS::StackName'}, u'Key': u'Application'}, {u'Value': u'Public', u'Key': u'Network'}]"
Parameters.SSHFrom.Default,0.0.0.0/0
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.Comment1,Configure the Backend server to respond to requests
Resources.AWS::EC2::SubnetRouteTableAssociation.Properties.RouteTableId,{u'Ref': u'PrivateRouteTable'}
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.services.sysvinit.httpd.ensureRunning,true
Resources.AWS::EC2::InternetGateway.Properties.Tags,"[{u'Value': {u'Ref': u'AWS::StackName'}, u'Key': u'Application'}, {u'Value': u'Public', u'Key': u'Network'}]"
Resources.AWS::EC2::VPC.Properties.Tags,"[{u'Value': {u'Ref': u'AWS::StackName'}, u'Key': u'Application'}, {u'Value': u'Public', u'Key': u'Network'}]"
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.MaxSize,10
Parameters.KeyName.Description,Name of an existing EC2 KeyPair to enable SSH access to the instances
Resources.AWS::EC2::InternetGateway.Type,AWS::EC2::InternetGateway
Resources.AWS::EC2::SecurityGroup.Properties.VpcId,{u'Ref': u'VPC'}
Resources.AWS::EC2::SecurityGroup.Type,AWS::EC2::SecurityGroup
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./etc/httpd/conf.d/maptobackend.conf.group,root
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.HealthCheck.Target,HTTP:80/
Parameters.BackendSize.Description,Number of EC2 instances to launch for the backend server
Resources.AWS::AutoScaling::LaunchConfiguration.Type,AWS::AutoScaling::LaunchConfiguration
Parameters.KeyName.MinLength,1
Resources.AWS::AutoScaling::AutoScalingGroup.Type,AWS::AutoScaling::AutoScalingGroup
Resources.AWS::AutoScaling::LaunchConfiguration.Properties.ImageId,"{u'Fn::FindInMap': [u'AWSRegionArch2AMI', {u'Ref': u'AWS::Region'}, {u'Fn::FindInMap': [u'AWSInstanceType2Arch', {u'Ref': u'BackendInstanceType'}, u'Arch']}]}"
Resources.AWS::CloudFormation::WaitConditionHandle.Type,AWS::CloudFormation::WaitConditionHandle
Resources.AWS::EC2::NetworkAclEntry.Properties.CidrBlock,0.0.0.0/0
Resources.AWS::IAM::User.Type,AWS::IAM::User
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.VPCZoneIdentifier,[{u'Ref': u'PrivateSubnet'}]
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./var/www/html/index.html.mode,000644
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./etc/httpd/conf.d/maptobackend.conf.mode,000644
Parameters.BackendSize.Default,1
Resources.AWS::AutoScaling::LaunchConfiguration.Properties.SecurityGroups,[{u'Ref': u'BackendSecurityGroup'}]
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.SecurityGroups,[{u'Ref': u'PublicLoadBalancerSecurityGroup'}]
Resources.AWS::EC2::Route.Properties.GatewayId,{u'Ref': u'InternetGateway'}
Parameters.FrontendSize.Description,Number of EC2 instances to launch for the Frontend server
Resources.AWS::EC2::VPC.Properties.CidrBlock,"{u'Fn::FindInMap': [u'SubnetConfig', u'VPC', u'CIDR']}"
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.packages.yum.httpd,[]
Resources.AWS::EC2::Subnet.Properties.Tags,"[{u'Value': {u'Ref': u'AWS::StackName'}, u'Key': u'Application'}, {u'Value': u'Private', u'Key': u'Network'}]"
Resources.AWS::IAM::AccessKey.Type,AWS::IAM::AccessKey
Resources.AWS::EC2::SubnetRouteTableAssociation.Type,AWS::EC2::SubnetRouteTableAssociation
Resources.AWS::EC2::SubnetRouteTableAssociation.Properties.SubnetId,{u'Ref': u'PrivateSubnet'}
Resources.AWS::EC2::RouteTable.Type,AWS::EC2::RouteTable
Parameters.FrontendSize.Default,1
Outputs.WebSite.Description,URL of the website
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./var/www/html/index.html.content,"{u'Fn::Join': [u'\n', [u'<img src=""https://s3.amazonaws.com/cloudformation-examples/cloudformation_graphic.png"" alt=""AWS CloudFormation Logo""/>', u'<h1>Congratulations, this request was served from the backend fleet</h1>']]}"
Resources.AWS::CloudFormation::WaitCondition.Type,AWS::CloudFormation::WaitCondition
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.LoadBalancerNames,[{u'Ref': u'PublicElasticLoadBalancer'}]
Resources.AWS::EC2::EIP.Properties.InstanceId,{u'Ref': u'NATDevice'}
Parameters.KeyName.AllowedPattern,[-_ a-zA-Z0-9]*
Resources.AWS::EC2::Instance.Properties.ImageId,"{u'Fn::FindInMap': [u'AWSNATAMI', {u'Ref': u'AWS::Region'}, u'AMI']}"
Resources.AWS::EC2::VPCGatewayAttachment.Properties.VpcId,{u'Ref': u'VPC'}
Outputs.Bastion.Value,{u'Ref': u'BastionIPAddress'}
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.services.sysvinit.httpd.enabled,true
