Resources.Custom::CognitoIdentityPool.Type,Custom::CognitoIdentityPool
Resources.AWS::S3::Bucket.DeletionPolicy,Retain
Resources.AWS::Lambda::Function.Properties.Description,Supports Cloud Canvas Resource Manager project operations.
Resources.Custom::LambdaConfiguration.Properties.Settings.ProjectStackArn,{u'Ref': u'AWS::StackId'}
Resources.Custom::AccessControl.DependsOn,"[u'CloudGemPortal', u'CloudGemPortalBucketPolicy', u'CloudGemPortalAdministratorRole', u'CloudGemPortalUserAccess', u'CloudGemPortalUserRole', u'Configuration', u'ConfigurationBucketPolicy', u'CoreResourceTypes', u'Logs', u'Helper', u'PlayerAccessTokenExchange', u'PlayerAccessTokenExchangeExecution', u'ProjectAccess', u'ProjectAdmin', u'ProjectAdminRestrictions', u'ProjectIdentityPool', u'ProjectIdentityPoolAuthenticatedRole', u'ProjectIdentityPoolUnauthenticatedRole', u'ProjectOwner', u'ProjectOwnerAccess', u'ProjectResourceHandler', u'ProjectResourceHandlerExecution', u'ProjectUserPool', u'ServiceApi', u'ServiceLambda', u'SeviceLambdaConfiguration', u'ServiceLambdaExecution']"
Resources.AWS::Lambda::Function.Properties.Timeout,30
Resources.Custom::ResourceTypes.Properties.Definitions.Custom::InterfaceDependencyResolver.HandlerFunction.Function,InterfaceDependencyResolver.handler
Resources.Custom::ServiceApi.Type,Custom::ServiceApi
Resources.AWS::Lambda::Function.Metadata.CloudCanvas.Permissions.Action,lambda:InvokeFunction
Resources.Custom::CognitoIdentityPool.Metadata.CloudCanvas.Identities,"[{u'ClientApp': u'CloudGemPortalApp', u'IdentityPoolLogicalName': u'ProjectIdentityPool'}]"
Resources.AWS::Lambda::Function.Properties.Handler,cgf_lambda_service.dispatch
Outputs.ServiceUrl.Description,The service url.
Resources.AWS::Lambda::Function.Properties.Code.S3Bucket,"{u'Fn::GetAtt': [u'ServiceLambdaConfiguration', u'ConfigurationBucket']}"
Resources.Custom::CognitoIdentityPool.Properties.RoleMappings.Cognito.Type,Token
Resources.Custom::ResourceTypes.Properties.Definitions.AWS::DynamoDB::Table.ArnFormat,arn:aws:dynamodb:{region}:{account_id}:table/{resource_name}
Resources.Custom::CognitoIdentityPool.Properties.Roles.unauthenticated,"{u'Fn::GetAtt': [u'ProjectIdentityPoolUnauthenticatedRole', u'Arn']}"
Resources.Custom::CognitoIdentityPool.Properties.IdentityPoolName,ProjectIdentityPool
Resources.Custom::ResourceTypes.Properties.Definitions.Custom::DynamoDBTable.HandlerFunction.Function,Custom_SafeTable.handler
Resources.AWS::Lambda::Function.Properties.MemorySize,1024
Resources.Custom::CognitoUserPool.Properties.ClientApps,[u'CloudGemPortalApp']
Resources.Custom::ServiceApi.Properties.ServiceToken,"{u'Fn::Join': [u'', [u'arn:aws:lambda:', {u'Ref': u'AWS::Region'}, u':', {u'Ref': u'AWS::AccountId'}, u':function:', {u'Ref': u'ProjectResourceHandler'}]]}"
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Version,2012-10-17
Resources.Custom::ServiceApi.Properties.ConfigurationBucket,{u'Ref': u'Configuration'}
Resources.AWS::S3::Bucket.Properties.CorsConfiguration.CorsRules,"[{u'AllowedHeaders': [u'x-amz-date', u'x-amz-user-agent', u'authorization', u'x-amz-security-token', u'x-amz-content-sha256'], u'MaxAge': 3000, u'AllowedMethods': [u'GET'], u'Id': u'CGP_CORS_Policy', u'AllowedOrigins': [u'*']}]"
Parameters.CloudGemPortalTableWriteCapacityUnits.Default,1
Resources.Custom::ResourceTypes.Properties.LambdaTimeout,300
Resources.AWS::IAM::ManagedPolicy.Type,AWS::IAM::ManagedPolicy
Parameters.CloudGemPortalTableWriteCapacityUnits.Description,Number of writes per second.
Resources.AWS::IAM::ManagedPolicy.Properties.Roles,"[{u'Fn::GetAtt': [u'ServiceLambdaConfiguration', u'RoleName']}]"
Resources.Custom::ResourceTypes.Properties.ServiceToken,"{u'Fn::GetAtt': [u'ProjectResourceHandler', u'Arn']}"
Resources.Custom::ResourceTypes.Properties.Definitions.AWS::Lambda::Function.ArnFormat,arn:aws:lambda:{region}:{account_id}:function:{resource_name}
Resources.Custom::AccessControl.Type,Custom::AccessControl
Resources.Custom::ResourceTypes.Properties.Definitions.Custom::InterfaceDependencyResolver.HandlerFunction.PolicyStatement,"[{u'Action': [u'lambda:GetFunctionConfiguration', u'lambda:UpdateFunctionConfiguration'], u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:lambda:', {u'Ref': u'AWS::Region'}, u':', {u'Ref': u'AWS::AccountId'}, u':function:*']]}], u'Effect': u'Allow', u'Sid': u'ManageLambdaConfiguration'}, {u'Action': [u'cloudformation:ListStackResources', u'cloudformation:DescribeStackResource', u'cloudformation:DescribeStacks', u'cloudformation:GetTemplate'], u'Resource': [u'*'], u'Effect': u'Allow', u'Sid': u'DescribeStacksAndResources'}, {u'Action': [u's3:GetObject'], u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'Configuration'}, u'/deployment/*/service-directory/*']]}, {u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'Configuration'}, u'/service-directory/*']]}], u'Effect': u'Allow', u'Sid': u'ReadServiceDirectoryData'}, {u'Action': [u's3:ListBucket'], u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'Configuration'}]]}], u'Effect': u'Allow', u'Sid': u'ListServiceDirectoryData'}, {u'Action': [u's3:ListBucket'], u'Resource': {u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'Configuration'}]]}, u'Effect': u'Allow', u'Sid': u'ListConfigurationBucketObjects'}, {u'Action': [u'iam:CreateRole', u'iam:DeleteRole', u'iam:GetRole', u'iam:DeleteRolePolicy', u'iam:PutRolePolicy', u'iam:ListRolePolicies', u'iam:ListRoles'], u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:iam::', {u'Ref': u'AWS::AccountId'}, u':role/', {u'Ref': u'AWS::StackName'}, u'/*']]}, {u'Fn::Join': [u'', [u'arn:aws:iam::', {u'Ref': u'AWS::AccountId'}, u':role/', {u'Ref': u'AWS::StackName'}, u'-*']]}], u'Effect': u'Allow', u'Sid': u'ManageLambdaRoles'}]"
Resources.AWS::IAM::ManagedPolicy.Properties.PolicyDocument.Version,2012-10-17
Resources.AWS::IAM::Role.Properties.ManagedPolicyArns,[{u'Ref': u'CloudGemPortalUserAccess'}]
Resources.Custom::CognitoUserPool.Properties.AllowAdminCreateUserOnly,true
Resources.AWS::S3::Bucket.Properties.LoggingConfiguration.LogFilePrefix,CloudGemPortal/
Resources.Custom::LambdaConfiguration.Properties.Runtime,python2.7
Resources.Custom::LambdaConfiguration.Properties.ServiceToken,"{u'Fn::Join': [u'', [u'arn:aws:lambda:', {u'Ref': u'AWS::Region'}, u':', {u'Ref': u'AWS::AccountId'}, u':function:', {u'Ref': u'ProjectResourceHandler'}]]}"
Resources.Custom::CognitoUserPool.Metadata.CloudCanvas.Identities,"[{u'ClientApp': u'CloudGemPortalApp', u'IdentityPoolLogicalName': u'ProjectIdentityPool'}]"
Resources.Custom::ResourceTypes.Properties.Definitions.Custom::ResourceGroupConfiguration.HandlerFunction.Function,Custom_ResourceGroupConfiguration.handler
Resources.AWS::S3::Bucket.Properties.VersioningConfiguration.Status,Enabled
Resources.Custom::ResourceTypes.Properties.Definitions.Custom::AccessControl.HandlerFunction.PolicyStatement,"[{u'Action': [u'iam:CreateRole', u'iam:DeleteRole', u'iam:GetRole', u'iam:DeleteRolePolicy', u'iam:PutRolePolicy', u'iam:ListRolePolicies', u'iam:ListRoles'], u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:iam::', {u'Ref': u'AWS::AccountId'}, u':role/', {u'Ref': u'AWS::StackName'}, u'/*']]}, {u'Fn::Join': [u'', [u'arn:aws:iam::', {u'Ref': u'AWS::AccountId'}, u':role/', {u'Ref': u'AWS::StackName'}, u'-*']]}], u'Effect': u'Allow', u'Sid': u'ManageAccessControlRoles'}, {u'Action': [u'cloudformation:ListStackResources', u'cloudformation:DescribeStackResource', u'cloudformation:DescribeStacks', u'cloudformation:GetTemplate'], u'Resource': [u'*'], u'Effect': u'Allow', u'Sid': u'DescribeStacksAndResources'}, {u'Action': [u's3:GetObject', u's3:ListBucket'], u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'Configuration'}]]}, {u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'Configuration'}, u'/upload/*']]}, {u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'Configuration'}, u'/resource-definitions/*']]}], u'Effect': u'Allow', u'Sid': u'ReadConfiguration'}, {u'Action': [u'lambda:InvokeFunction'], u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:lambda:', {u'Ref': u'AWS::Region'}, u':', {u'Ref': u'AWS::AccountId'}, u':function:*']]}], u'Effect': u'Allow', u'Sid': u'InvokeArnLambdas'}]"
Outputs.ServiceUrl.Value,"{u'Fn::GetAtt': [u'ServiceApi', u'Url']}"
Resources.Custom::ResourceTypes.Properties.Definitions.Custom::ResourceGroupConfiguration.ArnFormat,*
Resources.Custom::CognitoIdentityPool.Properties.AllowUnauthenticatedIdentities,true
Resources.AWS::Lambda::Function.Metadata.CloudCanvas.Permissions.AbstractRole,ServiceApi
Resources.Custom::ResourceTypes.Properties.Definitions.AWS::S3::Bucket.ArnFormat,arn:aws:s3:::{resource_name}
Parameters.CloudGemPortalTableReadCapacityUnits.Description,Number of reads per second.
Resources.Custom::ServiceApi.DependsOn,[u'CoreResourceTypes']
Resources.Custom::AccessControl.Properties.ConfigurationBucket,{u'Ref': u'Configuration'}
Resources.AWS::Lambda::Function.Type,AWS::Lambda::Function
Resources.Custom::ResourceTypes.Properties.Definitions.Custom::CognitoUserPool.HandlerFunction.PolicyStatement,"[{u'Action': u'cognito-idp:*', u'Resource': {u'Fn::Join': [u'', [u'arn:aws:cognito-idp:', {u'Ref': u'AWS::Region'}, u':', {u'Ref': u'AWS::AccountId'}, u':userpool/*']]}, u'Effect': u'Allow', u'Sid': u'CreateUpdateCognitoUserPool'}, {u'Action': [u'cognito-idp:CreateUserPool'], u'Resource': u'*', u'Effect': u'Allow', u'Sid': u'CreateCognitoUserPools'}, {u'Action': [u'cognito-identity:*'], u'Resource': {u'Fn::Join': [u'', [u'arn:aws:cognito-identity:', {u'Ref': u'AWS::Region'}, u':', {u'Ref': u'AWS::AccountId'}, u':identitypool/*']]}, u'Effect': u'Allow', u'Sid': u'CreateUpdateCognitoIdentity'}, {u'Action': u'iam:PassRole', u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:iam::', {u'Ref': u'AWS::AccountId'}, u':role/', {u'Ref': u'AWS::StackName'}, u'/*']]}, {u'Fn::Join': [u'', [u'arn:aws:iam::', {u'Ref': u'AWS::AccountId'}, u':role/', {u'Ref': u'AWS::StackName'}, u'-*']]}], u'Effect': u'Allow', u'Sid': u'PassRolesToServices'}, {u'Action': [u'cloudformation:ListStackResources', u'cloudformation:DescribeStackResource', u'cloudformation:DescribeStacks', u'cloudformation:GetTemplate'], u'Resource': [u'*'], u'Effect': u'Allow', u'Sid': u'DescribeStacksAndResources'}]"
Resources.Custom::CognitoIdentityPool.Properties.ServiceToken,"{u'Fn::Join': [u'', [u'arn:aws:lambda:', {u'Ref': u'AWS::Region'}, u':', {u'Ref': u'AWS::AccountId'}, u':function:', {u'Ref': u'ProjectResourceHandler'}]]}"
Resources.Custom::LambdaConfiguration.Properties.ConfigurationBucket,{u'Ref': u'Configuration'}
Resources.Custom::ResourceTypes.Properties.Definitions.Custom::CognitoUserPool.HandlerFunction.Function,Custom_CognitoUserPool.handler
Resources.Custom::ResourceTypes.Properties.Definitions.AWS::SQS::Queue.ArnFunction.PolicyStatement,"[{u'Action': [u'sqs:GetQueueAttributes'], u'Resource': {u'Fn::Join': [u'', [u'arn:aws:sqs:', {u'Ref': u'AWS::Region'}, u':', {u'Ref': u'AWS::AccountId'}, u':*']]}, u'Effect': u'Allow', u'Sid': u'DescribeQueue'}]"
Resources.Custom::ResourceTypes.Properties.Definitions.Custom::DynamoDBTable.HandlerFunction.PolicyStatement,"[{u'Action': [u'dynamodb:CreateTable', u'dynamodb:DeleteTable', u'dynamodb:UpdateTable'], u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:dynamodb:', {u'Ref': u'AWS::Region'}, u':', {u'Ref': u'AWS::AccountId'}, u':table/*']]}], u'Effect': u'Allow', u'Sid': u'ManageTables'}, {u'Action': [u'dynamodb:ListTables', u'dynamodb:DescribeTable'], u'Resource': [u'*'], u'Effect': u'Allow', u'Sid': u'GetTableInfo'}, {u'Action': [u'cloudformation:ListStackResources', u'cloudformation:DescribeStackResource', u'cloudformation:DescribeStacks', u'cloudformation:GetTemplate'], u'Resource': [u'*'], u'Effect': u'Allow', u'Sid': u'DescribeStacksAndResources'}]"
Resources.Custom::ResourceTypes.Properties.Definitions.Custom::ServiceApi.HandlerFunction.Function,Custom_ServiceApi.handler
Resources.Custom::CognitoIdentityPool.Properties.UseAuthSettingsObject,false
Resources.Custom::ResourceTypes.Properties.Definitions.AWS::SNS::Topic.ArnFormat,arn:aws:sns:{region}:{account_id}:{resource_name}
Resources.Custom::ResourceTypes.Properties.Definitions.Custom::EmptyDeployment.HandlerFunction.Function,Custom_EmptyDeployment.handler
Resources.AWS::IAM::Role.Properties.Policies,"[{u'PolicyName': u'ProjectAccess', u'PolicyDocument': {u'Version': u'2012-10-17', u'Statement': [{u'Action': [u'lambda:*'], u'Resource': u'*', u'Effect': u'Allow', u'Sid': u'InvokeServiceLambdas'}, {u'Action': [u'cloudformation:ListStackResources', u'cloudformation:DescribeStackResource', u'cloudformation:DescribeStacks', u'cloudformation:GetTemplate'], u'Resource': [u'*'], u'Effect': u'Allow', u'Sid': u'DescribeStacksAndResources'}, {u'Action': u'iam:PassRole', u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:iam::', {u'Ref': u'AWS::AccountId'}, u':role/', {u'Ref': u'AWS::StackName'}, u'/*']]}, {u'Fn::Join': [u'', [u'arn:aws:iam::', {u'Ref': u'AWS::AccountId'}, u':role/', {u'Ref': u'AWS::StackName'}, u'-*']]}], u'Effect': u'Allow', u'Sid': u'PassRolesToServices'}, {u'Action': [u's3:GetObject', u's3:PutObject'], u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'Configuration'}, u'/upload/*']]}, {u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'Configuration'}, u'/resource-definitions/*']]}, {u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'Configuration'}, u'/project-settings.json']]}, {u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'Configuration'}, u'/resource-settings/*']]}], u'Effect': u'Allow', u'Sid': u'ReadAndWriteUploadedConfiguration'}, {u'Action': [u's3:GetObject'], u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'Configuration'}, u'/deployment/*/service-directory/*']]}, {u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'Configuration'}, u'/service-directory/*']]}], u'Effect': u'Allow', u'Sid': u'ReadServiceDirectoryData'}, {u'Action': [u's3:ListBucket'], u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'Configuration'}]]}], u'Effect': u'Allow', u'Condition': {u'StringLike': {u's3:prefix': [u'deployment/*/service-directory/*', u'service-directory/*']}}, u'Sid': u'ListServiceDirectoryData'}, {u'Action': [u's3:ListBucket'], u'Resource': {u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'Configuration'}]]}, u'Effect': u'Allow', u'Sid': u'ListConfigurationObjects'}, {u'Action': [u's3:GetObject'], u'Resource': {u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'Configuration'}, u'/player-access/auth-settings.json']]}, u'Effect': u'Allow', u'Sid': u'ReadPlayerAccessConfiguration'}, {u'Action': [u'logs:CreateLogGroup', u'logs:CreateLogStream', u'logs:PutLogEvents'], u'Resource': u'arn:aws:logs:*:*:*', u'Effect': u'Allow', u'Sid': u'WriteLogs'}, {u'Action': [u'iam:CreateRole', u'iam:DeleteRole', u'iam:GetRole', u'iam:DeleteRolePolicy', u'iam:PutRolePolicy', u'iam:ListRolePolicies', u'iam:ListRoles'], u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:iam::', {u'Ref': u'AWS::AccountId'}, u':role/', {u'Ref': u'AWS::StackName'}, u'/*']]}, {u'Fn::Join': [u'', [u'arn:aws:iam::', {u'Ref': u'AWS::AccountId'}, u':role/', {u'Ref': u'AWS::StackName'}, u'-*']]}], u'Effect': u'Allow', u'Sid': u'ManageAccessControlRoles'}]}}]"
Resources.AWS::S3::BucketPolicy.Properties.Bucket,{u'Ref': u'Configuration'}
Resources.Custom::ServiceApi.Properties.ConfigurationKey,{u'Ref': u'ConfigurationKey'}
Resources.Custom::CognitoUserPool.Metadata.CloudCanvas.Permissions,"[{u'Action': [u'cognito-idp:AdminAddUserToGroup', u'cognito-idp:AdminCreateUser', u'cognito-idp:AdminDeleteUser', u'cognito-idp:AdminGetUser', u'cognito-idp:AdminListGroupsForUser', u'cognito-idp:AdminResetUserPassword', u'cognito-idp:ListUsers', u'cognito-idp:ListUsersInGroup'], u'AbstractRole': u'CloudGemPortalAdministratorRole'}]"
Resources.Custom::CognitoUserPool.Properties.PoolName,ProjectUserPool
Resources.Custom::CognitoUserPool.Type,Custom::CognitoUserPool
Resources.Custom::AccessControl.Properties.ServiceToken,"{u'Fn::Join': [u'', [u'arn:aws:lambda:', {u'Ref': u'AWS::Region'}, u':', {u'Ref': u'AWS::AccountId'}, u':function:', {u'Ref': u'ProjectResourceHandler'}]]}"
Resources.Custom::AccessControl.Properties.ConfigurationKey,{u'Ref': u'ConfigurationKey'}
Resources.Custom::ServiceApi.Properties.SwaggerSettings.ServiceLambdaArn,"{u'Fn::GetAtt': [u'ServiceLambda', u'Arn']}"
Resources.Custom::Helper.Properties.ServiceToken,"{u'Fn::Join': [u'', [u'arn:aws:lambda:', {u'Ref': u'AWS::Region'}, u':', {u'Ref': u'AWS::AccountId'}, u':function:', {u'Ref': u'ProjectResourceHandler'}]]}"
Resources.Custom::ResourceTypes.Properties.Definitions.Custom::CognitoIdentityPool.HandlerFunction.PolicyStatement,"[{u'Action': [u'cognito-identity:*'], u'Resource': {u'Fn::Join': [u'', [u'arn:aws:cognito-identity:', {u'Ref': u'AWS::Region'}, u':', {u'Ref': u'AWS::AccountId'}, u':identitypool/*']]}, u'Effect': u'Allow', u'Sid': u'CreateUpdateCognitoIdentity'}, {u'Action': [u'cognito-idp:ListUserPoolClients', u'cognito-idp:DescribeUserPoolClient'], u'Resource': {u'Fn::Join': [u'', [u'arn:aws:cognito-idp:', {u'Ref': u'AWS::Region'}, u':', {u'Ref': u'AWS::AccountId'}, u':userpool/*']]}, u'Effect': u'Allow', u'Sid': u'ListCognitoUserPools'}, {u'Action': [u'cloudformation:ListStackResources', u'cloudformation:DescribeStackResource', u'cloudformation:DescribeStacks', u'cloudformation:GetTemplate'], u'Resource': [u'*'], u'Effect': u'Allow', u'Sid': u'DescribeStacksAndResources'}, {u'Action': u'iam:PassRole', u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:iam::', {u'Ref': u'AWS::AccountId'}, u':role/', {u'Ref': u'AWS::StackName'}, u'/*']]}, {u'Fn::Join': [u'', [u'arn:aws:iam::', {u'Ref': u'AWS::AccountId'}, u':role/', {u'Ref': u'AWS::StackName'}, u'-*']]}], u'Effect': u'Allow', u'Sid': u'PassRolesToServices'}]"
Parameters.CloudCanvasStack.Description,Identifies this stack as a Lumberyard Cloud Canvas managed stack.
Resources.Custom::ServiceApi.Properties.CacheClusterSize,{u'Ref': u'ServiceApiCacheClusterSize'}
Resources.AWS::IAM::ManagedPolicy.Properties.Path,"{u'Fn::Join': [u'', [u'/', {u'Ref': u'AWS::StackName'}, u'/']]}"
Resources.Custom::ResourceTypes.Properties.Definitions.AWS::RDS::DBInstance.ArnFormat,arn:aws:rds:{region}:{account_id}:db:{resource_name}
Resources.Custom::ResourceTypes.Properties.Definitions.Custom::DynamoDBTable.ArnFormat,arn:aws:dynamodb:{region}:{account_id}:table/{resource_name}
Resources.Custom::ResourceTypes.Properties.Definitions.Custom::Helper.ArnFormat,*
Resources.Custom::Helper.Properties.Input.LowerCaseStackName,{u'HelperFn::LowerCase': {u'Ref': u'AWS::StackName'}}
Resources.AWS::S3::Bucket.Properties.LoggingConfiguration.DestinationBucketName,{u'Ref': u'Logs'}
Parameters.ServiceApiCacheClusterEnabled.Type,String
Resources.AWS::IAM::ManagedPolicy.Properties.PolicyDocument.Statement,"[{u'Action': [u'iam:AttachRolePolicy', u'iam:DetachRolePolicy', u'iam:CreatePolicy', u'iam:CreatePolicyVersion', u'iam:CreateRole', u'iam:DeletePolicy', u'iam:DeletePolicyVersion', u'iam:DeleteRole', u'iam:DeleteRolePolicy', u'iam:GetPolicy', u'iam:GetRole', u'iam:GetRolePolicy', u'iam:ListPolicyVersions', u'iam:ListRolePolicies', u'iam:PassRole', u'iam:PutRolePolicy'], u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:iam::', {u'Ref': u'AWS::AccountId'}, u':role/', {u'Ref': u'AWS::StackName'}, u'/*']]}, {u'Fn::Join': [u'', [u'arn:aws:iam::', {u'Ref': u'AWS::AccountId'}, u':policy/', {u'Ref': u'AWS::StackName'}, u'/*']]}], u'Effect': u'Allow', u'Sid': u'CreateAndManageProjectAndDeploymentRoles'}, {u'Action': u'lambda:CreateFunction', u'Resource': u'*', u'Effect': u'Allow', u'Sid': u'CreateLambdaFunctions'}, {u'Action': [u'cloudformation:DescribeStacks', u'cloudformation:DescribeStackEvents', u'cloudformation:GetTemplate', u'cloudformation:CreateStack', u'cloudformation:UpdateStack', u'cloudformation:DeleteStack'], u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:cloudformation:', {u'Ref': u'AWS::Region'}, u':', {u'Ref': u'AWS::AccountId'}, u':stack/', {u'Ref': u'AWS::StackName'}, u'-*']]}], u'Effect': u'Allow', u'Sid': u'CreateUpdateAndDeleteDeploymentAndResourceGroupStacks'}, {u'Action': [u'lambda:InvokeFunction'], u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:lambda:', {u'Ref': u'AWS::Region'}, u':', {u'Ref': u'AWS::AccountId'}, u':function:', {u'Ref': u'ProjectResourceHandler'}]]}], u'Effect': u'Allow', u'Sid': u'InvokeProjectResourceHandler'}, {u'Action': [u's3:*'], u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'Configuration'}]]}, {u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'Logs'}]]}], u'Effect': u'Allow', u'Sid': u'FullAccessToProjectConfigurationAndLogs'}, {u'Action': [u'logs:*'], u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:logs:', {u'Ref': u'AWS::Region'}, u':', {u'Ref': u'AWS::AccountId'}, u':log-group:/aws/lambda/', {u'Ref': u'AWS::StackName'}, u'-*']]}], u'Effect': u'Allow', u'Sid': u'FullAccessToProjectDeploymentAndResourceGroupLogs'}, {u'Action': [u'dynamodb:*', u's3:*', u'sqs:*', u'sns:*', u'lambda:*', u'cognito-idp:*'], u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:dynamodb:', {u'Ref': u'AWS::Region'}, u':', {u'Ref': u'AWS::AccountId'}, u':table/', {u'Ref': u'AWS::StackName'}, u'-*']]}, {u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Fn::GetAtt': [u'Helper', u'LowerCaseStackName']}, u'-*']]}, {u'Fn::Join': [u'', [u'arn:aws:sqs:', {u'Ref': u'AWS::Region'}, u':', {u'Ref': u'AWS::AccountId'}, u':', {u'Ref': u'AWS::StackName'}, u'-*']]}, {u'Fn::Join': [u'', [u'arn:aws:sns:*:', {u'Ref': u'AWS::AccountId'}, u':', {u'Ref': u'AWS::StackName'}, u'-*']]}, {u'Fn::Join': [u'', [u'arn:aws:lambda:', {u'Ref': u'AWS::Region'}, u':', {u'Ref': u'AWS::AccountId'}, u':function:', {u'Ref': u'AWS::StackName'}, u'-*']]}, {u'Fn::Join': [u'', [u'arn:aws:cognito-idp:', {u'Ref': u'AWS::Region'}, u':', {u'Ref': u'AWS::AccountId'}, u':userpool/*']]}], u'Effect': u'Allow', u'Sid': u'FullAccessToProjectDeploymentAndResourceGroupResources'}, {u'Action': [u'cloudformation:DescribeStackEvents', u'cloudformation:DescribeStacks', u'cloudformation:GetTemplate', u'cloudformation:UpdateStack'], u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:cloudformation:', {u'Ref': u'AWS::Region'}, u':', {u'Ref': u'AWS::AccountId'}, u':stack/', {u'Ref': u'AWS::StackName'}, u'/*']]}], u'Effect': u'Allow', u'Sid': u'UpdateProjectStack'}]"
Resources.Custom::ResourceTypes.Properties.Definitions.Custom::EmptyDeployment.ArnFormat,*
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Statement,"[{u'Action': u'sts:AssumeRole', u'Effect': u'Allow', u'Principal': {u'Service': u'lambda.amazonaws.com'}}]"
Resources.Custom::ResourceTypes.Properties.Definitions.AWS::SQS::Queue.ArnFunction.Function,AWS_SQS_Queue.arn_handler
Resources.Custom::CognitoIdentityPool.Properties.RoleMappings.Cognito.AmbiguousRoleResolution,AuthenticatedRole
Resources.Custom::CognitoUserPool.Properties.ConfigurationKey,{u'Ref': u'ConfigurationKey'}
Parameters.CloudCanvasStack.Default,Project
Resources.Custom::ResourceTypes.Properties.LambdaConfiguration,"{u'Fn::GetAtt': [u'ServiceLambdaConfiguration', u'ComposedLambdaConfiguration']}"
Resources.AWS::S3::BucketPolicy.Properties.PolicyDocument.Version,2012-10-17
Resources.Custom::Helper.Type,Custom::Helper
Parameters.ServiceApiCacheClusterSize.Description,Indicates whether cache clustering is enabled for the service API.
Resources.Custom::ResourceTypes.Properties.Definitions.Custom::ServiceApi.PermissionMetadata.DefaultRoleMappings,"[{u'Action': u'execute-api:*', u'ResourceSuffix': u'/*', u'AbstractRole': [u'DeploymentAdmin', u'ProjectAdmin']}]"
Parameters.ConfigurationKey.Type,String
Resources.Custom::ResourceTypes.Properties.Definitions.Custom::InterfaceDependencyResolver.ArnFormat,*
Parameters.CloudGemPortalTableWriteCapacityUnits.Type,Number
Parameters.CloudGemPortalTableReadCapacityUnits.Default,1
Resources.Custom::ResourceTypes.Properties.Definitions.Custom::CognitoUserPool.ArnFormat,arn:aws:cognito-idp:{region}:{account_id}:userpool/{resource_name}
Resources.Custom::CognitoUserPool.Properties.ServiceToken,"{u'Fn::Join': [u'', [u'arn:aws:lambda:', {u'Ref': u'AWS::Region'}, u':', {u'Ref': u'AWS::AccountId'}, u':function:', {u'Ref': u'ProjectResourceHandler'}]]}"
Resources.Custom::ResourceTypes.Properties.Definitions.Custom::AccessControl.ArnFormat,*
Resources.Custom::ResourceTypes.Properties.Definitions.Custom::ServiceApi.ArnFunction.Function,Custom_ServiceApi.arn_handler
Resources.Custom::ResourceTypes.Properties.Definitions.Custom::Helper.HandlerFunction.Function,Custom_Helper.handler
Resources.Custom::ResourceTypes.Properties.Definitions.Custom::CognitoIdentityPool.ArnFormat,*
Resources.Custom::CognitoIdentityPool.Properties.ConfigurationBucket,{u'Ref': u'Configuration'}
Resources.Custom::CognitoIdentityPool.DependsOn,"[u'ProjectUserPool', u'CoreResourceTypes']"
Resources.AWS::IAM::Role.Metadata.CloudCanvas.RoleMappings,[]
Resources.Custom::LambdaConfiguration.Properties.FunctionName,ServiceLambda
Resources.Custom::LambdaConfiguration.Type,Custom::LambdaConfiguration
Resources.AWS::Lambda::Function.Properties.Code.S3Key,"{u'Fn::GetAtt': [u'ServiceLambdaConfiguration', u'ConfigurationKey']}"
Parameters.ServiceApiCacheClusterEnabled.Default,false
Resources.Custom::ResourceTypes.Properties.Definitions.Custom::ServiceApi.HandlerFunction.PolicyStatement,"[{u'Action': u'apigateway:*', u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:apigateway:', {u'Ref': u'AWS::Region'}, u'::/restapis/*']]}, {u'Fn::Join': [u'', [u'arn:aws:apigateway:', {u'Ref': u'AWS::Region'}, u'::/restapis']]}], u'Effect': u'Allow', u'Sid': u'ManageAPIGatewayResources'}, {u'Action': [u'cloudformation:ListStackResources', u'cloudformation:DescribeStackResource', u'cloudformation:DescribeStacks', u'cloudformation:GetTemplate'], u'Resource': [u'*'], u'Effect': u'Allow', u'Sid': u'DescribeStacksAndResources'}, {u'Action': [u's3:GetObject', u's3:ListBucket'], u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'Configuration'}, u'/upload/*']]}, {u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'Configuration'}, u'/resource-definitions/*']]}], u'Effect': u'Allow', u'Sid': u'ReadConfiguration'}, {u'Action': [u's3:PutObject', u's3:GetObject', u's3:DeleteObject'], u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'Configuration'}, u'/deployment/*/service-directory/*']]}, {u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'Configuration'}, u'/service-directory/*']]}], u'Effect': u'Allow', u'Sid': u'ManageServiceDirectoryData'}, {u'Action': [u's3:ListBucket'], u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'Configuration'}]]}], u'Effect': u'Allow', u'Sid': u'ListServiceDirectoryData'}, {u'Action': [u'iam:CreateRole', u'iam:DeleteRole', u'iam:GetRole', u'iam:DeleteRolePolicy', u'iam:PutRolePolicy', u'iam:ListRolePolicies', u'iam:ListRoles'], u'Resource': {u'Fn::Join': [u'', [u'arn:aws:iam::', {u'Ref': u'AWS::AccountId'}, u':role/', {u'Ref': u'AWS::StackName'}, u'/*']]}, u'Effect': u'Allow', u'Sid': u'ManageAccessControlRoles'}, {u'Action': u'iam:PassRole', u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:iam::', {u'Ref': u'AWS::AccountId'}, u':role/', {u'Ref': u'AWS::StackName'}, u'/*']]}, {u'Fn::Join': [u'', [u'arn:aws:iam::', {u'Ref': u'AWS::AccountId'}, u':role/', {u'Ref': u'AWS::StackName'}, u'-*']]}], u'Effect': u'Allow', u'Sid': u'PassRolesToServices'}]"
Resources.Custom::CognitoUserPool.DependsOn,[u'CoreResourceTypes']
Resources.AWS::IAM::Role.Properties.Path,"{u'Fn::Join': [u'', [u'/', {u'Ref': u'AWS::StackName'}, u'/']]}"
Resources.AWS::IAM::Role.Type,AWS::IAM::Role
Resources.AWS::S3::Bucket.Type,AWS::S3::Bucket
Parameters.CloudCanvasStack.Type,String
Parameters.ServiceApiCacheClusterEnabled.Description,Indicates whether cache clustering is enabled for the service API.
Resources.Custom::ResourceTypes.Type,Custom::ResourceTypes
Resources.Custom::CognitoUserPool.Properties.RefreshTokenValidity,1
Metadata.CloudCanvas.Id,$Revision: #1 $
Resources.Custom::ResourceTypes.Properties.Definitions.Custom::CognitoIdentityPool.HandlerFunction.Function,Custom_CognitoIdentityPool.handler
Resources.Custom::CognitoUserPool.Properties.Groups,"[{u'Role': {u'Fn::GetAtt': [u'CloudGemPortalAdministratorRole', u'Arn']}, u'Name': u'administrator', u'Precedence': u'0', u'Description': u'The Cloud Gem Portal administrators group.'}, {u'Role': {u'Fn::GetAtt': [u'CloudGemPortalUserRole', u'Arn']}, u'Name': u'user', u'Precedence': u'10', u'Description': u'The Cloud Gem Portal users group.'}]"
Resources.Custom::Helper.DependsOn,[u'CoreResourceTypes']
Resources.Custom::LambdaConfiguration.Properties.Settings.ProjectConfigurationBucket,{u'Ref': u'Configuration'}
Resources.AWS::S3::BucketPolicy.Type,AWS::S3::BucketPolicy
Resources.Custom::CognitoIdentityPool.Properties.ConfigurationKey,{u'Ref': u'ConfigurationKey'}
Parameters.CloudGemPortalTableReadCapacityUnits.Type,Number
Resources.AWS::S3::BucketPolicy.Properties.PolicyDocument.Statement,"[{u'Action': u's3:*', u'Resource': [{u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'Configuration'}]]}, {u'Fn::Join': [u'', [u'arn:aws:s3:::', {u'Ref': u'Configuration'}, u'/*']]}], u'Effect': u'Deny', u'Condition': {u'Bool': {u'aws:SecureTransport': u'false'}}, u'Principal': u'*'}]"
Resources.AWS::Lambda::Function.Properties.Runtime,"{u'Fn::GetAtt': [u'ServiceLambdaConfiguration', u'Runtime']}"
Parameters.ServiceApiCacheClusterSize.Type,String
Resources.AWS::Lambda::Function.Properties.Role,"{u'Fn::GetAtt': [u'ServiceLambdaConfiguration', u'Role']}"
Resources.Custom::LambdaConfiguration.Properties.ConfigurationKey,{u'Ref': u'ConfigurationKey'}
Resources.AWS::S3::Bucket.Properties.AccessControl,LogDeliveryWrite
Resources.Custom::CognitoIdentityPool.Properties.Roles.authenticated,"{u'Fn::GetAtt': [u'ProjectIdentityPoolAuthenticatedRole', u'Arn']}"
Resources.Custom::ResourceTypes.Properties.Definitions.Custom::AccessControl.HandlerFunction.Function,Custom_AccessControl.handler
Parameters.ConfigurationKey.Description,Location in the configuration bucket of configuration data.
Resources.Custom::ServiceApi.Properties.CacheClusterEnabled,{u'Ref': u'ServiceApiCacheClusterEnabled'}
Resources.AWS::S3::Bucket.Properties.LifecycleConfiguration.Rules,"[{u'Status': u'Enabled', u'Id': u'DeleteOldLogs', u'ExpirationInDays': 14}]"
Parameters.ServiceApiCacheClusterSize.Default,0.5
