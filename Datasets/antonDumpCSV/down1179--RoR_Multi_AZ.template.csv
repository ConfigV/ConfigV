Parameters.DBPassword.MaxLength,41
Parameters.DBName.ConstraintDescription,must begin with a letter and contain only alphanumeric characters.
Parameters.DBUsername.Description,Username for MySQL database access
Parameters.DBAllocatedStorage.Type,Number
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.AvailabilityZones,{u'Fn::GetAZs': u''}
Resources.AWS::RDS::DBInstance.Properties.MasterUsername,{u'Ref': u'DBUsername'}
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.packages.yum.mysql-devel,[]
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.MinSize,1
Parameters.MultiAZDatabase.Default,true
Parameters.SSHLocation.ConstraintDescription,must be a valid IP CIDR range of the form x.x.x.x/x.
Parameters.KeyName.ConstraintDescription,"can contain only alphanumeric characters, spaces, dashes and underscores."
Parameters.DBInstanceClass.ConstraintDescription,must select a valid database instance type.
Parameters.DBInstanceClass.Default,db.m1.small
Parameters.KeyName.MaxLength,64
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.packages.yum.ruby-devel,[]
Parameters.DBName.Description,MySQL database name
Resources.AWS::AutoScaling::LaunchConfiguration.Properties.SecurityGroups,[{u'Ref': u'WebServerSecurityGroup'}]
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.DesiredCapacity,{u'Ref': u'WebServerCapacity'}
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.packages.rubygems.rails,[u'3.2.14']
Parameters.SSHLocation.Description, The IP address range that can be used to SSH to the EC2 instances
Resources.AWS::CloudFormation::WaitCondition.Properties.Timeout,1500
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.packages.yum.mysql,[]
Parameters.DBUsername.ConstraintDescription,must begin with a letter and contain only alphanumeric characters.
Parameters.DBPassword.AllowedPattern,[a-zA-Z0-9]*
Parameters.SSHLocation.AllowedPattern,"(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})"
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Metadata.Comment,Configure the Load Balancer with a simple health check and cookie-based stickiness
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.HealthCheck.UnhealthyThreshold,5
Resources.AWS::AutoScaling::LaunchConfiguration.Properties.UserData,"{u'Fn::Base64': {u'Fn::Join': [u'', [u'#!/bin/bash -v\n', u'yum update -y aws-cfn-bootstrap\n', u'# Helper function\n', u'function error_exit\n', u'{\n', u'  /opt/aws/bin/cfn-signal -e 1 -r ""$1"" \'', {u'Ref': u'WaitHandle'}, u""'\n"", u'  exit 1\n', u'}\n', u'# Install Rails packages\n', u'/opt/aws/bin/cfn-init -s ', {u'Ref': u'AWS::StackId'}, u' -r LaunchConfig ', u'    --region ', {u'Ref': u'AWS::Region'}, u"" || error_exit 'Failed to run cfn-init'\n"", u'# Install anu other Gems, create the database and run a migration\n', u'cd /home/ec2-user/sample\n', u""bundle install  || error_exit 'Failed to install bundle'\n"", u""rake db:migrate || error_exit 'Failed to execute database migration'\n"", u'# Startup the rails server\n', u'rails server -d\n', u'echo ""cd /home/ec2-user/sample"" >> /etc/rc.local\n', u'echo ""rails server -d"" >> /etc/rc.local\n', u'# All is well so signal success\n', u'/opt/aws/bin/cfn-signal -e 0 -r ""Rails application setup complete"" \'', {u'Ref': u'WaitHandle'}, u""'\n""]]}}"
Parameters.WebServerCapacity.Description,The initial number of WebServer instances
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./home/ec2-user/sample/config/database.yml.mode,000644
Outputs.WebsiteURL.Value,"{u'Fn::Join': [u'', [u'http://', {u'Fn::GetAtt': [u'ElasticLoadBalancer', u'DNSName']}]]}"
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.sources./home/ec2-user/sample,https://s3.amazonaws.com/cloudformation-examples/CloudFormationRailsSample.zip
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.packages.yum.mysql-libs,[]
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.HealthCheck.Timeout,5
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.HealthCheck.Interval,10
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./home/ec2-user/sample/config/database.yml.group,root
Parameters.KeyName.Type,String
Parameters.DBPassword.ConstraintDescription,must contain only alphanumeric characters.
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.AvailabilityZones,{u'Fn::GetAZs': u''}
Parameters.DBAllocatedStorage.ConstraintDescription,must be between 5 and 1024Gb.
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.packages.yum.make,[]
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Type,AWS::ElasticLoadBalancing::LoadBalancer
Parameters.WebServerCapacity.MaxValue,5
Resources.AWS::RDS::DBInstance.Properties.DBSecurityGroups,[{u'Ref': u'DBSecurityGroup'}]
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.packages.yum.gcc-c++,[]
Resources.AWS::RDS::DBInstance.Properties.MasterUserPassword,{u'Ref': u'DBPassword'}
Parameters.DBInstanceClass.Description,The database instance type
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./home/ec2-user/sample/config/database.yml.owner,root
Parameters.WebServerCapacity.ConstraintDescription,must be between 1 and 5 EC2 instances.
Parameters.DBUsername.Type,String
Parameters.DBAllocatedStorage.MaxValue,1024
Parameters.DBPassword.Type,String
Parameters.DBName.Type,String
Parameters.WebServerCapacity.MinValue,1
Parameters.DBPassword.MinLength,8
Parameters.DBName.MinLength,1
Parameters.MultiAZDatabase.AllowedValues,"[u'true', u'false']"
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.HealthCheck.HealthyThreshold,2
Resources.AWS::CloudFormation::WaitCondition.Properties.Count,{u'Ref': u'WebServerCapacity'}
Resources.AWS::AutoScaling::LaunchConfiguration.Properties.KeyName,{u'Ref': u'KeyName'}
Parameters.DBUsername.MinLength,1
Resources.AWS::RDS::DBInstance.Properties.Engine,MySQL
Resources.AWS::RDS::DBSecurityGroup.Type,AWS::RDS::DBSecurityGroup
Resources.AWS::EC2::SecurityGroup.Properties.GroupDescription,Enable HTTP access via port 3000 locked down to the load balancer + SSH access
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.Listeners,"[{u'InstancePort': u'3000', u'PolicyNames': [u'CookieBasedPolicy'], u'LoadBalancerPort': u'80', u'Protocol': u'HTTP'}]"
Parameters.DBUsername.NoEcho,true
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.LaunchConfigurationName,{u'Ref': u'LaunchConfig'}
Resources.AWS::CloudFormation::WaitCondition.DependsOn,WebServerGroup
Resources.AWS::RDS::DBSecurityGroup.Properties.GroupDescription,Grant database access to web server
Parameters.DBPassword.NoEcho,true
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.LBCookieStickinessPolicy,"[{u'PolicyName': u'CookieBasedPolicy', u'CookieExpirationPeriod': u'30'}]"
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.packages.yum.rubygems,[]
Resources.AWS::RDS::DBSecurityGroup.Properties.DBSecurityGroupIngress.EC2SecurityGroupName,{u'Ref': u'WebServerSecurityGroup'}
Resources.AWS::CloudFormation::WaitCondition.Properties.Handle,{u'Ref': u'WaitHandle'}
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.files./home/ec2-user/sample/config/database.yml.content,"{u'Fn::Join': [u'', [u'development:\n', u'  adapter: mysql2\n', u'  encoding: utf8\n', u'  reconnect: false\n', u'  pool: 5\n', u'  database: ', {u'Ref': u'DBName'}, u'\n', u'  username: ', {u'Ref': u'DBUsername'}, u'\n', u'  password: ', {u'Ref': u'DBPassword'}, u'\n', u'  host: ', {u'Fn::GetAtt': [u'MySQLDatabase', u'Endpoint.Address']}, u'\n', u'  port: ', {u'Fn::GetAtt': [u'MySQLDatabase', u'Endpoint.Port']}, u'\n']]}"
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.Comment2,The application is downloaded from the CloudFormationRailsSample.zip file
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.Comment1,Configure the bootstrap helpers to install the Rails
Parameters.MultiAZDatabase.ConstraintDescription,must be either true or false.
Resources.AWS::RDS::DBInstance.Type,AWS::RDS::DBInstance
Resources.AWS::RDS::DBInstance.Properties.DBInstanceClass,{u'Ref': u'DBInstanceClass'}
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.packages.rubygems.therubyracer,[]
Parameters.KeyName.Description,Name of an existing EC2 KeyPair to enable SSH access to the instances
Parameters.MultiAZDatabase.Description,Create a multi-AZ MySQL Amazon RDS database instance
Resources.AWS::EC2::SecurityGroup.Type,AWS::EC2::SecurityGroup
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.packages.rubygems.execjs,[]
Resources.AWS::ElasticLoadBalancing::LoadBalancer.Properties.HealthCheck.Target,HTTP:3000/
Parameters.DBAllocatedStorage.Default,5
Parameters.SSHLocation.MinLength,9
Resources.AWS::RDS::DBInstance.Properties.MultiAZ,{u'Ref': u'MultiAZDatabase'}
Resources.AWS::AutoScaling::LaunchConfiguration.Type,AWS::AutoScaling::LaunchConfiguration
Parameters.KeyName.MinLength,1
Resources.AWS::AutoScaling::AutoScalingGroup.Type,AWS::AutoScaling::AutoScalingGroup
Parameters.DBName.AllowedPattern,[a-zA-Z][a-zA-Z0-9]*
Parameters.DBName.Default,MyDatabase
Resources.AWS::AutoScaling::LaunchConfiguration.Metadata.AWS::CloudFormation::Init.config.packages.rubygems.rack,[u'1.3.6']
Resources.AWS::AutoScaling::LaunchConfiguration.Properties.ImageId,"{u'Fn::FindInMap': [u'AWSRegionArch2AMI', {u'Ref': u'AWS::Region'}, {u'Fn::FindInMap': [u'AWSInstanceType2Arch', {u'Ref': u'InstanceType'}, u'Arch']}]}"
Resources.AWS::CloudFormation::WaitConditionHandle.Type,AWS::CloudFormation::WaitConditionHandle
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.MaxSize,5
Parameters.SSHLocation.Type,String
Resources.AWS::RDS::DBInstance.Properties.AllocatedStorage,{u'Ref': u'DBAllocatedStorage'}
Parameters.WebServerCapacity.Default,2
Parameters.DBInstanceClass.AllowedValues,"[u'db.m1.small', u'db.m1.large', u'db.m1.xlarge', u'db.m2.xlarge', u'db.m2.2xlarge', u'db.m2.4xlarge']"
Parameters.DBPassword.Description,Password for MySQL database access
Parameters.DBInstanceClass.Type,String
Parameters.DBAllocatedStorage.MinValue,5
Parameters.DBName.MaxLength,64
Parameters.SSHLocation.MaxLength,18
Parameters.SSHLocation.Default,0.0.0.0/0
Resources.AWS::CloudFormation::WaitCondition.Type,AWS::CloudFormation::WaitCondition
Parameters.DBUsername.AllowedPattern,[a-zA-Z][a-zA-Z0-9]*
Resources.AWS::AutoScaling::AutoScalingGroup.Properties.LoadBalancerNames,[{u'Ref': u'ElasticLoadBalancer'}]
Resources.AWS::RDS::DBInstance.Properties.DBName,{u'Ref': u'DBName'}
Parameters.KeyName.AllowedPattern,[-_ a-zA-Z0-9]*
Parameters.DBUsername.MaxLength,16
Outputs.WebsiteURL.Description,URL for newly created Rails application
Parameters.DBAllocatedStorage.Description,The size of the database (Gb)
Parameters.WebServerCapacity.Type,Number
Resources.AWS::EC2::SecurityGroup.Properties.SecurityGroupIngress,"[{u'ToPort': u'3000', u'IpProtocol': u'tcp', u'SourceSecurityGroupOwnerId': {u'Fn::GetAtt': [u'ElasticLoadBalancer', u'SourceSecurityGroup.OwnerAlias']}, u'SourceSecurityGroupName': {u'Fn::GetAtt': [u'ElasticLoadBalancer', u'SourceSecurityGroup.GroupName']}, u'FromPort': u'3000'}, {u'ToPort': u'22', u'IpProtocol': u'tcp', u'CidrIp': {u'Ref': u'SSHLocation'}, u'FromPort': u'22'}]"
Parameters.MultiAZDatabase.Type,String
