Resources.AWS::Events::Rule.Properties.EventPattern.source,[u'aws.health']
Resources.AWS::Lambda::Function.Properties.Description,Lambda Function to disable stage transition to pause deployments when an AWS Health issue event is generated
Resources.AWS::Lambda::Permission.Properties.FunctionName,"{u'Fn::GetAtt': [u'LambdaFunction', u'Arn']}"
Parameters.pipelineName.Description,The name of your AWS Pipeline
Resources.AWS::Lambda::Permission.Properties.Principal,events.amazonaws.com
Resources.AWS::Lambda::Permission.Properties.Action,lambda:InvokeFunction
Parameters.pipelineName.Default,MyPipeline
Resources.AWS::Lambda::Function.Properties.Timeout,120
Resources.AWS::Events::Rule.Properties.EventPattern.detail-type,[u'AWS Health Event']
Resources.AWS::Events::Rule.Properties.EventPattern.detail.service,[u'EC2']
Resources.AWS::IAM::Role.Properties.Path,/
Resources.AWS::Lambda::Permission.Type,AWS::Lambda::Permission
Resources.AWS::IAM::Role.Type,AWS::IAM::Role
Resources.AWS::Lambda::Function.Properties.Role,"{u'Fn::GetAtt': [u'LambdaIAMRoleforCodepipelineDisableStageTransition', u'Arn']}"
Resources.AWS::Lambda::Function.Properties.Code.ZipFile,"{u'Fn::Join': [u'\n', [u'// Sample Lambda Function to disable stage transition to pause deployments when an AWS Health issue event is generated.', u""var AWS = require('aws-sdk');"", u'var codepipeline = new AWS.CodePipeline();', u'// define configuration', u'const pipelineName = process.env.pipelineName; //Pipeline Name', u'const stageName = process.env.stageName; //Stage Name (e.g. Beta)', u'//main function which gets AWS Health data from Cloudwatch event', u'exports.handler = (event, context, callback) => {', u'   //extract details from Cloudwatch event', u'   eventName = event.detail.eventTypeCode;', u'   //disable transitions into the next stage of the pipeline', u'   var params = {', u'       pipelineName: pipelineName,', u""       reason: 'AWS Health issue detected - please see AWS Personal Health Dashboard for more details',"", u'       stageName: stageName,', u""       transitionType: 'Inbound'"", u'       };', u'   codepipeline.disableStageTransition(params, function(err, data) {', u'   if (err) {', u'       const errorMessage = `Error in disabling CodePipeline stage transition for pipeline, ${pipelineName} in response to AWS Health event: ${eventName}.`;', u'       console.log(errorMessage, err);', u'       callback(errorMessage);', u'   }', u'   else {', u'       const successMessage = `Successfully got details from AWS Health event, ${eventName}, and disabled stage transition to ${stageName} for pipeline, ${pipelineName}.`;', u'       console.log(successMessage, data);', u'       callback(null, successMessage); //return success', u'       }', u'   });', u'};', u'']]}"
Resources.AWS::Events::Rule.Properties.State,ENABLED
Resources.AWS::Events::Rule.Properties.EventPattern.detail.eventTypeCategory,[u'issue']
Resources.AWS::Lambda::Function.Properties.Handler,index.handler
Parameters.stageName.Type,String
Resources.AWS::Events::Rule.Properties.Targets,"[{u'Id': u'CodePipelineDisableStageTransitionFunction', u'Arn': {u'Fn::GetAtt': [u'LambdaFunction', u'Arn']}}]"
Metadata.AWS::CloudFormation::Interface.ParameterLabels.stageName.default,stageName
Resources.AWS::Lambda::Function.Properties.Environment.Variables.pipelineName,{u'Ref': u'pipelineName'}
Parameters.stageName.Description,The name of your AWS Pipeline stage
Resources.AWS::Events::Rule.Properties.Description,AWS Health EC2 Issues
Resources.AWS::Lambda::Function.Type,AWS::Lambda::Function
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Statement,"[{u'Action': u'sts:AssumeRole', u'Effect': u'Allow', u'Principal': {u'Service': u'lambda.amazonaws.com'}}]"
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Version,2012-10-17
Metadata.AWS::CloudFormation::Interface.ParameterLabels.pipelineName.default,pipelineName
Resources.AWS::Lambda::Function.Properties.Environment.Variables.stageName,{u'Ref': u'stageName'}
Resources.AWS::Lambda::Function.Properties.Runtime,nodejs6.1
Parameters.stageName.Default,Beta
Resources.AWS::Events::Rule.Type,AWS::Events::Rule
Parameters.pipelineName.Type,String
Resources.AWS::Lambda::Permission.Properties.SourceArn,"{u'Fn::GetAtt': [u'CloudWatchEventRule', u'Arn']}"
Metadata.AWS::CloudFormation::Interface.ParameterGroups,"[{u'Parameters': [u'pipelineName', u'stageName'], u'Label': {u'default': u'General Configuration'}}]"
Resources.AWS::IAM::Role.Properties.Policies,"[{u'PolicyName': u'AWSCodepipelineDisableStageTransitionAndLambda', u'PolicyDocument': {u'Version': u'2012-10-17', u'Statement': [{u'Action': [u'logs:CreateLogGroup', u'logs:CreateLogStream', u'logs:PutLogEvents'], u'Resource': [u'arn:aws:logs:*:*:*'], u'Effect': u'Allow', u'Sid': u'LambdaLogging'}, {u'Action': [u'codepipeline:DisableStageTransition'], u'Resource': u'*', u'Effect': u'Allow', u'Sid': u'CodePipelineDisableStageTransition'}]}}]"
