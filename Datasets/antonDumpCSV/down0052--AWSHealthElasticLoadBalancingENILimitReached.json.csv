Parameters.DryRun.Description,Set to true to test function without actually deleting ENIs
Resources.AWS::Events::Rule.Properties.EventPattern.source,[u'aws.health']
Resources.AWS::Lambda::Function.Properties.Description,Delete unused ENIs in response to AWS health events
Resources.AWS::Lambda::Permission.Properties.FunctionName,"{u'Fn::GetAtt': [u'LambdaFunction', u'Arn']}"
Resources.AWS::Lambda::Permission.Properties.Principal,events.amazonaws.com
Resources.AWS::Lambda::Permission.Properties.Action,lambda:InvokeFunction
Resources.AWS::Events::Rule.Properties.EventPattern.detail.eventTypeCode,[u'AWS_ELASTICLOADBALANCING_ENI_LIMIT_REACHED']
Resources.AWS::Lambda::Function.Properties.Timeout,120
Parameters.DryRun.AllowedValues,"[u'true', u'false']"
Resources.AWS::Events::Rule.Properties.EventPattern.detail-type,[u'AWS Health Event']
Metadata.AWS::CloudFormation::Interface.ParameterLabels.MaxENI.default,Maximum ENI to process
Resources.AWS::Events::Rule.Properties.EventPattern.detail.service,[u'ELASTICLOADBALANCING']
Resources.AWS::Lambda::Permission.Type,AWS::Lambda::Permission
Resources.AWS::Lambda::Function.Properties.Environment.Variables.DRY_RUN,{u'Ref': u'DryRun'}
Resources.AWS::IAM::Role.Type,AWS::IAM::Role
Resources.AWS::Lambda::Function.Properties.Role,"{u'Fn::GetAtt': [u'LambdaIAMRole', u'Arn']}"
Resources.AWS::Lambda::Function.Properties.Code.ZipFile,"{u'Fn::Join': [u'\n', [u'// Sample Lambda Function to remove unattached ENIs in the region of the event when AWS Health AWS_ELASTICLOADBALANCING_ENI_LIMIT_REACHED events are generated. ', u'// This is useful for situations where you might have leftover ENIs that are not used and are preventing load balancer scaling', u""'use strict';"", u""var AWS = require('aws-sdk');"", u""const dryRun = ((process.env.DRY_RUN || 'true') == 'true');"", u'const maxEniToProcess = process.env.MAX_ENI || 100;', u'var ec2 = null; // scoping object so both functions can see it', u'', u'//main function which gets AWS Health data from Cloudwatch event', u'exports.handler = (event, context, callback) => {', u'    //extract details from Cloudwatch event', u'    var eventName = event.detail.eventTypeCode;', u'    var region = event.region;', u'    const awsHealthSuccessMessage = `Successfully got details from AWS Health event ${eventName} and executed automated action in ${region}. Further details in CloudWatch Logs.`;', u'', u'    // we only need to run this automation once per invocation since the issue ', u'    // of ENI exhaustion is regional and not dependent on the load balancers in the alert', u""    // Event will only trigger for one region so we don't have to loop that"", u'    AWS.config.update({region: region});', u'    AWS.config.update({maxRetries: 3});', u'    ec2 = new AWS.EC2(); // creating the object now that we know event region', u'    ', u""    console.log ('Getting the list of available ENI in region %s', region);"", u'    var params = {', u""        Filters: [{Name: 'status',Values: ['available']}]"", u'    };', u'    ', u'    ec2.describeNetworkInterfaces(params, function(err, data) {', u'        if (err) ', u'        {', u'            console.log( region, err, err.stack); // an error occurred', u""            callback('Error describing ENIs; check CloudWatch Logs for details');"", u'        }', u'        else ', u'        {', u'            var numberToProcess = data.NetworkInterfaces.length;', u'            if ((maxEniToProcess > 0) && (data.NetworkInterfaces.length > maxEniToProcess)) numberToProcess = maxEniToProcess;', u""            console.log('Found %s available ENI; processing %s',data.NetworkInterfaces.length,numberToProcess);"", u'            // for each interface, remove it', u'            for ( var i=0; i < numberToProcess; i+=1)', u'            {', u'                deleteNetworkInterface(data.NetworkInterfaces[i].NetworkInterfaceId,dryRun); ', u'            }', u'            ', u'            callback(null, awsHealthSuccessMessage); //return success', u'        }', u'    });', u'};', u'', u'//This function removes an ENI', u'function deleteNetworkInterface (networkInterfaceId, dryrun) {', u""    console.log ('Running code to delete ENI %s with Dry Run set to %s', networkInterfaceId, dryrun);"", u'    var deleteNetworkInterfaceParams = {', u'        NetworkInterfaceId: networkInterfaceId,', u'        DryRun: dryrun', u'    };', u'    ec2.deleteNetworkInterface(deleteNetworkInterfaceParams, function(err, data) {', u'        if (err) ', u'        {', u'            switch (err.code)', u'            {', u""                case 'DryRunOperation':"", u""                    console.log('Dry run attempt complete for %s after %s retries', networkInterfaceId, this.retryCount);"", u'                    break;', u""                case 'RequestLimitExceeded':"", u""                    console.log('Request limit exceeded while processing %s after %s retries', networkInterfaceId, this.retryCount);"", u'                    break;', u'                default:', u'                    console.log(networkInterfaceId, err, err.stack);    ', u'            }', u'        }', u""        else console.log('ENI %s deleted after %s retries', networkInterfaceId, this.retryCount);  // successful response"", u'    });', u'}', u'']]}"
Metadata.AWS::CloudFormation::Interface.ParameterLabels.DryRun.default,Dry Run
Resources.AWS::Events::Rule.Properties.State,ENABLED
Resources.AWS::Events::Rule.Properties.EventPattern.detail.eventTypeCategory,[u'issue']
Parameters.MaxENI.Type,Number
Resources.AWS::Lambda::Function.Properties.Handler,index.handler
Resources.AWS::Events::Rule.Properties.Targets,"[{u'Id': u'InsufficientENIsFunction', u'Arn': {u'Fn::GetAtt': [u'LambdaFunction', u'Arn']}}]"
Parameters.MaxENI.Default,100
Resources.AWS::IAM::Role.Properties.Policies,"[{u'PolicyName': u'AELBInsufficientENIs', u'PolicyDocument': {u'Version': u'2012-10-17', u'Statement': [{u'Action': [u'logs:CreateLogGroup', u'logs:CreateLogStream', u'logs:PutLogEvents'], u'Resource': [u'arn:aws:logs:*:*:*'], u'Effect': u'Allow', u'Sid': u'LambdaLogging'}, {u'Action': [u'ec2:DescribeNetworkInterfaces', u'ec2:DeleteNetworkInterface'], u'Resource': u'*', u'Effect': u'Allow', u'Sid': u'ENI'}]}}]"
Resources.AWS::IAM::Role.Properties.Path,/
Resources.AWS::Lambda::Function.Type,AWS::Lambda::Function
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Statement,"[{u'Action': u'sts:AssumeRole', u'Effect': u'Allow', u'Principal': {u'Service': u'lambda.amazonaws.com'}}]"
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Version,2012-10-17
Parameters.MaxENI.Description,Number of ENIs to process. Set to 0 to do all the function finds (this may result in account throttling)
Resources.AWS::Lambda::Function.Properties.Runtime,nodejs6.1
Resources.AWS::Events::Rule.Type,AWS::Events::Rule
Resources.AWS::Lambda::Permission.Properties.SourceArn,"{u'Fn::GetAtt': [u'CloudWatchEventRule', u'Arn']}"
Parameters.DryRun.Default,true
Parameters.DryRun.Type,String
Resources.AWS::Lambda::Function.Properties.Environment.Variables.MAX_ENI,{u'Ref': u'MaxENI'}
Metadata.AWS::CloudFormation::Interface.ParameterGroups,"[{u'Parameters': [u'DryRun', u'MaxENI'], u'Label': {u'default': u'General Configuration'}}]"
Resources.AWS::Events::Rule.Properties.Description,AWS_ELASTICLOADBALANCING_ENI_LIMIT_REACHED
