Outputs.VolumeId.Value,CustomCreateSnap.VolumeId
Resources.AWS::IAM::Role.Properties.ManagedPolicyArns,[u'arn:aws:iam::aws:policy/AdministratorAccess']
Parameters.RestoreImageId.Type,String
Parameters.KeyName.Description,Name of an existing EC2 KeyPair to enable SSH access to the instance
Resources.AWS::EC2::SecurityGroup.Properties.GroupDescription,Enable SSH access via port 22
Resources.AWS::EC2::Instance.Properties.KeyName,KeyName
Outputs.VolumeId.Description,Volume ID for mock PHD Event
Resources.AWS::Lambda::Function.Properties.Timeout,120
Resources.AWS::EC2::EIPAssociation.Properties.AllocationId,"[u'EIP0', u'AllocationId']"
Resources.Custom::LookupAmi.Properties.Region,AWS::Region
Resources.AWS::EC2::EIP.Type,AWS::EC2::EIP
Resources.Custom::LookupAmi.Type,Custom::LookupAmi
Resources.Custom::CreateSnap.Properties.InstanceId,EC2Instance
Resources.AWS::IAM::Role.Type,AWS::IAM::Role
Resources.AWS::Lambda::Function.Properties.Role,ExecutionRole.Arn
Parameters.SSHLocation.Type,String
Resources.AWS::Lambda::Function.Properties.Code.ZipFile,"import boto3
import cfnresponse

def lambda_handler(event, context):
    try:
        if event['RequestType'] == 'Delete':
          responseData = {'Delete': 'SUCCESS'}
          cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
        else:
          instance = event['ResourceProperties']['InstanceId']
          region = event['ResourceProperties']['Region']

          client = boto3.client('ec2', region_name=region)

          getvolume = client.describe_instances(
              InstanceIds=[instance],
          )

          createami = client.create_image(
              InstanceId=instance,
              Name=instance,
              NoReboot=True
          )
          responseData = {'AmiId': createami['ImageId'], 'VolumeId': getvolume['Reservations'][0]['Instances'][0]['BlockDeviceMappings'][0]['Ebs']['VolumeId']}
          cfnresponse.send(event, context, cfnresponse.SUCCESS, responseData)
    except Exception as e:
        responseData = {'Error': str(e)}
        cfnresponse.send(event, context, cfnresponse.FAILED, responseData)
"
Parameters.VpcId.Type,AWS::EC2::VPC::Id
Parameters.VpcId.Description,VpcId of your existing Virtual Private Cloud (VPC)
Resources.Custom::LookupAmi.Properties.ServiceToken,LambdaLookupAmi.Arn
Resources.Custom::LookupAmi.Version,1
Resources.AWS::Lambda::Function.Properties.Handler,index.lambda_handler
Parameters.SubnetId.Type,AWS::EC2::Subnet::Id
Parameters.SubnetId.Description,SubnetId of an existing subnet (for the primary network) in your Virtual Private Cloud (VPC) Cloud.
Resources.AWS::EC2::Instance.Properties.SubnetId,SubnetId
Outputs.EC2Instance.Description,EC2 Instance
Outputs.EIP.Description,Elastic IP
Resources.AWS::EC2::EIPAssociation.Type,AWS::EC2::EIPAssociation
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Statement,"[{u'Action': [u'sts:AssumeRole'], u'Effect': u'Allow', u'Principal': {u'Service': [u'events.amazonaws.com', u'lambda.amazonaws.com', u'states.amazonaws.com']}}]"
Resources.AWS::Lambda::Function.Type,AWS::Lambda::Function
Resources.AWS::EC2::Instance.Type,AWS::EC2::Instance
Parameters.RestoreImageId.Description,Snapshot to be used as root disk - leave this blank when creating the Stack.
Resources.Custom::CreateSnap.Version,1
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Version,2008-10-17
Parameters.SSHLocation.Description,The IP address range that can be used to SSH to the EC2 instances
Resources.Custom::CreateSnap.Properties.ServiceToken,LambdaCreateSnap.Arn
Parameters.SSHLocation.Default,0.0.0.0/0
Resources.AWS::Lambda::Function.Properties.Runtime,python3.6
Resources.Custom::CreateSnap.Type,Custom::CreateSnap
Resources.AWS::EC2::EIPAssociation.Properties.InstanceId,EC2Instance
Resources.AWS::EC2::EIP.Properties.Domain,vpc
Resources.AWS::EC2::SecurityGroup.Properties.VpcId,VpcId
Outputs.EC2Instance.Value,EC2Instance
Resources.AWS::EC2::SecurityGroup.Type,AWS::EC2::SecurityGroup
Outputs.AMI.Value,CustomCreateSnap.AmiId
Parameters.SSHLocation.AllowedPattern,"(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})"
Outputs.EIP.Value,EIP0
Resources.AWS::EC2::Instance.Properties.ImageId,"[u'RestoreImageIdCond', u'RestoreImageId', u'CustomLookupAmi.ImageId']"
Outputs.AMI.Description,AMI created for backup
Resources.AWS::EC2::SecurityGroup.Properties.SecurityGroupIngress,"[{u'ToPort': 22, u'FromPort': 22, u'IpProtocol': u'tcp', u'CidrIp': u'SSHLocation'}]"
Resources.AWS::EC2::Instance.Properties.Tags,"[{u'Value': u'AWS::StackName', u'Key': u'Name'}]"
Parameters.KeyName.Type,AWS::EC2::KeyPair::KeyName
Resources.Custom::CreateSnap.Properties.Region,AWS::Region
