Outputs.LambdaRoleArn.Value,"{u'Fn::GetAtt': [u'LambdaRole', u'Arn']}"
Resources.AWS::Lambda::EventSourceMapping.DependsOn,"[u'JobStreamDynamoDBTable', u'LambdaCommentsCombinedPolicy', u'LambdaRoleInstanceProfile', u'LambdaRole']"
Resources.AWS::Lambda::Function.Properties.Runtime,nodejs
Resources.AWS::Lambda::Permission.Properties.Action,lambda:InvokeFunction
Resources.AWS::IAM::Role.Properties.Path,/
Resources.AWS::Lambda::Function.Properties.Description,QueueComment
Resources.AWS::Lambda::Permission.Properties.FunctionName,"{u'Fn::GetAtt': [u'QueueCommentLambdaFunction', u'Arn']}"
Parameters.TagName.Description,Tag for resources
Parameters.NewResources.AllowedValues,"[u'true', u'false']"
Resources.AWS::Lambda::Permission.Properties.Principal,apigateway.amazonaws.com
Resources.AWS::ApiGateway::Deployment.DependsOn,"[u'RestApi', u'CommentsApiResource', u'PostCommentApiMethod', u'OptionsCommentApiMethod']"
Resources.AWS::Lambda::Function.Properties.Timeout,30
Resources.AWS::Lambda::EventSourceMapping.Properties.Enabled,True
Resources.AWS::ApiGateway::Resource.Properties.ParentId,"{u'Fn::GetAtt': [u'RestApi', u'RootResourceId']}"
Resources.AWS::DynamoDB::Table.Properties.KeySchema,"[{u'KeyType': u'HASH', u'AttributeName': u'id'}]"
Outputs.LambdaRoleArn.Description,ARN for LambdaRole
Resources.AWS::ApiGateway::Deployment.Properties.StageName,prod
Resources.AWS::S3::Bucket.Properties.WebsiteConfiguration.IndexDocument,index.html
Resources.AWS::IAM::InstanceProfile.Properties.Path,/
Resources.AWS::Lambda::Function.Properties.Code.ZipFile,"exports.handler = function(event, context) { context.fail('Not Implemented'); };"
Resources.AWS::ApiGateway::Deployment.Properties.Description,Production deployment
Resources.AWS::Lambda::Function.Properties.Handler,lib/index.handler
Parameters.NewResources.Default,false
Resources.AWS::DynamoDB::Table.Properties.StreamSpecification.StreamViewType,NEW_IMAGE
Resources.AWS::Lambda::EventSourceMapping.Properties.StartingPosition,LATEST
Resources.AWS::DynamoDB::Table.Properties.ProvisionedThroughput.WriteCapacityUnits,1
Parameters.NewResources.Description,Include new resources (still being developed)
Resources.AWS::DynamoDB::Table.Properties.AttributeDefinitions,"[{u'AttributeName': u'id', u'AttributeType': u'S'}]"
Resources.AWS::ApiGateway::Method.Properties.HttpMethod,POST
Resources.AWS::ApiGateway::Method.Properties.Integration.IntegrationHttpMethod,POST
Resources.AWS::Lambda::Function.Properties.MemorySize,128
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Statement,"[{u'Action': [u'sts:AssumeRole'], u'Effect': u'Allow', u'Principal': {u'Service': [u'lambda.amazonaws.com']}}]"
Resources.AWS::IAM::Policy.Properties.PolicyName,LambdaCommentsCombined
Resources.AWS::Lambda::Function.Properties.Role,"{u'Fn::GetAtt': [u'LambdaRole', u'Arn']}"
Resources.AWS::ApiGateway::Resource.Properties.PathPart,comments
Parameters.Origin.Description,Origin URL for CORS
Resources.AWS::ApiGateway::Method.Properties.MethodResponses,"[{u'ResponseParameters': {u'method.response.header.Access-Control-Allow-Origin': True}, u'StatusCode': u'201'}, {u'ResponseParameters': {u'method.response.header.Access-Control-Allow-Origin': True}, u'StatusCode': u'400'}]"
Resources.AWS::ApiGateway::RestApi.Properties.Description,API for blog comments
Resources.AWS::ApiGateway::Method.Properties.Integration.RequestTemplates.application/json,"{ ""sourceIp"": ""$context.identity.sourceIp"", ""fields"": $input.json('$') }"
Resources.AWS::Lambda::EventSourceMapping.Properties.EventSourceArn,"{u'Fn::GetAtt': [u'JobStreamDynamoDBTable', u'StreamArn']}"
Resources.AWS::Lambda::EventSourceMapping.Properties.BatchSize,20
Resources.AWS::DynamoDB::Table.Properties.ProvisionedThroughput.ReadCapacityUnits,1
Resources.AWS::ApiGateway::Method.Properties.AuthorizationType,NONE
