Resources.AWS::Events::Rule.Properties.ScheduleExpression,rate(1 day)
Parameters.SendEmail.Type,String
Resources.AWS::CloudWatch::Alarm.Properties.ComparisonOperator,GreaterThanThreshold
Outputs.ExpireAccessKeyLambda.Export.Name,${AWS::Region}-${AWS::StackName}-ExpireAccessKeyLambda
Parameters.SenderEmail.Default,My AWS Account <user@example.com>
Parameters.GracePeriod.Default,14
Resources.AWS::Lambda::Permission.Properties.FunctionName,ExpireAccessKeyLambda.Arn
Parameters.DisableKeys.Description,Set to True if you want to disabled expired IAM access keys
Resources.AWS::Lambda::Function.Properties.Code.S3Key,aws-infra/master/RotateCredentials.zip
Parameters.GracePeriod.Type,Number
Resources.AWS::CloudWatch::Alarm.Properties.EvaluationPeriods,1
Resources.AWS::Lambda::Permission.Properties.Action,lambda:InvokeFunction
Parameters.SendReport.Description,Send expired credentials report to a notification topic
Resources.AWS::CloudWatch::Alarm.Type,AWS::CloudWatch::Alarm
Resources.AWS::Lambda::Function.Properties.Timeout,30
Parameters.LambdaBucket.Description,Bucket Holding Lambdas
Resources.AWS::IAM::Role.Properties.Path,/
Resources.AWS::Lambda::Permission.Type,AWS::Lambda::Permission
Resources.AWS::CloudWatch::Alarm.Properties.Statistic,Sum
Resources.AWS::IAM::Role.Type,AWS::IAM::Role
Resources.AWS::Lambda::Function.Properties.Role,LambdaExecutionRole.Arn
Parameters.DisableKeys.Type,String
Parameters.SenderEmail.Type,String
Resources.AWS::CloudWatch::Alarm.Properties.MetricName,Errors
Resources.AWS::Lambda::Function.Properties.Handler,ExpireAccessKeyLambda.lambda_handler
Parameters.SendEmail.AllowedValues,"[True, False]"
Resources.AWS::Lambda::Function.Properties.Code.S3Bucket,LambdaBucket
Resources.AWS::Events::Rule.Properties.Targets,"[{u'Id': u'ExpireAccessKeyLambda', u'Arn': u'ExpireAccessKeyLambda.Arn'}]"
Parameters.SendReport.AllowedValues,"[True, False]"
Parameters.SendReport.Type,String
Resources.AWS::CloudWatch::Alarm.Properties.Threshold,0
Resources.AWS::Lambda::Function.Properties.Environment.Variables.GRACE_PERIOD,GracePeriod
Parameters.SendEmail.Default,false
Resources.AWS::CloudWatch::Alarm.Properties.AlarmActions,[u'us-east-1-AccountAlertTopics-SNSAlertsErrorArn']
Parameters.LambdaBucket.Type,String
Resources.AWS::CloudWatch::Alarm.Properties.Dimensions,"[{u'Name': u'FunctionName', u'Value': u'ExpireAccessKeyLambda'}]"
Resources.AWS::CloudWatch::Alarm.Properties.Namespace,AWS/Lambda
Parameters.SenderEmail.Description,A SES verified sender email address
Resources.AWS::Lambda::Function.Type,AWS::Lambda::Function
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Statement,"[{u'Action': [u'sts:AssumeRole'], u'Effect': u'Allow', u'Principal': {u'Service': u'lambda.amazonaws.com'}}]"
Parameters.GracePeriod.Description,How many days to send the user a warning email before the lockout occurs
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Version,2012-10-17
Resources.AWS::CloudWatch::Alarm.Properties.ActionsEnabled,True
Parameters.DisableKeys.Default,false
Resources.AWS::Lambda::Function.Properties.Runtime,python2.7
Parameters.SendReport.Default,false
Resources.AWS::Events::Rule.Type,AWS::Events::Rule
Resources.AWS::Lambda::Function.Properties.Environment.Variables.DISABLE_KEYS,DisableKeys
Parameters.DisableKeys.AllowedValues,"[True, False]"
Resources.AWS::CloudWatch::Alarm.Properties.Period,60
Resources.AWS::Lambda::Permission.Properties.SourceArn,PeriodicEvent.Arn
Outputs.ExpireAccessKeyLambda.Value,ExpireAccessKeyLambda
Parameters.SendEmail.Description,Send expired credential notification emails to users
Resources.AWS::Lambda::Function.Properties.Environment.Variables.REPORT_TOPIC_ARN,us-east-1-AccountAlertTopics-SNSAlertsInfoArn
Resources.AWS::Lambda::Function.Properties.Environment.Variables.SENDER_EMAIL,SenderEmail
Resources.AWS::Lambda::Function.Properties.Environment.Variables.SEND_EMAIL,SendEmail
Resources.AWS::IAM::Role.Properties.Policies,"[{u'PolicyName': u'PublishToCloudwatch', u'PolicyDocument': {u'Version': u'2012-10-17', u'Statement': [{u'Action': [u'logs:CreateLogGroup', u'logs:CreateLogStream', u'logs:PutLogEvents'], u'Resource': u'arn:aws:logs:*:*:*', u'Effect': u'Allow'}]}}, {u'PolicyName': u'EnableAndDisableAccessKeys', u'PolicyDocument': {u'Version': u'2012-10-17', u'Statement': [{u'Action': [u'iam:UpdateAccessKey'], u'Resource': u'*', u'Effect': u'Allow'}]}}, {u'PolicyName': u'AccessCredentialsReport', u'PolicyDocument': {u'Version': u'2012-10-17', u'Statement': [{u'Action': [u'iam:GenerateCredentialReport', u'iam:GetCredentialReport'], u'Resource': u'*', u'Effect': u'Allow'}]}}, {u'PolicyName': u'AccessAccountInfo', u'PolicyDocument': {u'Version': u'2012-10-17', u'Statement': [{u'Action': [u'sts:GetCallerIdentity', u'iam:ListAccountAliases', u'iam:ListAccessKeys', u'iam:GetAccountPasswordPolicy'], u'Resource': u'*', u'Effect': u'Allow'}]}}, {u'PolicyName': u'SendEmails', u'PolicyDocument': {u'Version': u'2012-10-17', u'Statement': [{u'Action': [u'ses:SendEmail'], u'Resource': u'*', u'Effect': u'Allow'}]}}, {u'PolicyName': u'PublishSnsTopic', u'PolicyDocument': {u'Version': u'2012-10-17', u'Statement': [{u'Action': [u'sns:Publish'], u'Resource': u'us-east-1-AccountAlertTopics-SNSAlertsInfoArn', u'Effect': u'Allow'}]}}]"
Resources.AWS::Lambda::Function.Properties.Environment.Variables.SEND_REPORT,SendReport
Resources.AWS::Lambda::Permission.Properties.Principal,events.amazonaws.com
