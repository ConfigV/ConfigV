Resources.AWS::Events::Rule.Properties.EventPattern.source,[u'aws.health']
Resources.AWS::IAM::Policy.Properties.PolicyDocument.Version,2012-10-17
Resources.AWS::Lambda::Permission.Properties.FunctionName,"{u'Fn::GetAtt': [u'SNSPublishFunction', u'Arn']}"
Resources.AWS::Lambda::Permission.Properties.Principal,events.amazonaws.com
Resources.AWS::Lambda::Permission.Properties.Action,lambda:InvokeFunction
Resources.AWS::Lambda::Function.Properties.Timeout,25
Resources.AWS::IAM::Role.Properties.Path,/
Resources.AWS::Lambda::Function.Properties.Role,"{u'Fn::GetAtt': [u'LambdaFunctionRole', u'Arn']}"
Resources.AWS::Lambda::Function.Properties.Code.ZipFile,"{u'Fn::Join': [u'', [u'// Sample Lambda Function to send notifications to a SNS topic when an AWS Health event happens\n', u""var AWS = require('aws-sdk');\n"", u'var sns = new AWS.SNS();\n', u'\n', u'// define configuration\n', u'const snsTopic =process.env.SNSARN; //use ARN', u'\n', u'//main function which gets AWS Health data from Cloudwatch event\n', u'exports.handler = (event, context, callback) => {\n', u'    //extract details from Cloudwatch event\n', u""    healthMessage = event.detail.eventDescription[0].latestDescription + ' For more details, please see https://phd.aws.amazon.com/phd/home?region=us-east-1#/dashboard/open-issues';\n"", u'    eventName = event.detail.eventTypeCode\n', u'    //prepare message for SNS to publish\n', u'    var snsPublishParams = {\n', u'        Message: healthMessage, \n', u'        Subject: eventName,\n', u'        TopicArn: snsTopic\n', u'    };\n', u'    sns.publish(snsPublishParams, function(err, data) {\n', u'    if (err) {\n', u'        const snsPublishErrorMessage = `Error publishing AWS Health event to SNS`;\n', u'        console.log(snsPublishErrorMessage, err);\n', u'        callback(snsPublishErrorMessage);\n', u'        } \n', u'    else {\n', u'        const snsPublishSuccessMessage = `Successfully got details from AWS Health event, ${eventName} and published to SNS topic.`;\n', u'        console.log(snsPublishSuccessMessage, data);\n', u'        callback(null, snsPublishSuccessMessage); //return success\n', u'        }\n', u'    });\n', u'};']]}"
Resources.AWS::Events::Rule.Properties.State,ENABLED
Resources.AWS::Lambda::Function.Properties.Handler,index.handler
Resources.AWS::Events::Rule.Properties.Targets,"[{u'Id': u'SNSPublishFunction', u'Arn': {u'Fn::GetAtt': [u'SNSPublishFunction', u'Arn']}}]"
Parameters.SNSTopicName.Description,Please enter your SNS Topic Name. (SNS Topic must exist in the same region where this stack is launched).
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Statement,"[{u'Action': [u'sts:AssumeRole'], u'Effect': u'Allow', u'Principal': {u'Service': [u'lambda.amazonaws.com']}}]"
Resources.AWS::IAM::Role.Properties.AssumeRolePolicyDocument.Version,2012-10-17
Resources.AWS::Lambda::Function.Properties.Runtime,nodejs6.1
Resources.AWS::IAM::Policy.Properties.PolicyName,LambdaPolicy
Resources.AWS::Lambda::Permission.Properties.SourceArn,"{u'Fn::GetAtt': [u'CloudWatchEventRule', u'Arn']}"
Resources.AWS::Events::Rule.Properties.Description,EventRule
